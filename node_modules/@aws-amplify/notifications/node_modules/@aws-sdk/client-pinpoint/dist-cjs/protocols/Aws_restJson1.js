"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeAws_restJson1GetCampaignVersionCommand = exports.serializeAws_restJson1GetCampaignsCommand = exports.serializeAws_restJson1GetCampaignDateRangeKpiCommand = exports.serializeAws_restJson1GetCampaignActivitiesCommand = exports.serializeAws_restJson1GetCampaignCommand = exports.serializeAws_restJson1GetBaiduChannelCommand = exports.serializeAws_restJson1GetAppsCommand = exports.serializeAws_restJson1GetApplicationSettingsCommand = exports.serializeAws_restJson1GetApplicationDateRangeKpiCommand = exports.serializeAws_restJson1GetAppCommand = exports.serializeAws_restJson1GetApnsVoipSandboxChannelCommand = exports.serializeAws_restJson1GetApnsVoipChannelCommand = exports.serializeAws_restJson1GetApnsSandboxChannelCommand = exports.serializeAws_restJson1GetApnsChannelCommand = exports.serializeAws_restJson1GetAdmChannelCommand = exports.serializeAws_restJson1DeleteVoiceTemplateCommand = exports.serializeAws_restJson1DeleteVoiceChannelCommand = exports.serializeAws_restJson1DeleteUserEndpointsCommand = exports.serializeAws_restJson1DeleteSmsTemplateCommand = exports.serializeAws_restJson1DeleteSmsChannelCommand = exports.serializeAws_restJson1DeleteSegmentCommand = exports.serializeAws_restJson1DeleteRecommenderConfigurationCommand = exports.serializeAws_restJson1DeletePushTemplateCommand = exports.serializeAws_restJson1DeleteJourneyCommand = exports.serializeAws_restJson1DeleteInAppTemplateCommand = exports.serializeAws_restJson1DeleteGcmChannelCommand = exports.serializeAws_restJson1DeleteEventStreamCommand = exports.serializeAws_restJson1DeleteEndpointCommand = exports.serializeAws_restJson1DeleteEmailTemplateCommand = exports.serializeAws_restJson1DeleteEmailChannelCommand = exports.serializeAws_restJson1DeleteCampaignCommand = exports.serializeAws_restJson1DeleteBaiduChannelCommand = exports.serializeAws_restJson1DeleteAppCommand = exports.serializeAws_restJson1DeleteApnsVoipSandboxChannelCommand = exports.serializeAws_restJson1DeleteApnsVoipChannelCommand = exports.serializeAws_restJson1DeleteApnsSandboxChannelCommand = exports.serializeAws_restJson1DeleteApnsChannelCommand = exports.serializeAws_restJson1DeleteAdmChannelCommand = exports.serializeAws_restJson1CreateVoiceTemplateCommand = exports.serializeAws_restJson1CreateSmsTemplateCommand = exports.serializeAws_restJson1CreateSegmentCommand = exports.serializeAws_restJson1CreateRecommenderConfigurationCommand = exports.serializeAws_restJson1CreatePushTemplateCommand = exports.serializeAws_restJson1CreateJourneyCommand = exports.serializeAws_restJson1CreateInAppTemplateCommand = exports.serializeAws_restJson1CreateImportJobCommand = exports.serializeAws_restJson1CreateExportJobCommand = exports.serializeAws_restJson1CreateEmailTemplateCommand = exports.serializeAws_restJson1CreateCampaignCommand = exports.serializeAws_restJson1CreateAppCommand = void 0;
exports.serializeAws_restJson1UpdateApplicationSettingsCommand = exports.serializeAws_restJson1UpdateApnsVoipSandboxChannelCommand = exports.serializeAws_restJson1UpdateApnsVoipChannelCommand = exports.serializeAws_restJson1UpdateApnsSandboxChannelCommand = exports.serializeAws_restJson1UpdateApnsChannelCommand = exports.serializeAws_restJson1UpdateAdmChannelCommand = exports.serializeAws_restJson1UntagResourceCommand = exports.serializeAws_restJson1TagResourceCommand = exports.serializeAws_restJson1SendUsersMessagesCommand = exports.serializeAws_restJson1SendOTPMessageCommand = exports.serializeAws_restJson1SendMessagesCommand = exports.serializeAws_restJson1RemoveAttributesCommand = exports.serializeAws_restJson1PutEventStreamCommand = exports.serializeAws_restJson1PutEventsCommand = exports.serializeAws_restJson1PhoneNumberValidateCommand = exports.serializeAws_restJson1ListTemplateVersionsCommand = exports.serializeAws_restJson1ListTemplatesCommand = exports.serializeAws_restJson1ListTagsForResourceCommand = exports.serializeAws_restJson1ListJourneysCommand = exports.serializeAws_restJson1GetVoiceTemplateCommand = exports.serializeAws_restJson1GetVoiceChannelCommand = exports.serializeAws_restJson1GetUserEndpointsCommand = exports.serializeAws_restJson1GetSmsTemplateCommand = exports.serializeAws_restJson1GetSmsChannelCommand = exports.serializeAws_restJson1GetSegmentVersionsCommand = exports.serializeAws_restJson1GetSegmentVersionCommand = exports.serializeAws_restJson1GetSegmentsCommand = exports.serializeAws_restJson1GetSegmentImportJobsCommand = exports.serializeAws_restJson1GetSegmentExportJobsCommand = exports.serializeAws_restJson1GetSegmentCommand = exports.serializeAws_restJson1GetRecommenderConfigurationsCommand = exports.serializeAws_restJson1GetRecommenderConfigurationCommand = exports.serializeAws_restJson1GetPushTemplateCommand = exports.serializeAws_restJson1GetJourneyExecutionMetricsCommand = exports.serializeAws_restJson1GetJourneyExecutionActivityMetricsCommand = exports.serializeAws_restJson1GetJourneyDateRangeKpiCommand = exports.serializeAws_restJson1GetJourneyCommand = exports.serializeAws_restJson1GetInAppTemplateCommand = exports.serializeAws_restJson1GetInAppMessagesCommand = exports.serializeAws_restJson1GetImportJobsCommand = exports.serializeAws_restJson1GetImportJobCommand = exports.serializeAws_restJson1GetGcmChannelCommand = exports.serializeAws_restJson1GetExportJobsCommand = exports.serializeAws_restJson1GetExportJobCommand = exports.serializeAws_restJson1GetEventStreamCommand = exports.serializeAws_restJson1GetEndpointCommand = exports.serializeAws_restJson1GetEmailTemplateCommand = exports.serializeAws_restJson1GetEmailChannelCommand = exports.serializeAws_restJson1GetChannelsCommand = exports.serializeAws_restJson1GetCampaignVersionsCommand = void 0;
exports.deserializeAws_restJson1DeleteSmsChannelCommand = exports.deserializeAws_restJson1DeleteSegmentCommand = exports.deserializeAws_restJson1DeleteRecommenderConfigurationCommand = exports.deserializeAws_restJson1DeletePushTemplateCommand = exports.deserializeAws_restJson1DeleteJourneyCommand = exports.deserializeAws_restJson1DeleteInAppTemplateCommand = exports.deserializeAws_restJson1DeleteGcmChannelCommand = exports.deserializeAws_restJson1DeleteEventStreamCommand = exports.deserializeAws_restJson1DeleteEndpointCommand = exports.deserializeAws_restJson1DeleteEmailTemplateCommand = exports.deserializeAws_restJson1DeleteEmailChannelCommand = exports.deserializeAws_restJson1DeleteCampaignCommand = exports.deserializeAws_restJson1DeleteBaiduChannelCommand = exports.deserializeAws_restJson1DeleteAppCommand = exports.deserializeAws_restJson1DeleteApnsVoipSandboxChannelCommand = exports.deserializeAws_restJson1DeleteApnsVoipChannelCommand = exports.deserializeAws_restJson1DeleteApnsSandboxChannelCommand = exports.deserializeAws_restJson1DeleteApnsChannelCommand = exports.deserializeAws_restJson1DeleteAdmChannelCommand = exports.deserializeAws_restJson1CreateVoiceTemplateCommand = exports.deserializeAws_restJson1CreateSmsTemplateCommand = exports.deserializeAws_restJson1CreateSegmentCommand = exports.deserializeAws_restJson1CreateRecommenderConfigurationCommand = exports.deserializeAws_restJson1CreatePushTemplateCommand = exports.deserializeAws_restJson1CreateJourneyCommand = exports.deserializeAws_restJson1CreateInAppTemplateCommand = exports.deserializeAws_restJson1CreateImportJobCommand = exports.deserializeAws_restJson1CreateExportJobCommand = exports.deserializeAws_restJson1CreateEmailTemplateCommand = exports.deserializeAws_restJson1CreateCampaignCommand = exports.deserializeAws_restJson1CreateAppCommand = exports.serializeAws_restJson1VerifyOTPMessageCommand = exports.serializeAws_restJson1UpdateVoiceTemplateCommand = exports.serializeAws_restJson1UpdateVoiceChannelCommand = exports.serializeAws_restJson1UpdateTemplateActiveVersionCommand = exports.serializeAws_restJson1UpdateSmsTemplateCommand = exports.serializeAws_restJson1UpdateSmsChannelCommand = exports.serializeAws_restJson1UpdateSegmentCommand = exports.serializeAws_restJson1UpdateRecommenderConfigurationCommand = exports.serializeAws_restJson1UpdatePushTemplateCommand = exports.serializeAws_restJson1UpdateJourneyStateCommand = exports.serializeAws_restJson1UpdateJourneyCommand = exports.serializeAws_restJson1UpdateInAppTemplateCommand = exports.serializeAws_restJson1UpdateGcmChannelCommand = exports.serializeAws_restJson1UpdateEndpointsBatchCommand = exports.serializeAws_restJson1UpdateEndpointCommand = exports.serializeAws_restJson1UpdateEmailTemplateCommand = exports.serializeAws_restJson1UpdateEmailChannelCommand = exports.serializeAws_restJson1UpdateCampaignCommand = exports.serializeAws_restJson1UpdateBaiduChannelCommand = void 0;
exports.deserializeAws_restJson1GetVoiceTemplateCommand = exports.deserializeAws_restJson1GetVoiceChannelCommand = exports.deserializeAws_restJson1GetUserEndpointsCommand = exports.deserializeAws_restJson1GetSmsTemplateCommand = exports.deserializeAws_restJson1GetSmsChannelCommand = exports.deserializeAws_restJson1GetSegmentVersionsCommand = exports.deserializeAws_restJson1GetSegmentVersionCommand = exports.deserializeAws_restJson1GetSegmentsCommand = exports.deserializeAws_restJson1GetSegmentImportJobsCommand = exports.deserializeAws_restJson1GetSegmentExportJobsCommand = exports.deserializeAws_restJson1GetSegmentCommand = exports.deserializeAws_restJson1GetRecommenderConfigurationsCommand = exports.deserializeAws_restJson1GetRecommenderConfigurationCommand = exports.deserializeAws_restJson1GetPushTemplateCommand = exports.deserializeAws_restJson1GetJourneyExecutionMetricsCommand = exports.deserializeAws_restJson1GetJourneyExecutionActivityMetricsCommand = exports.deserializeAws_restJson1GetJourneyDateRangeKpiCommand = exports.deserializeAws_restJson1GetJourneyCommand = exports.deserializeAws_restJson1GetInAppTemplateCommand = exports.deserializeAws_restJson1GetInAppMessagesCommand = exports.deserializeAws_restJson1GetImportJobsCommand = exports.deserializeAws_restJson1GetImportJobCommand = exports.deserializeAws_restJson1GetGcmChannelCommand = exports.deserializeAws_restJson1GetExportJobsCommand = exports.deserializeAws_restJson1GetExportJobCommand = exports.deserializeAws_restJson1GetEventStreamCommand = exports.deserializeAws_restJson1GetEndpointCommand = exports.deserializeAws_restJson1GetEmailTemplateCommand = exports.deserializeAws_restJson1GetEmailChannelCommand = exports.deserializeAws_restJson1GetChannelsCommand = exports.deserializeAws_restJson1GetCampaignVersionsCommand = exports.deserializeAws_restJson1GetCampaignVersionCommand = exports.deserializeAws_restJson1GetCampaignsCommand = exports.deserializeAws_restJson1GetCampaignDateRangeKpiCommand = exports.deserializeAws_restJson1GetCampaignActivitiesCommand = exports.deserializeAws_restJson1GetCampaignCommand = exports.deserializeAws_restJson1GetBaiduChannelCommand = exports.deserializeAws_restJson1GetAppsCommand = exports.deserializeAws_restJson1GetApplicationSettingsCommand = exports.deserializeAws_restJson1GetApplicationDateRangeKpiCommand = exports.deserializeAws_restJson1GetAppCommand = exports.deserializeAws_restJson1GetApnsVoipSandboxChannelCommand = exports.deserializeAws_restJson1GetApnsVoipChannelCommand = exports.deserializeAws_restJson1GetApnsSandboxChannelCommand = exports.deserializeAws_restJson1GetApnsChannelCommand = exports.deserializeAws_restJson1GetAdmChannelCommand = exports.deserializeAws_restJson1DeleteVoiceTemplateCommand = exports.deserializeAws_restJson1DeleteVoiceChannelCommand = exports.deserializeAws_restJson1DeleteUserEndpointsCommand = exports.deserializeAws_restJson1DeleteSmsTemplateCommand = void 0;
exports.deserializeAws_restJson1VerifyOTPMessageCommand = exports.deserializeAws_restJson1UpdateVoiceTemplateCommand = exports.deserializeAws_restJson1UpdateVoiceChannelCommand = exports.deserializeAws_restJson1UpdateTemplateActiveVersionCommand = exports.deserializeAws_restJson1UpdateSmsTemplateCommand = exports.deserializeAws_restJson1UpdateSmsChannelCommand = exports.deserializeAws_restJson1UpdateSegmentCommand = exports.deserializeAws_restJson1UpdateRecommenderConfigurationCommand = exports.deserializeAws_restJson1UpdatePushTemplateCommand = exports.deserializeAws_restJson1UpdateJourneyStateCommand = exports.deserializeAws_restJson1UpdateJourneyCommand = exports.deserializeAws_restJson1UpdateInAppTemplateCommand = exports.deserializeAws_restJson1UpdateGcmChannelCommand = exports.deserializeAws_restJson1UpdateEndpointsBatchCommand = exports.deserializeAws_restJson1UpdateEndpointCommand = exports.deserializeAws_restJson1UpdateEmailTemplateCommand = exports.deserializeAws_restJson1UpdateEmailChannelCommand = exports.deserializeAws_restJson1UpdateCampaignCommand = exports.deserializeAws_restJson1UpdateBaiduChannelCommand = exports.deserializeAws_restJson1UpdateApplicationSettingsCommand = exports.deserializeAws_restJson1UpdateApnsVoipSandboxChannelCommand = exports.deserializeAws_restJson1UpdateApnsVoipChannelCommand = exports.deserializeAws_restJson1UpdateApnsSandboxChannelCommand = exports.deserializeAws_restJson1UpdateApnsChannelCommand = exports.deserializeAws_restJson1UpdateAdmChannelCommand = exports.deserializeAws_restJson1UntagResourceCommand = exports.deserializeAws_restJson1TagResourceCommand = exports.deserializeAws_restJson1SendUsersMessagesCommand = exports.deserializeAws_restJson1SendOTPMessageCommand = exports.deserializeAws_restJson1SendMessagesCommand = exports.deserializeAws_restJson1RemoveAttributesCommand = exports.deserializeAws_restJson1PutEventStreamCommand = exports.deserializeAws_restJson1PutEventsCommand = exports.deserializeAws_restJson1PhoneNumberValidateCommand = exports.deserializeAws_restJson1ListTemplateVersionsCommand = exports.deserializeAws_restJson1ListTemplatesCommand = exports.deserializeAws_restJson1ListTagsForResourceCommand = exports.deserializeAws_restJson1ListJourneysCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const models_0_1 = require("../models/models_0");
const PinpointServiceException_1 = require("../models/PinpointServiceException");
const serializeAws_restJson1CreateAppCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps";
    let body;
    if (input.CreateApplicationRequest !== undefined) {
        body = serializeAws_restJson1CreateApplicationRequest(input.CreateApplicationRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateAppCommand = serializeAws_restJson1CreateAppCommand;
const serializeAws_restJson1CreateCampaignCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/campaigns";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.WriteCampaignRequest !== undefined) {
        body = serializeAws_restJson1WriteCampaignRequest(input.WriteCampaignRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateCampaignCommand = serializeAws_restJson1CreateCampaignCommand;
const serializeAws_restJson1CreateEmailTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/email";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    let body;
    if (input.EmailTemplateRequest !== undefined) {
        body = serializeAws_restJson1EmailTemplateRequest(input.EmailTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateEmailTemplateCommand = serializeAws_restJson1CreateEmailTemplateCommand;
const serializeAws_restJson1CreateExportJobCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/jobs/export";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.ExportJobRequest !== undefined) {
        body = serializeAws_restJson1ExportJobRequest(input.ExportJobRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateExportJobCommand = serializeAws_restJson1CreateExportJobCommand;
const serializeAws_restJson1CreateImportJobCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/jobs/import";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.ImportJobRequest !== undefined) {
        body = serializeAws_restJson1ImportJobRequest(input.ImportJobRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateImportJobCommand = serializeAws_restJson1CreateImportJobCommand;
const serializeAws_restJson1CreateInAppTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/inapp";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    let body;
    if (input.InAppTemplateRequest !== undefined) {
        body = serializeAws_restJson1InAppTemplateRequest(input.InAppTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateInAppTemplateCommand = serializeAws_restJson1CreateInAppTemplateCommand;
const serializeAws_restJson1CreateJourneyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/journeys";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.WriteJourneyRequest !== undefined) {
        body = serializeAws_restJson1WriteJourneyRequest(input.WriteJourneyRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateJourneyCommand = serializeAws_restJson1CreateJourneyCommand;
const serializeAws_restJson1CreatePushTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/push";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    let body;
    if (input.PushNotificationTemplateRequest !== undefined) {
        body = serializeAws_restJson1PushNotificationTemplateRequest(input.PushNotificationTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreatePushTemplateCommand = serializeAws_restJson1CreatePushTemplateCommand;
const serializeAws_restJson1CreateRecommenderConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/recommenders";
    let body;
    if (input.CreateRecommenderConfiguration !== undefined) {
        body = serializeAws_restJson1CreateRecommenderConfigurationShape(input.CreateRecommenderConfiguration, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateRecommenderConfigurationCommand = serializeAws_restJson1CreateRecommenderConfigurationCommand;
const serializeAws_restJson1CreateSegmentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/segments";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.WriteSegmentRequest !== undefined) {
        body = serializeAws_restJson1WriteSegmentRequest(input.WriteSegmentRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateSegmentCommand = serializeAws_restJson1CreateSegmentCommand;
const serializeAws_restJson1CreateSmsTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/sms";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    let body;
    if (input.SMSTemplateRequest !== undefined) {
        body = serializeAws_restJson1SMSTemplateRequest(input.SMSTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateSmsTemplateCommand = serializeAws_restJson1CreateSmsTemplateCommand;
const serializeAws_restJson1CreateVoiceTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/voice";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    let body;
    if (input.VoiceTemplateRequest !== undefined) {
        body = serializeAws_restJson1VoiceTemplateRequest(input.VoiceTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateVoiceTemplateCommand = serializeAws_restJson1CreateVoiceTemplateCommand;
const serializeAws_restJson1DeleteAdmChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/adm";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteAdmChannelCommand = serializeAws_restJson1DeleteAdmChannelCommand;
const serializeAws_restJson1DeleteApnsChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/apns";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteApnsChannelCommand = serializeAws_restJson1DeleteApnsChannelCommand;
const serializeAws_restJson1DeleteApnsSandboxChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/channels/apns_sandbox";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteApnsSandboxChannelCommand = serializeAws_restJson1DeleteApnsSandboxChannelCommand;
const serializeAws_restJson1DeleteApnsVoipChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/channels/apns_voip";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteApnsVoipChannelCommand = serializeAws_restJson1DeleteApnsVoipChannelCommand;
const serializeAws_restJson1DeleteApnsVoipSandboxChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/channels/apns_voip_sandbox";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteApnsVoipSandboxChannelCommand = serializeAws_restJson1DeleteApnsVoipSandboxChannelCommand;
const serializeAws_restJson1DeleteAppCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteAppCommand = serializeAws_restJson1DeleteAppCommand;
const serializeAws_restJson1DeleteBaiduChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/baidu";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteBaiduChannelCommand = serializeAws_restJson1DeleteBaiduChannelCommand;
const serializeAws_restJson1DeleteCampaignCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/campaigns/{CampaignId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CampaignId", () => input.CampaignId, "{CampaignId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteCampaignCommand = serializeAws_restJson1DeleteCampaignCommand;
const serializeAws_restJson1DeleteEmailChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/email";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteEmailChannelCommand = serializeAws_restJson1DeleteEmailChannelCommand;
const serializeAws_restJson1DeleteEmailTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/email";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        version: [, input.Version],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1DeleteEmailTemplateCommand = serializeAws_restJson1DeleteEmailTemplateCommand;
const serializeAws_restJson1DeleteEndpointCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/endpoints/{EndpointId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EndpointId", () => input.EndpointId, "{EndpointId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteEndpointCommand = serializeAws_restJson1DeleteEndpointCommand;
const serializeAws_restJson1DeleteEventStreamCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/eventstream";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteEventStreamCommand = serializeAws_restJson1DeleteEventStreamCommand;
const serializeAws_restJson1DeleteGcmChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/gcm";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteGcmChannelCommand = serializeAws_restJson1DeleteGcmChannelCommand;
const serializeAws_restJson1DeleteInAppTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/inapp";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        version: [, input.Version],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1DeleteInAppTemplateCommand = serializeAws_restJson1DeleteInAppTemplateCommand;
const serializeAws_restJson1DeleteJourneyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/journeys/{JourneyId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "JourneyId", () => input.JourneyId, "{JourneyId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteJourneyCommand = serializeAws_restJson1DeleteJourneyCommand;
const serializeAws_restJson1DeletePushTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/push";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        version: [, input.Version],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1DeletePushTemplateCommand = serializeAws_restJson1DeletePushTemplateCommand;
const serializeAws_restJson1DeleteRecommenderConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/recommenders/{RecommenderId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RecommenderId", () => input.RecommenderId, "{RecommenderId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteRecommenderConfigurationCommand = serializeAws_restJson1DeleteRecommenderConfigurationCommand;
const serializeAws_restJson1DeleteSegmentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/segments/{SegmentId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "SegmentId", () => input.SegmentId, "{SegmentId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteSegmentCommand = serializeAws_restJson1DeleteSegmentCommand;
const serializeAws_restJson1DeleteSmsChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/sms";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteSmsChannelCommand = serializeAws_restJson1DeleteSmsChannelCommand;
const serializeAws_restJson1DeleteSmsTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/sms";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        version: [, input.Version],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1DeleteSmsTemplateCommand = serializeAws_restJson1DeleteSmsTemplateCommand;
const serializeAws_restJson1DeleteUserEndpointsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/users/{UserId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UserId", () => input.UserId, "{UserId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteUserEndpointsCommand = serializeAws_restJson1DeleteUserEndpointsCommand;
const serializeAws_restJson1DeleteVoiceChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/voice";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteVoiceChannelCommand = serializeAws_restJson1DeleteVoiceChannelCommand;
const serializeAws_restJson1DeleteVoiceTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/voice";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        version: [, input.Version],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1DeleteVoiceTemplateCommand = serializeAws_restJson1DeleteVoiceTemplateCommand;
const serializeAws_restJson1GetAdmChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/adm";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetAdmChannelCommand = serializeAws_restJson1GetAdmChannelCommand;
const serializeAws_restJson1GetApnsChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/apns";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetApnsChannelCommand = serializeAws_restJson1GetApnsChannelCommand;
const serializeAws_restJson1GetApnsSandboxChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/channels/apns_sandbox";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetApnsSandboxChannelCommand = serializeAws_restJson1GetApnsSandboxChannelCommand;
const serializeAws_restJson1GetApnsVoipChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/channels/apns_voip";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetApnsVoipChannelCommand = serializeAws_restJson1GetApnsVoipChannelCommand;
const serializeAws_restJson1GetApnsVoipSandboxChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/channels/apns_voip_sandbox";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetApnsVoipSandboxChannelCommand = serializeAws_restJson1GetApnsVoipSandboxChannelCommand;
const serializeAws_restJson1GetAppCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetAppCommand = serializeAws_restJson1GetAppCommand;
const serializeAws_restJson1GetApplicationDateRangeKpiCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/kpis/daterange/{KpiName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "KpiName", () => input.KpiName, "{KpiName}", false);
    const query = map({
        "end-time": [() => input.EndTime !== void 0, () => (input.EndTime.toISOString().split(".")[0] + "Z").toString()],
        "next-token": [, input.NextToken],
        "page-size": [, input.PageSize],
        "start-time": [
            () => input.StartTime !== void 0,
            () => (input.StartTime.toISOString().split(".")[0] + "Z").toString(),
        ],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetApplicationDateRangeKpiCommand = serializeAws_restJson1GetApplicationDateRangeKpiCommand;
const serializeAws_restJson1GetApplicationSettingsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/settings";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetApplicationSettingsCommand = serializeAws_restJson1GetApplicationSettingsCommand;
const serializeAws_restJson1GetAppsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps";
    const query = map({
        "page-size": [, input.PageSize],
        token: [, input.Token],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetAppsCommand = serializeAws_restJson1GetAppsCommand;
const serializeAws_restJson1GetBaiduChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/baidu";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetBaiduChannelCommand = serializeAws_restJson1GetBaiduChannelCommand;
const serializeAws_restJson1GetCampaignCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/campaigns/{CampaignId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CampaignId", () => input.CampaignId, "{CampaignId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetCampaignCommand = serializeAws_restJson1GetCampaignCommand;
const serializeAws_restJson1GetCampaignActivitiesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/campaigns/{CampaignId}/activities";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CampaignId", () => input.CampaignId, "{CampaignId}", false);
    const query = map({
        "page-size": [, input.PageSize],
        token: [, input.Token],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetCampaignActivitiesCommand = serializeAws_restJson1GetCampaignActivitiesCommand;
const serializeAws_restJson1GetCampaignDateRangeKpiCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/campaigns/{CampaignId}/kpis/daterange/{KpiName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CampaignId", () => input.CampaignId, "{CampaignId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "KpiName", () => input.KpiName, "{KpiName}", false);
    const query = map({
        "end-time": [() => input.EndTime !== void 0, () => (input.EndTime.toISOString().split(".")[0] + "Z").toString()],
        "next-token": [, input.NextToken],
        "page-size": [, input.PageSize],
        "start-time": [
            () => input.StartTime !== void 0,
            () => (input.StartTime.toISOString().split(".")[0] + "Z").toString(),
        ],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetCampaignDateRangeKpiCommand = serializeAws_restJson1GetCampaignDateRangeKpiCommand;
const serializeAws_restJson1GetCampaignsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/campaigns";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    const query = map({
        "page-size": [, input.PageSize],
        token: [, input.Token],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetCampaignsCommand = serializeAws_restJson1GetCampaignsCommand;
const serializeAws_restJson1GetCampaignVersionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/campaigns/{CampaignId}/versions/{Version}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CampaignId", () => input.CampaignId, "{CampaignId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Version", () => input.Version, "{Version}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetCampaignVersionCommand = serializeAws_restJson1GetCampaignVersionCommand;
const serializeAws_restJson1GetCampaignVersionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/campaigns/{CampaignId}/versions";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CampaignId", () => input.CampaignId, "{CampaignId}", false);
    const query = map({
        "page-size": [, input.PageSize],
        token: [, input.Token],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetCampaignVersionsCommand = serializeAws_restJson1GetCampaignVersionsCommand;
const serializeAws_restJson1GetChannelsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetChannelsCommand = serializeAws_restJson1GetChannelsCommand;
const serializeAws_restJson1GetEmailChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/email";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetEmailChannelCommand = serializeAws_restJson1GetEmailChannelCommand;
const serializeAws_restJson1GetEmailTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/email";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        version: [, input.Version],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetEmailTemplateCommand = serializeAws_restJson1GetEmailTemplateCommand;
const serializeAws_restJson1GetEndpointCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/endpoints/{EndpointId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EndpointId", () => input.EndpointId, "{EndpointId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetEndpointCommand = serializeAws_restJson1GetEndpointCommand;
const serializeAws_restJson1GetEventStreamCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/eventstream";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetEventStreamCommand = serializeAws_restJson1GetEventStreamCommand;
const serializeAws_restJson1GetExportJobCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/jobs/export/{JobId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "JobId", () => input.JobId, "{JobId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetExportJobCommand = serializeAws_restJson1GetExportJobCommand;
const serializeAws_restJson1GetExportJobsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/jobs/export";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    const query = map({
        "page-size": [, input.PageSize],
        token: [, input.Token],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetExportJobsCommand = serializeAws_restJson1GetExportJobsCommand;
const serializeAws_restJson1GetGcmChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/gcm";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetGcmChannelCommand = serializeAws_restJson1GetGcmChannelCommand;
const serializeAws_restJson1GetImportJobCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/jobs/import/{JobId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "JobId", () => input.JobId, "{JobId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetImportJobCommand = serializeAws_restJson1GetImportJobCommand;
const serializeAws_restJson1GetImportJobsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/jobs/import";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    const query = map({
        "page-size": [, input.PageSize],
        token: [, input.Token],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetImportJobsCommand = serializeAws_restJson1GetImportJobsCommand;
const serializeAws_restJson1GetInAppMessagesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/endpoints/{EndpointId}/inappmessages";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EndpointId", () => input.EndpointId, "{EndpointId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetInAppMessagesCommand = serializeAws_restJson1GetInAppMessagesCommand;
const serializeAws_restJson1GetInAppTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/inapp";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        version: [, input.Version],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetInAppTemplateCommand = serializeAws_restJson1GetInAppTemplateCommand;
const serializeAws_restJson1GetJourneyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/journeys/{JourneyId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "JourneyId", () => input.JourneyId, "{JourneyId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetJourneyCommand = serializeAws_restJson1GetJourneyCommand;
const serializeAws_restJson1GetJourneyDateRangeKpiCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/journeys/{JourneyId}/kpis/daterange/{KpiName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "JourneyId", () => input.JourneyId, "{JourneyId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "KpiName", () => input.KpiName, "{KpiName}", false);
    const query = map({
        "end-time": [() => input.EndTime !== void 0, () => (input.EndTime.toISOString().split(".")[0] + "Z").toString()],
        "next-token": [, input.NextToken],
        "page-size": [, input.PageSize],
        "start-time": [
            () => input.StartTime !== void 0,
            () => (input.StartTime.toISOString().split(".")[0] + "Z").toString(),
        ],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetJourneyDateRangeKpiCommand = serializeAws_restJson1GetJourneyDateRangeKpiCommand;
const serializeAws_restJson1GetJourneyExecutionActivityMetricsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/journeys/{JourneyId}/activities/{JourneyActivityId}/execution-metrics";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "JourneyActivityId", () => input.JourneyActivityId, "{JourneyActivityId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "JourneyId", () => input.JourneyId, "{JourneyId}", false);
    const query = map({
        "next-token": [, input.NextToken],
        "page-size": [, input.PageSize],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetJourneyExecutionActivityMetricsCommand = serializeAws_restJson1GetJourneyExecutionActivityMetricsCommand;
const serializeAws_restJson1GetJourneyExecutionMetricsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/journeys/{JourneyId}/execution-metrics";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "JourneyId", () => input.JourneyId, "{JourneyId}", false);
    const query = map({
        "next-token": [, input.NextToken],
        "page-size": [, input.PageSize],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetJourneyExecutionMetricsCommand = serializeAws_restJson1GetJourneyExecutionMetricsCommand;
const serializeAws_restJson1GetPushTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/push";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        version: [, input.Version],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetPushTemplateCommand = serializeAws_restJson1GetPushTemplateCommand;
const serializeAws_restJson1GetRecommenderConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/recommenders/{RecommenderId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RecommenderId", () => input.RecommenderId, "{RecommenderId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetRecommenderConfigurationCommand = serializeAws_restJson1GetRecommenderConfigurationCommand;
const serializeAws_restJson1GetRecommenderConfigurationsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/recommenders";
    const query = map({
        "page-size": [, input.PageSize],
        token: [, input.Token],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetRecommenderConfigurationsCommand = serializeAws_restJson1GetRecommenderConfigurationsCommand;
const serializeAws_restJson1GetSegmentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/segments/{SegmentId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "SegmentId", () => input.SegmentId, "{SegmentId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetSegmentCommand = serializeAws_restJson1GetSegmentCommand;
const serializeAws_restJson1GetSegmentExportJobsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/segments/{SegmentId}/jobs/export";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "SegmentId", () => input.SegmentId, "{SegmentId}", false);
    const query = map({
        "page-size": [, input.PageSize],
        token: [, input.Token],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetSegmentExportJobsCommand = serializeAws_restJson1GetSegmentExportJobsCommand;
const serializeAws_restJson1GetSegmentImportJobsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/segments/{SegmentId}/jobs/import";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "SegmentId", () => input.SegmentId, "{SegmentId}", false);
    const query = map({
        "page-size": [, input.PageSize],
        token: [, input.Token],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetSegmentImportJobsCommand = serializeAws_restJson1GetSegmentImportJobsCommand;
const serializeAws_restJson1GetSegmentsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/segments";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    const query = map({
        "page-size": [, input.PageSize],
        token: [, input.Token],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetSegmentsCommand = serializeAws_restJson1GetSegmentsCommand;
const serializeAws_restJson1GetSegmentVersionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/segments/{SegmentId}/versions/{Version}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "SegmentId", () => input.SegmentId, "{SegmentId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Version", () => input.Version, "{Version}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetSegmentVersionCommand = serializeAws_restJson1GetSegmentVersionCommand;
const serializeAws_restJson1GetSegmentVersionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/segments/{SegmentId}/versions";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "SegmentId", () => input.SegmentId, "{SegmentId}", false);
    const query = map({
        "page-size": [, input.PageSize],
        token: [, input.Token],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetSegmentVersionsCommand = serializeAws_restJson1GetSegmentVersionsCommand;
const serializeAws_restJson1GetSmsChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/sms";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetSmsChannelCommand = serializeAws_restJson1GetSmsChannelCommand;
const serializeAws_restJson1GetSmsTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/sms";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        version: [, input.Version],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetSmsTemplateCommand = serializeAws_restJson1GetSmsTemplateCommand;
const serializeAws_restJson1GetUserEndpointsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/users/{UserId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UserId", () => input.UserId, "{UserId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetUserEndpointsCommand = serializeAws_restJson1GetUserEndpointsCommand;
const serializeAws_restJson1GetVoiceChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/voice";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetVoiceChannelCommand = serializeAws_restJson1GetVoiceChannelCommand;
const serializeAws_restJson1GetVoiceTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/voice";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        version: [, input.Version],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetVoiceTemplateCommand = serializeAws_restJson1GetVoiceTemplateCommand;
const serializeAws_restJson1ListJourneysCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/journeys";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    const query = map({
        "page-size": [, input.PageSize],
        token: [, input.Token],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListJourneysCommand = serializeAws_restJson1ListJourneysCommand;
const serializeAws_restJson1ListTagsForResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/tags/{ResourceArn}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1ListTagsForResourceCommand = serializeAws_restJson1ListTagsForResourceCommand;
const serializeAws_restJson1ListTemplatesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates";
    const query = map({
        "next-token": [, input.NextToken],
        "page-size": [, input.PageSize],
        prefix: [, input.Prefix],
        "template-type": [, input.TemplateType],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListTemplatesCommand = serializeAws_restJson1ListTemplatesCommand;
const serializeAws_restJson1ListTemplateVersionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/templates/{TemplateName}/{TemplateType}/versions";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateType", () => input.TemplateType, "{TemplateType}", false);
    const query = map({
        "next-token": [, input.NextToken],
        "page-size": [, input.PageSize],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListTemplateVersionsCommand = serializeAws_restJson1ListTemplateVersionsCommand;
const serializeAws_restJson1PhoneNumberValidateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/phone/number/validate";
    let body;
    if (input.NumberValidateRequest !== undefined) {
        body = serializeAws_restJson1NumberValidateRequest(input.NumberValidateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PhoneNumberValidateCommand = serializeAws_restJson1PhoneNumberValidateCommand;
const serializeAws_restJson1PutEventsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/events";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.EventsRequest !== undefined) {
        body = serializeAws_restJson1EventsRequest(input.EventsRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutEventsCommand = serializeAws_restJson1PutEventsCommand;
const serializeAws_restJson1PutEventStreamCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/eventstream";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.WriteEventStream !== undefined) {
        body = serializeAws_restJson1WriteEventStream(input.WriteEventStream, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutEventStreamCommand = serializeAws_restJson1PutEventStreamCommand;
const serializeAws_restJson1RemoveAttributesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/attributes/{AttributeType}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AttributeType", () => input.AttributeType, "{AttributeType}", false);
    let body;
    if (input.UpdateAttributesRequest !== undefined) {
        body = serializeAws_restJson1UpdateAttributesRequest(input.UpdateAttributesRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1RemoveAttributesCommand = serializeAws_restJson1RemoveAttributesCommand;
const serializeAws_restJson1SendMessagesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/messages";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.MessageRequest !== undefined) {
        body = serializeAws_restJson1MessageRequest(input.MessageRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1SendMessagesCommand = serializeAws_restJson1SendMessagesCommand;
const serializeAws_restJson1SendOTPMessageCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/otp";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.SendOTPMessageRequestParameters !== undefined) {
        body = serializeAws_restJson1SendOTPMessageRequestParameters(input.SendOTPMessageRequestParameters, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1SendOTPMessageCommand = serializeAws_restJson1SendOTPMessageCommand;
const serializeAws_restJson1SendUsersMessagesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/users-messages";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.SendUsersMessageRequest !== undefined) {
        body = serializeAws_restJson1SendUsersMessageRequest(input.SendUsersMessageRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1SendUsersMessagesCommand = serializeAws_restJson1SendUsersMessagesCommand;
const serializeAws_restJson1TagResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/tags/{ResourceArn}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    if (input.TagsModel !== undefined) {
        body = serializeAws_restJson1TagsModel(input.TagsModel, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1TagResourceCommand = serializeAws_restJson1TagResourceCommand;
const serializeAws_restJson1UntagResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/tags/{ResourceArn}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        tagKeys: [() => input.TagKeys !== void 0, () => (input.TagKeys || []).map((_entry) => _entry)],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1UntagResourceCommand = serializeAws_restJson1UntagResourceCommand;
const serializeAws_restJson1UpdateAdmChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/adm";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.ADMChannelRequest !== undefined) {
        body = serializeAws_restJson1ADMChannelRequest(input.ADMChannelRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateAdmChannelCommand = serializeAws_restJson1UpdateAdmChannelCommand;
const serializeAws_restJson1UpdateApnsChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/apns";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.APNSChannelRequest !== undefined) {
        body = serializeAws_restJson1APNSChannelRequest(input.APNSChannelRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateApnsChannelCommand = serializeAws_restJson1UpdateApnsChannelCommand;
const serializeAws_restJson1UpdateApnsSandboxChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/channels/apns_sandbox";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.APNSSandboxChannelRequest !== undefined) {
        body = serializeAws_restJson1APNSSandboxChannelRequest(input.APNSSandboxChannelRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateApnsSandboxChannelCommand = serializeAws_restJson1UpdateApnsSandboxChannelCommand;
const serializeAws_restJson1UpdateApnsVoipChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/channels/apns_voip";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.APNSVoipChannelRequest !== undefined) {
        body = serializeAws_restJson1APNSVoipChannelRequest(input.APNSVoipChannelRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateApnsVoipChannelCommand = serializeAws_restJson1UpdateApnsVoipChannelCommand;
const serializeAws_restJson1UpdateApnsVoipSandboxChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/channels/apns_voip_sandbox";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.APNSVoipSandboxChannelRequest !== undefined) {
        body = serializeAws_restJson1APNSVoipSandboxChannelRequest(input.APNSVoipSandboxChannelRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateApnsVoipSandboxChannelCommand = serializeAws_restJson1UpdateApnsVoipSandboxChannelCommand;
const serializeAws_restJson1UpdateApplicationSettingsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/settings";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.WriteApplicationSettingsRequest !== undefined) {
        body = serializeAws_restJson1WriteApplicationSettingsRequest(input.WriteApplicationSettingsRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateApplicationSettingsCommand = serializeAws_restJson1UpdateApplicationSettingsCommand;
const serializeAws_restJson1UpdateBaiduChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/baidu";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.BaiduChannelRequest !== undefined) {
        body = serializeAws_restJson1BaiduChannelRequest(input.BaiduChannelRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateBaiduChannelCommand = serializeAws_restJson1UpdateBaiduChannelCommand;
const serializeAws_restJson1UpdateCampaignCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/campaigns/{CampaignId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CampaignId", () => input.CampaignId, "{CampaignId}", false);
    let body;
    if (input.WriteCampaignRequest !== undefined) {
        body = serializeAws_restJson1WriteCampaignRequest(input.WriteCampaignRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateCampaignCommand = serializeAws_restJson1UpdateCampaignCommand;
const serializeAws_restJson1UpdateEmailChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/email";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.EmailChannelRequest !== undefined) {
        body = serializeAws_restJson1EmailChannelRequest(input.EmailChannelRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateEmailChannelCommand = serializeAws_restJson1UpdateEmailChannelCommand;
const serializeAws_restJson1UpdateEmailTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/email";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        "create-new-version": [() => input.CreateNewVersion !== void 0, () => input.CreateNewVersion.toString()],
        version: [, input.Version],
    });
    let body;
    if (input.EmailTemplateRequest !== undefined) {
        body = serializeAws_restJson1EmailTemplateRequest(input.EmailTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1UpdateEmailTemplateCommand = serializeAws_restJson1UpdateEmailTemplateCommand;
const serializeAws_restJson1UpdateEndpointCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/endpoints/{EndpointId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EndpointId", () => input.EndpointId, "{EndpointId}", false);
    let body;
    if (input.EndpointRequest !== undefined) {
        body = serializeAws_restJson1EndpointRequest(input.EndpointRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateEndpointCommand = serializeAws_restJson1UpdateEndpointCommand;
const serializeAws_restJson1UpdateEndpointsBatchCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/endpoints";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.EndpointBatchRequest !== undefined) {
        body = serializeAws_restJson1EndpointBatchRequest(input.EndpointBatchRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateEndpointsBatchCommand = serializeAws_restJson1UpdateEndpointsBatchCommand;
const serializeAws_restJson1UpdateGcmChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/gcm";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.GCMChannelRequest !== undefined) {
        body = serializeAws_restJson1GCMChannelRequest(input.GCMChannelRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateGcmChannelCommand = serializeAws_restJson1UpdateGcmChannelCommand;
const serializeAws_restJson1UpdateInAppTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/inapp";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        "create-new-version": [() => input.CreateNewVersion !== void 0, () => input.CreateNewVersion.toString()],
        version: [, input.Version],
    });
    let body;
    if (input.InAppTemplateRequest !== undefined) {
        body = serializeAws_restJson1InAppTemplateRequest(input.InAppTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1UpdateInAppTemplateCommand = serializeAws_restJson1UpdateInAppTemplateCommand;
const serializeAws_restJson1UpdateJourneyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/journeys/{JourneyId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "JourneyId", () => input.JourneyId, "{JourneyId}", false);
    let body;
    if (input.WriteJourneyRequest !== undefined) {
        body = serializeAws_restJson1WriteJourneyRequest(input.WriteJourneyRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateJourneyCommand = serializeAws_restJson1UpdateJourneyCommand;
const serializeAws_restJson1UpdateJourneyStateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/journeys/{JourneyId}/state";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "JourneyId", () => input.JourneyId, "{JourneyId}", false);
    let body;
    if (input.JourneyStateRequest !== undefined) {
        body = serializeAws_restJson1JourneyStateRequest(input.JourneyStateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateJourneyStateCommand = serializeAws_restJson1UpdateJourneyStateCommand;
const serializeAws_restJson1UpdatePushTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/push";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        "create-new-version": [() => input.CreateNewVersion !== void 0, () => input.CreateNewVersion.toString()],
        version: [, input.Version],
    });
    let body;
    if (input.PushNotificationTemplateRequest !== undefined) {
        body = serializeAws_restJson1PushNotificationTemplateRequest(input.PushNotificationTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1UpdatePushTemplateCommand = serializeAws_restJson1UpdatePushTemplateCommand;
const serializeAws_restJson1UpdateRecommenderConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/recommenders/{RecommenderId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RecommenderId", () => input.RecommenderId, "{RecommenderId}", false);
    let body;
    if (input.UpdateRecommenderConfiguration !== undefined) {
        body = serializeAws_restJson1UpdateRecommenderConfigurationShape(input.UpdateRecommenderConfiguration, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateRecommenderConfigurationCommand = serializeAws_restJson1UpdateRecommenderConfigurationCommand;
const serializeAws_restJson1UpdateSegmentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/apps/{ApplicationId}/segments/{SegmentId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "SegmentId", () => input.SegmentId, "{SegmentId}", false);
    let body;
    if (input.WriteSegmentRequest !== undefined) {
        body = serializeAws_restJson1WriteSegmentRequest(input.WriteSegmentRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateSegmentCommand = serializeAws_restJson1UpdateSegmentCommand;
const serializeAws_restJson1UpdateSmsChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/sms";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.SMSChannelRequest !== undefined) {
        body = serializeAws_restJson1SMSChannelRequest(input.SMSChannelRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateSmsChannelCommand = serializeAws_restJson1UpdateSmsChannelCommand;
const serializeAws_restJson1UpdateSmsTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/sms";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        "create-new-version": [() => input.CreateNewVersion !== void 0, () => input.CreateNewVersion.toString()],
        version: [, input.Version],
    });
    let body;
    if (input.SMSTemplateRequest !== undefined) {
        body = serializeAws_restJson1SMSTemplateRequest(input.SMSTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1UpdateSmsTemplateCommand = serializeAws_restJson1UpdateSmsTemplateCommand;
const serializeAws_restJson1UpdateTemplateActiveVersionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/templates/{TemplateName}/{TemplateType}/active-version";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateType", () => input.TemplateType, "{TemplateType}", false);
    let body;
    if (input.TemplateActiveVersionRequest !== undefined) {
        body = serializeAws_restJson1TemplateActiveVersionRequest(input.TemplateActiveVersionRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateTemplateActiveVersionCommand = serializeAws_restJson1UpdateTemplateActiveVersionCommand;
const serializeAws_restJson1UpdateVoiceChannelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/channels/voice";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.VoiceChannelRequest !== undefined) {
        body = serializeAws_restJson1VoiceChannelRequest(input.VoiceChannelRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateVoiceChannelCommand = serializeAws_restJson1UpdateVoiceChannelCommand;
const serializeAws_restJson1UpdateVoiceTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/templates/{TemplateName}/voice";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        "create-new-version": [() => input.CreateNewVersion !== void 0, () => input.CreateNewVersion.toString()],
        version: [, input.Version],
    });
    let body;
    if (input.VoiceTemplateRequest !== undefined) {
        body = serializeAws_restJson1VoiceTemplateRequest(input.VoiceTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1UpdateVoiceTemplateCommand = serializeAws_restJson1UpdateVoiceTemplateCommand;
const serializeAws_restJson1VerifyOTPMessageCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/v1/apps/{ApplicationId}/verify-otp";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.VerifyOTPMessageRequestParameters !== undefined) {
        body = serializeAws_restJson1VerifyOTPMessageRequestParameters(input.VerifyOTPMessageRequestParameters, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1VerifyOTPMessageCommand = serializeAws_restJson1VerifyOTPMessageCommand;
const deserializeAws_restJson1CreateAppCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateAppCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ApplicationResponse = deserializeAws_restJson1ApplicationResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1CreateAppCommand = deserializeAws_restJson1CreateAppCommand;
const deserializeAws_restJson1CreateAppCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateCampaignCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateCampaignCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.CampaignResponse = deserializeAws_restJson1CampaignResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1CreateCampaignCommand = deserializeAws_restJson1CreateCampaignCommand;
const deserializeAws_restJson1CreateCampaignCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateEmailTemplateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateEmailTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.CreateTemplateMessageBody = deserializeAws_restJson1CreateTemplateMessageBody(data, context);
    return contents;
};
exports.deserializeAws_restJson1CreateEmailTemplateCommand = deserializeAws_restJson1CreateEmailTemplateCommand;
const deserializeAws_restJson1CreateEmailTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateExportJobCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateExportJobCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ExportJobResponse = deserializeAws_restJson1ExportJobResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1CreateExportJobCommand = deserializeAws_restJson1CreateExportJobCommand;
const deserializeAws_restJson1CreateExportJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateImportJobCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateImportJobCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ImportJobResponse = deserializeAws_restJson1ImportJobResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1CreateImportJobCommand = deserializeAws_restJson1CreateImportJobCommand;
const deserializeAws_restJson1CreateImportJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateInAppTemplateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateInAppTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.TemplateCreateMessageBody = deserializeAws_restJson1TemplateCreateMessageBody(data, context);
    return contents;
};
exports.deserializeAws_restJson1CreateInAppTemplateCommand = deserializeAws_restJson1CreateInAppTemplateCommand;
const deserializeAws_restJson1CreateInAppTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateJourneyCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateJourneyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.JourneyResponse = deserializeAws_restJson1JourneyResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1CreateJourneyCommand = deserializeAws_restJson1CreateJourneyCommand;
const deserializeAws_restJson1CreateJourneyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreatePushTemplateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreatePushTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.CreateTemplateMessageBody = deserializeAws_restJson1CreateTemplateMessageBody(data, context);
    return contents;
};
exports.deserializeAws_restJson1CreatePushTemplateCommand = deserializeAws_restJson1CreatePushTemplateCommand;
const deserializeAws_restJson1CreatePushTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateRecommenderConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateRecommenderConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.RecommenderConfigurationResponse = deserializeAws_restJson1RecommenderConfigurationResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1CreateRecommenderConfigurationCommand = deserializeAws_restJson1CreateRecommenderConfigurationCommand;
const deserializeAws_restJson1CreateRecommenderConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateSegmentCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateSegmentCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.SegmentResponse = deserializeAws_restJson1SegmentResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1CreateSegmentCommand = deserializeAws_restJson1CreateSegmentCommand;
const deserializeAws_restJson1CreateSegmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateSmsTemplateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateSmsTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.CreateTemplateMessageBody = deserializeAws_restJson1CreateTemplateMessageBody(data, context);
    return contents;
};
exports.deserializeAws_restJson1CreateSmsTemplateCommand = deserializeAws_restJson1CreateSmsTemplateCommand;
const deserializeAws_restJson1CreateSmsTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateVoiceTemplateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateVoiceTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.CreateTemplateMessageBody = deserializeAws_restJson1CreateTemplateMessageBody(data, context);
    return contents;
};
exports.deserializeAws_restJson1CreateVoiceTemplateCommand = deserializeAws_restJson1CreateVoiceTemplateCommand;
const deserializeAws_restJson1CreateVoiceTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteAdmChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteAdmChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ADMChannelResponse = deserializeAws_restJson1ADMChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteAdmChannelCommand = deserializeAws_restJson1DeleteAdmChannelCommand;
const deserializeAws_restJson1DeleteAdmChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteApnsChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteApnsChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.APNSChannelResponse = deserializeAws_restJson1APNSChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteApnsChannelCommand = deserializeAws_restJson1DeleteApnsChannelCommand;
const deserializeAws_restJson1DeleteApnsChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteApnsSandboxChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteApnsSandboxChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.APNSSandboxChannelResponse = deserializeAws_restJson1APNSSandboxChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteApnsSandboxChannelCommand = deserializeAws_restJson1DeleteApnsSandboxChannelCommand;
const deserializeAws_restJson1DeleteApnsSandboxChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteApnsVoipChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteApnsVoipChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.APNSVoipChannelResponse = deserializeAws_restJson1APNSVoipChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteApnsVoipChannelCommand = deserializeAws_restJson1DeleteApnsVoipChannelCommand;
const deserializeAws_restJson1DeleteApnsVoipChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteApnsVoipSandboxChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteApnsVoipSandboxChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.APNSVoipSandboxChannelResponse = deserializeAws_restJson1APNSVoipSandboxChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteApnsVoipSandboxChannelCommand = deserializeAws_restJson1DeleteApnsVoipSandboxChannelCommand;
const deserializeAws_restJson1DeleteApnsVoipSandboxChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteAppCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteAppCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ApplicationResponse = deserializeAws_restJson1ApplicationResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteAppCommand = deserializeAws_restJson1DeleteAppCommand;
const deserializeAws_restJson1DeleteAppCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteBaiduChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteBaiduChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.BaiduChannelResponse = deserializeAws_restJson1BaiduChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteBaiduChannelCommand = deserializeAws_restJson1DeleteBaiduChannelCommand;
const deserializeAws_restJson1DeleteBaiduChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteCampaignCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteCampaignCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.CampaignResponse = deserializeAws_restJson1CampaignResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteCampaignCommand = deserializeAws_restJson1DeleteCampaignCommand;
const deserializeAws_restJson1DeleteCampaignCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteEmailChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteEmailChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.EmailChannelResponse = deserializeAws_restJson1EmailChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteEmailChannelCommand = deserializeAws_restJson1DeleteEmailChannelCommand;
const deserializeAws_restJson1DeleteEmailChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteEmailTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteEmailTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteEmailTemplateCommand = deserializeAws_restJson1DeleteEmailTemplateCommand;
const deserializeAws_restJson1DeleteEmailTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteEndpointCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteEndpointCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.EndpointResponse = deserializeAws_restJson1EndpointResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteEndpointCommand = deserializeAws_restJson1DeleteEndpointCommand;
const deserializeAws_restJson1DeleteEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteEventStreamCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteEventStreamCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.EventStream = deserializeAws_restJson1EventStream(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteEventStreamCommand = deserializeAws_restJson1DeleteEventStreamCommand;
const deserializeAws_restJson1DeleteEventStreamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteGcmChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteGcmChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.GCMChannelResponse = deserializeAws_restJson1GCMChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteGcmChannelCommand = deserializeAws_restJson1DeleteGcmChannelCommand;
const deserializeAws_restJson1DeleteGcmChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteInAppTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteInAppTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteInAppTemplateCommand = deserializeAws_restJson1DeleteInAppTemplateCommand;
const deserializeAws_restJson1DeleteInAppTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteJourneyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteJourneyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.JourneyResponse = deserializeAws_restJson1JourneyResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteJourneyCommand = deserializeAws_restJson1DeleteJourneyCommand;
const deserializeAws_restJson1DeleteJourneyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeletePushTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeletePushTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeletePushTemplateCommand = deserializeAws_restJson1DeletePushTemplateCommand;
const deserializeAws_restJson1DeletePushTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteRecommenderConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteRecommenderConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.RecommenderConfigurationResponse = deserializeAws_restJson1RecommenderConfigurationResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteRecommenderConfigurationCommand = deserializeAws_restJson1DeleteRecommenderConfigurationCommand;
const deserializeAws_restJson1DeleteRecommenderConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteSegmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteSegmentCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.SegmentResponse = deserializeAws_restJson1SegmentResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteSegmentCommand = deserializeAws_restJson1DeleteSegmentCommand;
const deserializeAws_restJson1DeleteSegmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteSmsChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteSmsChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.SMSChannelResponse = deserializeAws_restJson1SMSChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteSmsChannelCommand = deserializeAws_restJson1DeleteSmsChannelCommand;
const deserializeAws_restJson1DeleteSmsChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteSmsTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteSmsTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteSmsTemplateCommand = deserializeAws_restJson1DeleteSmsTemplateCommand;
const deserializeAws_restJson1DeleteSmsTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteUserEndpointsCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteUserEndpointsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.EndpointsResponse = deserializeAws_restJson1EndpointsResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteUserEndpointsCommand = deserializeAws_restJson1DeleteUserEndpointsCommand;
const deserializeAws_restJson1DeleteUserEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteVoiceChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteVoiceChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.VoiceChannelResponse = deserializeAws_restJson1VoiceChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteVoiceChannelCommand = deserializeAws_restJson1DeleteVoiceChannelCommand;
const deserializeAws_restJson1DeleteVoiceChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteVoiceTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteVoiceTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteVoiceTemplateCommand = deserializeAws_restJson1DeleteVoiceTemplateCommand;
const deserializeAws_restJson1DeleteVoiceTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetAdmChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetAdmChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ADMChannelResponse = deserializeAws_restJson1ADMChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetAdmChannelCommand = deserializeAws_restJson1GetAdmChannelCommand;
const deserializeAws_restJson1GetAdmChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetApnsChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetApnsChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.APNSChannelResponse = deserializeAws_restJson1APNSChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetApnsChannelCommand = deserializeAws_restJson1GetApnsChannelCommand;
const deserializeAws_restJson1GetApnsChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetApnsSandboxChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetApnsSandboxChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.APNSSandboxChannelResponse = deserializeAws_restJson1APNSSandboxChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetApnsSandboxChannelCommand = deserializeAws_restJson1GetApnsSandboxChannelCommand;
const deserializeAws_restJson1GetApnsSandboxChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetApnsVoipChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetApnsVoipChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.APNSVoipChannelResponse = deserializeAws_restJson1APNSVoipChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetApnsVoipChannelCommand = deserializeAws_restJson1GetApnsVoipChannelCommand;
const deserializeAws_restJson1GetApnsVoipChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetApnsVoipSandboxChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetApnsVoipSandboxChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.APNSVoipSandboxChannelResponse = deserializeAws_restJson1APNSVoipSandboxChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetApnsVoipSandboxChannelCommand = deserializeAws_restJson1GetApnsVoipSandboxChannelCommand;
const deserializeAws_restJson1GetApnsVoipSandboxChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetAppCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetAppCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ApplicationResponse = deserializeAws_restJson1ApplicationResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetAppCommand = deserializeAws_restJson1GetAppCommand;
const deserializeAws_restJson1GetAppCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetApplicationDateRangeKpiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetApplicationDateRangeKpiCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ApplicationDateRangeKpiResponse = deserializeAws_restJson1ApplicationDateRangeKpiResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetApplicationDateRangeKpiCommand = deserializeAws_restJson1GetApplicationDateRangeKpiCommand;
const deserializeAws_restJson1GetApplicationDateRangeKpiCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetApplicationSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetApplicationSettingsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ApplicationSettingsResource = deserializeAws_restJson1ApplicationSettingsResource(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetApplicationSettingsCommand = deserializeAws_restJson1GetApplicationSettingsCommand;
const deserializeAws_restJson1GetApplicationSettingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetAppsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetAppsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ApplicationsResponse = deserializeAws_restJson1ApplicationsResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetAppsCommand = deserializeAws_restJson1GetAppsCommand;
const deserializeAws_restJson1GetAppsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetBaiduChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetBaiduChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.BaiduChannelResponse = deserializeAws_restJson1BaiduChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetBaiduChannelCommand = deserializeAws_restJson1GetBaiduChannelCommand;
const deserializeAws_restJson1GetBaiduChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetCampaignCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetCampaignCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.CampaignResponse = deserializeAws_restJson1CampaignResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetCampaignCommand = deserializeAws_restJson1GetCampaignCommand;
const deserializeAws_restJson1GetCampaignCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetCampaignActivitiesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetCampaignActivitiesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ActivitiesResponse = deserializeAws_restJson1ActivitiesResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetCampaignActivitiesCommand = deserializeAws_restJson1GetCampaignActivitiesCommand;
const deserializeAws_restJson1GetCampaignActivitiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetCampaignDateRangeKpiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetCampaignDateRangeKpiCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.CampaignDateRangeKpiResponse = deserializeAws_restJson1CampaignDateRangeKpiResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetCampaignDateRangeKpiCommand = deserializeAws_restJson1GetCampaignDateRangeKpiCommand;
const deserializeAws_restJson1GetCampaignDateRangeKpiCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetCampaignsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetCampaignsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.CampaignsResponse = deserializeAws_restJson1CampaignsResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetCampaignsCommand = deserializeAws_restJson1GetCampaignsCommand;
const deserializeAws_restJson1GetCampaignsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetCampaignVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetCampaignVersionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.CampaignResponse = deserializeAws_restJson1CampaignResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetCampaignVersionCommand = deserializeAws_restJson1GetCampaignVersionCommand;
const deserializeAws_restJson1GetCampaignVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetCampaignVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetCampaignVersionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.CampaignsResponse = deserializeAws_restJson1CampaignsResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetCampaignVersionsCommand = deserializeAws_restJson1GetCampaignVersionsCommand;
const deserializeAws_restJson1GetCampaignVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetChannelsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetChannelsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ChannelsResponse = deserializeAws_restJson1ChannelsResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetChannelsCommand = deserializeAws_restJson1GetChannelsCommand;
const deserializeAws_restJson1GetChannelsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetEmailChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetEmailChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.EmailChannelResponse = deserializeAws_restJson1EmailChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetEmailChannelCommand = deserializeAws_restJson1GetEmailChannelCommand;
const deserializeAws_restJson1GetEmailChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetEmailTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetEmailTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.EmailTemplateResponse = deserializeAws_restJson1EmailTemplateResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetEmailTemplateCommand = deserializeAws_restJson1GetEmailTemplateCommand;
const deserializeAws_restJson1GetEmailTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetEndpointCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetEndpointCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.EndpointResponse = deserializeAws_restJson1EndpointResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetEndpointCommand = deserializeAws_restJson1GetEndpointCommand;
const deserializeAws_restJson1GetEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetEventStreamCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetEventStreamCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.EventStream = deserializeAws_restJson1EventStream(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetEventStreamCommand = deserializeAws_restJson1GetEventStreamCommand;
const deserializeAws_restJson1GetEventStreamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetExportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetExportJobCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ExportJobResponse = deserializeAws_restJson1ExportJobResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetExportJobCommand = deserializeAws_restJson1GetExportJobCommand;
const deserializeAws_restJson1GetExportJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetExportJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetExportJobsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ExportJobsResponse = deserializeAws_restJson1ExportJobsResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetExportJobsCommand = deserializeAws_restJson1GetExportJobsCommand;
const deserializeAws_restJson1GetExportJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetGcmChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetGcmChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.GCMChannelResponse = deserializeAws_restJson1GCMChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetGcmChannelCommand = deserializeAws_restJson1GetGcmChannelCommand;
const deserializeAws_restJson1GetGcmChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetImportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetImportJobCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ImportJobResponse = deserializeAws_restJson1ImportJobResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetImportJobCommand = deserializeAws_restJson1GetImportJobCommand;
const deserializeAws_restJson1GetImportJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetImportJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetImportJobsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ImportJobsResponse = deserializeAws_restJson1ImportJobsResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetImportJobsCommand = deserializeAws_restJson1GetImportJobsCommand;
const deserializeAws_restJson1GetImportJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetInAppMessagesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetInAppMessagesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.InAppMessagesResponse = deserializeAws_restJson1InAppMessagesResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetInAppMessagesCommand = deserializeAws_restJson1GetInAppMessagesCommand;
const deserializeAws_restJson1GetInAppMessagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetInAppTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetInAppTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.InAppTemplateResponse = deserializeAws_restJson1InAppTemplateResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetInAppTemplateCommand = deserializeAws_restJson1GetInAppTemplateCommand;
const deserializeAws_restJson1GetInAppTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetJourneyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetJourneyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.JourneyResponse = deserializeAws_restJson1JourneyResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetJourneyCommand = deserializeAws_restJson1GetJourneyCommand;
const deserializeAws_restJson1GetJourneyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetJourneyDateRangeKpiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetJourneyDateRangeKpiCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.JourneyDateRangeKpiResponse = deserializeAws_restJson1JourneyDateRangeKpiResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetJourneyDateRangeKpiCommand = deserializeAws_restJson1GetJourneyDateRangeKpiCommand;
const deserializeAws_restJson1GetJourneyDateRangeKpiCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetJourneyExecutionActivityMetricsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetJourneyExecutionActivityMetricsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.JourneyExecutionActivityMetricsResponse = deserializeAws_restJson1JourneyExecutionActivityMetricsResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetJourneyExecutionActivityMetricsCommand = deserializeAws_restJson1GetJourneyExecutionActivityMetricsCommand;
const deserializeAws_restJson1GetJourneyExecutionActivityMetricsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetJourneyExecutionMetricsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetJourneyExecutionMetricsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.JourneyExecutionMetricsResponse = deserializeAws_restJson1JourneyExecutionMetricsResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetJourneyExecutionMetricsCommand = deserializeAws_restJson1GetJourneyExecutionMetricsCommand;
const deserializeAws_restJson1GetJourneyExecutionMetricsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetPushTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetPushTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.PushNotificationTemplateResponse = deserializeAws_restJson1PushNotificationTemplateResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetPushTemplateCommand = deserializeAws_restJson1GetPushTemplateCommand;
const deserializeAws_restJson1GetPushTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetRecommenderConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRecommenderConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.RecommenderConfigurationResponse = deserializeAws_restJson1RecommenderConfigurationResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetRecommenderConfigurationCommand = deserializeAws_restJson1GetRecommenderConfigurationCommand;
const deserializeAws_restJson1GetRecommenderConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetRecommenderConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRecommenderConfigurationsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ListRecommenderConfigurationsResponse = deserializeAws_restJson1ListRecommenderConfigurationsResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetRecommenderConfigurationsCommand = deserializeAws_restJson1GetRecommenderConfigurationsCommand;
const deserializeAws_restJson1GetRecommenderConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetSegmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetSegmentCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.SegmentResponse = deserializeAws_restJson1SegmentResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetSegmentCommand = deserializeAws_restJson1GetSegmentCommand;
const deserializeAws_restJson1GetSegmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetSegmentExportJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetSegmentExportJobsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ExportJobsResponse = deserializeAws_restJson1ExportJobsResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetSegmentExportJobsCommand = deserializeAws_restJson1GetSegmentExportJobsCommand;
const deserializeAws_restJson1GetSegmentExportJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetSegmentImportJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetSegmentImportJobsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ImportJobsResponse = deserializeAws_restJson1ImportJobsResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetSegmentImportJobsCommand = deserializeAws_restJson1GetSegmentImportJobsCommand;
const deserializeAws_restJson1GetSegmentImportJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetSegmentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetSegmentsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.SegmentsResponse = deserializeAws_restJson1SegmentsResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetSegmentsCommand = deserializeAws_restJson1GetSegmentsCommand;
const deserializeAws_restJson1GetSegmentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetSegmentVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetSegmentVersionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.SegmentResponse = deserializeAws_restJson1SegmentResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetSegmentVersionCommand = deserializeAws_restJson1GetSegmentVersionCommand;
const deserializeAws_restJson1GetSegmentVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetSegmentVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetSegmentVersionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.SegmentsResponse = deserializeAws_restJson1SegmentsResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetSegmentVersionsCommand = deserializeAws_restJson1GetSegmentVersionsCommand;
const deserializeAws_restJson1GetSegmentVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetSmsChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetSmsChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.SMSChannelResponse = deserializeAws_restJson1SMSChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetSmsChannelCommand = deserializeAws_restJson1GetSmsChannelCommand;
const deserializeAws_restJson1GetSmsChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetSmsTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetSmsTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.SMSTemplateResponse = deserializeAws_restJson1SMSTemplateResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetSmsTemplateCommand = deserializeAws_restJson1GetSmsTemplateCommand;
const deserializeAws_restJson1GetSmsTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetUserEndpointsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetUserEndpointsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.EndpointsResponse = deserializeAws_restJson1EndpointsResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetUserEndpointsCommand = deserializeAws_restJson1GetUserEndpointsCommand;
const deserializeAws_restJson1GetUserEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetVoiceChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetVoiceChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.VoiceChannelResponse = deserializeAws_restJson1VoiceChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetVoiceChannelCommand = deserializeAws_restJson1GetVoiceChannelCommand;
const deserializeAws_restJson1GetVoiceChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetVoiceTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetVoiceTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.VoiceTemplateResponse = deserializeAws_restJson1VoiceTemplateResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1GetVoiceTemplateCommand = deserializeAws_restJson1GetVoiceTemplateCommand;
const deserializeAws_restJson1GetVoiceTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListJourneysCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListJourneysCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.JourneysResponse = deserializeAws_restJson1JourneysResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1ListJourneysCommand = deserializeAws_restJson1ListJourneysCommand;
const deserializeAws_restJson1ListJourneysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListTagsForResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.TagsModel = deserializeAws_restJson1TagsModel(data, context);
    return contents;
};
exports.deserializeAws_restJson1ListTagsForResourceCommand = deserializeAws_restJson1ListTagsForResourceCommand;
const deserializeAws_restJson1ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: PinpointServiceException_1.PinpointServiceException,
        errorCode,
    });
};
const deserializeAws_restJson1ListTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListTemplatesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.TemplatesResponse = deserializeAws_restJson1TemplatesResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1ListTemplatesCommand = deserializeAws_restJson1ListTemplatesCommand;
const deserializeAws_restJson1ListTemplatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListTemplateVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListTemplateVersionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.TemplateVersionsResponse = deserializeAws_restJson1TemplateVersionsResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1ListTemplateVersionsCommand = deserializeAws_restJson1ListTemplateVersionsCommand;
const deserializeAws_restJson1ListTemplateVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PhoneNumberValidateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PhoneNumberValidateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.NumberValidateResponse = deserializeAws_restJson1NumberValidateResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1PhoneNumberValidateCommand = deserializeAws_restJson1PhoneNumberValidateCommand;
const deserializeAws_restJson1PhoneNumberValidateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutEventsCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutEventsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.EventsResponse = deserializeAws_restJson1EventsResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1PutEventsCommand = deserializeAws_restJson1PutEventsCommand;
const deserializeAws_restJson1PutEventsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutEventStreamCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutEventStreamCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.EventStream = deserializeAws_restJson1EventStream(data, context);
    return contents;
};
exports.deserializeAws_restJson1PutEventStreamCommand = deserializeAws_restJson1PutEventStreamCommand;
const deserializeAws_restJson1PutEventStreamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1RemoveAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1RemoveAttributesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.AttributesResource = deserializeAws_restJson1AttributesResource(data, context);
    return contents;
};
exports.deserializeAws_restJson1RemoveAttributesCommand = deserializeAws_restJson1RemoveAttributesCommand;
const deserializeAws_restJson1RemoveAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1SendMessagesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1SendMessagesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.MessageResponse = deserializeAws_restJson1MessageResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1SendMessagesCommand = deserializeAws_restJson1SendMessagesCommand;
const deserializeAws_restJson1SendMessagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1SendOTPMessageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1SendOTPMessageCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.MessageResponse = deserializeAws_restJson1MessageResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1SendOTPMessageCommand = deserializeAws_restJson1SendOTPMessageCommand;
const deserializeAws_restJson1SendOTPMessageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1SendUsersMessagesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1SendUsersMessagesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.SendUsersMessageResponse = deserializeAws_restJson1SendUsersMessageResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1SendUsersMessagesCommand = deserializeAws_restJson1SendUsersMessagesCommand;
const deserializeAws_restJson1SendUsersMessagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1TagResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1TagResourceCommand = deserializeAws_restJson1TagResourceCommand;
const deserializeAws_restJson1TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: PinpointServiceException_1.PinpointServiceException,
        errorCode,
    });
};
const deserializeAws_restJson1UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1UntagResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1UntagResourceCommand = deserializeAws_restJson1UntagResourceCommand;
const deserializeAws_restJson1UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: PinpointServiceException_1.PinpointServiceException,
        errorCode,
    });
};
const deserializeAws_restJson1UpdateAdmChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateAdmChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ADMChannelResponse = deserializeAws_restJson1ADMChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateAdmChannelCommand = deserializeAws_restJson1UpdateAdmChannelCommand;
const deserializeAws_restJson1UpdateAdmChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateApnsChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateApnsChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.APNSChannelResponse = deserializeAws_restJson1APNSChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateApnsChannelCommand = deserializeAws_restJson1UpdateApnsChannelCommand;
const deserializeAws_restJson1UpdateApnsChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateApnsSandboxChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateApnsSandboxChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.APNSSandboxChannelResponse = deserializeAws_restJson1APNSSandboxChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateApnsSandboxChannelCommand = deserializeAws_restJson1UpdateApnsSandboxChannelCommand;
const deserializeAws_restJson1UpdateApnsSandboxChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateApnsVoipChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateApnsVoipChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.APNSVoipChannelResponse = deserializeAws_restJson1APNSVoipChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateApnsVoipChannelCommand = deserializeAws_restJson1UpdateApnsVoipChannelCommand;
const deserializeAws_restJson1UpdateApnsVoipChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateApnsVoipSandboxChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateApnsVoipSandboxChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.APNSVoipSandboxChannelResponse = deserializeAws_restJson1APNSVoipSandboxChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateApnsVoipSandboxChannelCommand = deserializeAws_restJson1UpdateApnsVoipSandboxChannelCommand;
const deserializeAws_restJson1UpdateApnsVoipSandboxChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateApplicationSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateApplicationSettingsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.ApplicationSettingsResource = deserializeAws_restJson1ApplicationSettingsResource(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateApplicationSettingsCommand = deserializeAws_restJson1UpdateApplicationSettingsCommand;
const deserializeAws_restJson1UpdateApplicationSettingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateBaiduChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateBaiduChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.BaiduChannelResponse = deserializeAws_restJson1BaiduChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateBaiduChannelCommand = deserializeAws_restJson1UpdateBaiduChannelCommand;
const deserializeAws_restJson1UpdateBaiduChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateCampaignCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateCampaignCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.CampaignResponse = deserializeAws_restJson1CampaignResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateCampaignCommand = deserializeAws_restJson1UpdateCampaignCommand;
const deserializeAws_restJson1UpdateCampaignCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateEmailChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateEmailChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.EmailChannelResponse = deserializeAws_restJson1EmailChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateEmailChannelCommand = deserializeAws_restJson1UpdateEmailChannelCommand;
const deserializeAws_restJson1UpdateEmailChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateEmailTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateEmailTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateEmailTemplateCommand = deserializeAws_restJson1UpdateEmailTemplateCommand;
const deserializeAws_restJson1UpdateEmailTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateEndpointCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateEndpointCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateEndpointCommand = deserializeAws_restJson1UpdateEndpointCommand;
const deserializeAws_restJson1UpdateEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateEndpointsBatchCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateEndpointsBatchCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateEndpointsBatchCommand = deserializeAws_restJson1UpdateEndpointsBatchCommand;
const deserializeAws_restJson1UpdateEndpointsBatchCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateGcmChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateGcmChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.GCMChannelResponse = deserializeAws_restJson1GCMChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateGcmChannelCommand = deserializeAws_restJson1UpdateGcmChannelCommand;
const deserializeAws_restJson1UpdateGcmChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateInAppTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateInAppTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateInAppTemplateCommand = deserializeAws_restJson1UpdateInAppTemplateCommand;
const deserializeAws_restJson1UpdateInAppTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateJourneyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateJourneyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.JourneyResponse = deserializeAws_restJson1JourneyResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateJourneyCommand = deserializeAws_restJson1UpdateJourneyCommand;
const deserializeAws_restJson1UpdateJourneyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.pinpoint#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateJourneyStateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateJourneyStateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.JourneyResponse = deserializeAws_restJson1JourneyResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateJourneyStateCommand = deserializeAws_restJson1UpdateJourneyStateCommand;
const deserializeAws_restJson1UpdateJourneyStateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdatePushTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdatePushTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdatePushTemplateCommand = deserializeAws_restJson1UpdatePushTemplateCommand;
const deserializeAws_restJson1UpdatePushTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateRecommenderConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateRecommenderConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.RecommenderConfigurationResponse = deserializeAws_restJson1RecommenderConfigurationResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateRecommenderConfigurationCommand = deserializeAws_restJson1UpdateRecommenderConfigurationCommand;
const deserializeAws_restJson1UpdateRecommenderConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateSegmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateSegmentCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.SegmentResponse = deserializeAws_restJson1SegmentResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateSegmentCommand = deserializeAws_restJson1UpdateSegmentCommand;
const deserializeAws_restJson1UpdateSegmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateSmsChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateSmsChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.SMSChannelResponse = deserializeAws_restJson1SMSChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateSmsChannelCommand = deserializeAws_restJson1UpdateSmsChannelCommand;
const deserializeAws_restJson1UpdateSmsChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateSmsTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateSmsTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateSmsTemplateCommand = deserializeAws_restJson1UpdateSmsTemplateCommand;
const deserializeAws_restJson1UpdateSmsTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateTemplateActiveVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateTemplateActiveVersionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateTemplateActiveVersionCommand = deserializeAws_restJson1UpdateTemplateActiveVersionCommand;
const deserializeAws_restJson1UpdateTemplateActiveVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateVoiceChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateVoiceChannelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.VoiceChannelResponse = deserializeAws_restJson1VoiceChannelResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateVoiceChannelCommand = deserializeAws_restJson1UpdateVoiceChannelCommand;
const deserializeAws_restJson1UpdateVoiceChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateVoiceTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateVoiceTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
    return contents;
};
exports.deserializeAws_restJson1UpdateVoiceTemplateCommand = deserializeAws_restJson1UpdateVoiceTemplateCommand;
const deserializeAws_restJson1UpdateVoiceTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1VerifyOTPMessageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1VerifyOTPMessageCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.VerificationResponse = deserializeAws_restJson1VerificationResponse(data, context);
    return contents;
};
exports.deserializeAws_restJson1VerifyOTPMessageCommand = deserializeAws_restJson1VerifyOTPMessageCommand;
const deserializeAws_restJson1VerifyOTPMessageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: PinpointServiceException_1.PinpointServiceException,
                errorCode,
            });
    }
};
const map = smithy_client_1.map;
const deserializeAws_restJson1BadRequestExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.RequestID != null) {
        contents.RequestID = (0, smithy_client_1.expectString)(data.RequestID);
    }
    const exception = new models_0_1.BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ConflictExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.RequestID != null) {
        contents.RequestID = (0, smithy_client_1.expectString)(data.RequestID);
    }
    const exception = new models_0_1.ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ForbiddenExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.RequestID != null) {
        contents.RequestID = (0, smithy_client_1.expectString)(data.RequestID);
    }
    const exception = new models_0_1.ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1InternalServerErrorExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.RequestID != null) {
        contents.RequestID = (0, smithy_client_1.expectString)(data.RequestID);
    }
    const exception = new models_0_1.InternalServerErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1MethodNotAllowedExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.RequestID != null) {
        contents.RequestID = (0, smithy_client_1.expectString)(data.RequestID);
    }
    const exception = new models_0_1.MethodNotAllowedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1NotFoundExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.RequestID != null) {
        contents.RequestID = (0, smithy_client_1.expectString)(data.RequestID);
    }
    const exception = new models_0_1.NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1PayloadTooLargeExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.RequestID != null) {
        contents.RequestID = (0, smithy_client_1.expectString)(data.RequestID);
    }
    const exception = new models_0_1.PayloadTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.RequestID != null) {
        contents.RequestID = (0, smithy_client_1.expectString)(data.RequestID);
    }
    const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const serializeAws_restJson1Activity = (input, context) => {
    return {
        ...(input.CUSTOM != null && { CUSTOM: serializeAws_restJson1CustomMessageActivity(input.CUSTOM, context) }),
        ...(input.ConditionalSplit != null && {
            ConditionalSplit: serializeAws_restJson1ConditionalSplitActivity(input.ConditionalSplit, context),
        }),
        ...(input.ContactCenter != null && {
            ContactCenter: serializeAws_restJson1ContactCenterActivity(input.ContactCenter, context),
        }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.EMAIL != null && { EMAIL: serializeAws_restJson1EmailMessageActivity(input.EMAIL, context) }),
        ...(input.Holdout != null && { Holdout: serializeAws_restJson1HoldoutActivity(input.Holdout, context) }),
        ...(input.MultiCondition != null && {
            MultiCondition: serializeAws_restJson1MultiConditionalSplitActivity(input.MultiCondition, context),
        }),
        ...(input.PUSH != null && { PUSH: serializeAws_restJson1PushMessageActivity(input.PUSH, context) }),
        ...(input.RandomSplit != null && {
            RandomSplit: serializeAws_restJson1RandomSplitActivity(input.RandomSplit, context),
        }),
        ...(input.SMS != null && { SMS: serializeAws_restJson1SMSMessageActivity(input.SMS, context) }),
        ...(input.Wait != null && { Wait: serializeAws_restJson1WaitActivity(input.Wait, context) }),
    };
};
const serializeAws_restJson1AddressConfiguration = (input, context) => {
    return {
        ...(input.BodyOverride != null && { BodyOverride: input.BodyOverride }),
        ...(input.ChannelType != null && { ChannelType: input.ChannelType }),
        ...(input.Context != null && { Context: serializeAws_restJson1MapOf__string(input.Context, context) }),
        ...(input.RawContent != null && { RawContent: input.RawContent }),
        ...(input.Substitutions != null && {
            Substitutions: serializeAws_restJson1MapOfListOf__string(input.Substitutions, context),
        }),
        ...(input.TitleOverride != null && { TitleOverride: input.TitleOverride }),
    };
};
const serializeAws_restJson1ADMChannelRequest = (input, context) => {
    return {
        ...(input.ClientId != null && { ClientId: input.ClientId }),
        ...(input.ClientSecret != null && { ClientSecret: input.ClientSecret }),
        ...(input.Enabled != null && { Enabled: input.Enabled }),
    };
};
const serializeAws_restJson1ADMMessage = (input, context) => {
    return {
        ...(input.Action != null && { Action: input.Action }),
        ...(input.Body != null && { Body: input.Body }),
        ...(input.ConsolidationKey != null && { ConsolidationKey: input.ConsolidationKey }),
        ...(input.Data != null && { Data: serializeAws_restJson1MapOf__string(input.Data, context) }),
        ...(input.ExpiresAfter != null && { ExpiresAfter: input.ExpiresAfter }),
        ...(input.IconReference != null && { IconReference: input.IconReference }),
        ...(input.ImageIconUrl != null && { ImageIconUrl: input.ImageIconUrl }),
        ...(input.ImageUrl != null && { ImageUrl: input.ImageUrl }),
        ...(input.MD5 != null && { MD5: input.MD5 }),
        ...(input.RawContent != null && { RawContent: input.RawContent }),
        ...(input.SilentPush != null && { SilentPush: input.SilentPush }),
        ...(input.SmallImageIconUrl != null && { SmallImageIconUrl: input.SmallImageIconUrl }),
        ...(input.Sound != null && { Sound: input.Sound }),
        ...(input.Substitutions != null && {
            Substitutions: serializeAws_restJson1MapOfListOf__string(input.Substitutions, context),
        }),
        ...(input.Title != null && { Title: input.Title }),
        ...(input.Url != null && { Url: input.Url }),
    };
};
const serializeAws_restJson1AndroidPushNotificationTemplate = (input, context) => {
    return {
        ...(input.Action != null && { Action: input.Action }),
        ...(input.Body != null && { Body: input.Body }),
        ...(input.ImageIconUrl != null && { ImageIconUrl: input.ImageIconUrl }),
        ...(input.ImageUrl != null && { ImageUrl: input.ImageUrl }),
        ...(input.RawContent != null && { RawContent: input.RawContent }),
        ...(input.SmallImageIconUrl != null && { SmallImageIconUrl: input.SmallImageIconUrl }),
        ...(input.Sound != null && { Sound: input.Sound }),
        ...(input.Title != null && { Title: input.Title }),
        ...(input.Url != null && { Url: input.Url }),
    };
};
const serializeAws_restJson1APNSChannelRequest = (input, context) => {
    return {
        ...(input.BundleId != null && { BundleId: input.BundleId }),
        ...(input.Certificate != null && { Certificate: input.Certificate }),
        ...(input.DefaultAuthenticationMethod != null && {
            DefaultAuthenticationMethod: input.DefaultAuthenticationMethod,
        }),
        ...(input.Enabled != null && { Enabled: input.Enabled }),
        ...(input.PrivateKey != null && { PrivateKey: input.PrivateKey }),
        ...(input.TeamId != null && { TeamId: input.TeamId }),
        ...(input.TokenKey != null && { TokenKey: input.TokenKey }),
        ...(input.TokenKeyId != null && { TokenKeyId: input.TokenKeyId }),
    };
};
const serializeAws_restJson1APNSMessage = (input, context) => {
    return {
        ...(input.APNSPushType != null && { APNSPushType: input.APNSPushType }),
        ...(input.Action != null && { Action: input.Action }),
        ...(input.Badge != null && { Badge: input.Badge }),
        ...(input.Body != null && { Body: input.Body }),
        ...(input.Category != null && { Category: input.Category }),
        ...(input.CollapseId != null && { CollapseId: input.CollapseId }),
        ...(input.Data != null && { Data: serializeAws_restJson1MapOf__string(input.Data, context) }),
        ...(input.MediaUrl != null && { MediaUrl: input.MediaUrl }),
        ...(input.PreferredAuthenticationMethod != null && {
            PreferredAuthenticationMethod: input.PreferredAuthenticationMethod,
        }),
        ...(input.Priority != null && { Priority: input.Priority }),
        ...(input.RawContent != null && { RawContent: input.RawContent }),
        ...(input.SilentPush != null && { SilentPush: input.SilentPush }),
        ...(input.Sound != null && { Sound: input.Sound }),
        ...(input.Substitutions != null && {
            Substitutions: serializeAws_restJson1MapOfListOf__string(input.Substitutions, context),
        }),
        ...(input.ThreadId != null && { ThreadId: input.ThreadId }),
        ...(input.TimeToLive != null && { TimeToLive: input.TimeToLive }),
        ...(input.Title != null && { Title: input.Title }),
        ...(input.Url != null && { Url: input.Url }),
    };
};
const serializeAws_restJson1APNSPushNotificationTemplate = (input, context) => {
    return {
        ...(input.Action != null && { Action: input.Action }),
        ...(input.Body != null && { Body: input.Body }),
        ...(input.MediaUrl != null && { MediaUrl: input.MediaUrl }),
        ...(input.RawContent != null && { RawContent: input.RawContent }),
        ...(input.Sound != null && { Sound: input.Sound }),
        ...(input.Title != null && { Title: input.Title }),
        ...(input.Url != null && { Url: input.Url }),
    };
};
const serializeAws_restJson1APNSSandboxChannelRequest = (input, context) => {
    return {
        ...(input.BundleId != null && { BundleId: input.BundleId }),
        ...(input.Certificate != null && { Certificate: input.Certificate }),
        ...(input.DefaultAuthenticationMethod != null && {
            DefaultAuthenticationMethod: input.DefaultAuthenticationMethod,
        }),
        ...(input.Enabled != null && { Enabled: input.Enabled }),
        ...(input.PrivateKey != null && { PrivateKey: input.PrivateKey }),
        ...(input.TeamId != null && { TeamId: input.TeamId }),
        ...(input.TokenKey != null && { TokenKey: input.TokenKey }),
        ...(input.TokenKeyId != null && { TokenKeyId: input.TokenKeyId }),
    };
};
const serializeAws_restJson1APNSVoipChannelRequest = (input, context) => {
    return {
        ...(input.BundleId != null && { BundleId: input.BundleId }),
        ...(input.Certificate != null && { Certificate: input.Certificate }),
        ...(input.DefaultAuthenticationMethod != null && {
            DefaultAuthenticationMethod: input.DefaultAuthenticationMethod,
        }),
        ...(input.Enabled != null && { Enabled: input.Enabled }),
        ...(input.PrivateKey != null && { PrivateKey: input.PrivateKey }),
        ...(input.TeamId != null && { TeamId: input.TeamId }),
        ...(input.TokenKey != null && { TokenKey: input.TokenKey }),
        ...(input.TokenKeyId != null && { TokenKeyId: input.TokenKeyId }),
    };
};
const serializeAws_restJson1APNSVoipSandboxChannelRequest = (input, context) => {
    return {
        ...(input.BundleId != null && { BundleId: input.BundleId }),
        ...(input.Certificate != null && { Certificate: input.Certificate }),
        ...(input.DefaultAuthenticationMethod != null && {
            DefaultAuthenticationMethod: input.DefaultAuthenticationMethod,
        }),
        ...(input.Enabled != null && { Enabled: input.Enabled }),
        ...(input.PrivateKey != null && { PrivateKey: input.PrivateKey }),
        ...(input.TeamId != null && { TeamId: input.TeamId }),
        ...(input.TokenKey != null && { TokenKey: input.TokenKey }),
        ...(input.TokenKeyId != null && { TokenKeyId: input.TokenKeyId }),
    };
};
const serializeAws_restJson1AttributeDimension = (input, context) => {
    return {
        ...(input.AttributeType != null && { AttributeType: input.AttributeType }),
        ...(input.Values != null && { Values: serializeAws_restJson1ListOf__string(input.Values, context) }),
    };
};
const serializeAws_restJson1BaiduChannelRequest = (input, context) => {
    return {
        ...(input.ApiKey != null && { ApiKey: input.ApiKey }),
        ...(input.Enabled != null && { Enabled: input.Enabled }),
        ...(input.SecretKey != null && { SecretKey: input.SecretKey }),
    };
};
const serializeAws_restJson1BaiduMessage = (input, context) => {
    return {
        ...(input.Action != null && { Action: input.Action }),
        ...(input.Body != null && { Body: input.Body }),
        ...(input.Data != null && { Data: serializeAws_restJson1MapOf__string(input.Data, context) }),
        ...(input.IconReference != null && { IconReference: input.IconReference }),
        ...(input.ImageIconUrl != null && { ImageIconUrl: input.ImageIconUrl }),
        ...(input.ImageUrl != null && { ImageUrl: input.ImageUrl }),
        ...(input.RawContent != null && { RawContent: input.RawContent }),
        ...(input.SilentPush != null && { SilentPush: input.SilentPush }),
        ...(input.SmallImageIconUrl != null && { SmallImageIconUrl: input.SmallImageIconUrl }),
        ...(input.Sound != null && { Sound: input.Sound }),
        ...(input.Substitutions != null && {
            Substitutions: serializeAws_restJson1MapOfListOf__string(input.Substitutions, context),
        }),
        ...(input.TimeToLive != null && { TimeToLive: input.TimeToLive }),
        ...(input.Title != null && { Title: input.Title }),
        ...(input.Url != null && { Url: input.Url }),
    };
};
const serializeAws_restJson1CampaignCustomMessage = (input, context) => {
    return {
        ...(input.Data != null && { Data: input.Data }),
    };
};
const serializeAws_restJson1CampaignEmailMessage = (input, context) => {
    return {
        ...(input.Body != null && { Body: input.Body }),
        ...(input.FromAddress != null && { FromAddress: input.FromAddress }),
        ...(input.HtmlBody != null && { HtmlBody: input.HtmlBody }),
        ...(input.Title != null && { Title: input.Title }),
    };
};
const serializeAws_restJson1CampaignEventFilter = (input, context) => {
    return {
        ...(input.Dimensions != null && { Dimensions: serializeAws_restJson1EventDimensions(input.Dimensions, context) }),
        ...(input.FilterType != null && { FilterType: input.FilterType }),
    };
};
const serializeAws_restJson1CampaignHook = (input, context) => {
    return {
        ...(input.LambdaFunctionName != null && { LambdaFunctionName: input.LambdaFunctionName }),
        ...(input.Mode != null && { Mode: input.Mode }),
        ...(input.WebUrl != null && { WebUrl: input.WebUrl }),
    };
};
const serializeAws_restJson1CampaignInAppMessage = (input, context) => {
    return {
        ...(input.Body != null && { Body: input.Body }),
        ...(input.Content != null && { Content: serializeAws_restJson1ListOfInAppMessageContent(input.Content, context) }),
        ...(input.CustomConfig != null && {
            CustomConfig: serializeAws_restJson1MapOf__string(input.CustomConfig, context),
        }),
        ...(input.Layout != null && { Layout: input.Layout }),
    };
};
const serializeAws_restJson1CampaignLimits = (input, context) => {
    return {
        ...(input.Daily != null && { Daily: input.Daily }),
        ...(input.MaximumDuration != null && { MaximumDuration: input.MaximumDuration }),
        ...(input.MessagesPerSecond != null && { MessagesPerSecond: input.MessagesPerSecond }),
        ...(input.Session != null && { Session: input.Session }),
        ...(input.Total != null && { Total: input.Total }),
    };
};
const serializeAws_restJson1CampaignSmsMessage = (input, context) => {
    return {
        ...(input.Body != null && { Body: input.Body }),
        ...(input.EntityId != null && { EntityId: input.EntityId }),
        ...(input.MessageType != null && { MessageType: input.MessageType }),
        ...(input.OriginationNumber != null && { OriginationNumber: input.OriginationNumber }),
        ...(input.SenderId != null && { SenderId: input.SenderId }),
        ...(input.TemplateId != null && { TemplateId: input.TemplateId }),
    };
};
const serializeAws_restJson1ClosedDays = (input, context) => {
    return {
        ...(input.CUSTOM != null && { CUSTOM: serializeAws_restJson1ListOfClosedDaysRules(input.CUSTOM, context) }),
        ...(input.EMAIL != null && { EMAIL: serializeAws_restJson1ListOfClosedDaysRules(input.EMAIL, context) }),
        ...(input.PUSH != null && { PUSH: serializeAws_restJson1ListOfClosedDaysRules(input.PUSH, context) }),
        ...(input.SMS != null && { SMS: serializeAws_restJson1ListOfClosedDaysRules(input.SMS, context) }),
        ...(input.VOICE != null && { VOICE: serializeAws_restJson1ListOfClosedDaysRules(input.VOICE, context) }),
    };
};
const serializeAws_restJson1ClosedDaysRule = (input, context) => {
    return {
        ...(input.EndDateTime != null && { EndDateTime: input.EndDateTime }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.StartDateTime != null && { StartDateTime: input.StartDateTime }),
    };
};
const serializeAws_restJson1Condition = (input, context) => {
    return {
        ...(input.Conditions != null && {
            Conditions: serializeAws_restJson1ListOfSimpleCondition(input.Conditions, context),
        }),
        ...(input.Operator != null && { Operator: input.Operator }),
    };
};
const serializeAws_restJson1ConditionalSplitActivity = (input, context) => {
    return {
        ...(input.Condition != null && { Condition: serializeAws_restJson1Condition(input.Condition, context) }),
        ...(input.EvaluationWaitTime != null && {
            EvaluationWaitTime: serializeAws_restJson1WaitTime(input.EvaluationWaitTime, context),
        }),
        ...(input.FalseActivity != null && { FalseActivity: input.FalseActivity }),
        ...(input.TrueActivity != null && { TrueActivity: input.TrueActivity }),
    };
};
const serializeAws_restJson1ContactCenterActivity = (input, context) => {
    return {
        ...(input.NextActivity != null && { NextActivity: input.NextActivity }),
    };
};
const serializeAws_restJson1CreateApplicationRequest = (input, context) => {
    return {
        ...(input.Name != null && { Name: input.Name }),
        ...(input.tags != null && { tags: serializeAws_restJson1MapOf__string(input.tags, context) }),
    };
};
const serializeAws_restJson1CreateRecommenderConfigurationShape = (input, context) => {
    return {
        ...(input.Attributes != null && { Attributes: serializeAws_restJson1MapOf__string(input.Attributes, context) }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.RecommendationProviderIdType != null && {
            RecommendationProviderIdType: input.RecommendationProviderIdType,
        }),
        ...(input.RecommendationProviderRoleArn != null && {
            RecommendationProviderRoleArn: input.RecommendationProviderRoleArn,
        }),
        ...(input.RecommendationProviderUri != null && { RecommendationProviderUri: input.RecommendationProviderUri }),
        ...(input.RecommendationTransformerUri != null && {
            RecommendationTransformerUri: input.RecommendationTransformerUri,
        }),
        ...(input.RecommendationsDisplayName != null && { RecommendationsDisplayName: input.RecommendationsDisplayName }),
        ...(input.RecommendationsPerMessage != null && { RecommendationsPerMessage: input.RecommendationsPerMessage }),
    };
};
const serializeAws_restJson1CustomDeliveryConfiguration = (input, context) => {
    return {
        ...(input.DeliveryUri != null && { DeliveryUri: input.DeliveryUri }),
        ...(input.EndpointTypes != null && {
            EndpointTypes: serializeAws_restJson1ListOf__EndpointTypesElement(input.EndpointTypes, context),
        }),
    };
};
const serializeAws_restJson1CustomMessageActivity = (input, context) => {
    return {
        ...(input.DeliveryUri != null && { DeliveryUri: input.DeliveryUri }),
        ...(input.EndpointTypes != null && {
            EndpointTypes: serializeAws_restJson1ListOf__EndpointTypesElement(input.EndpointTypes, context),
        }),
        ...(input.MessageConfig != null && {
            MessageConfig: serializeAws_restJson1JourneyCustomMessage(input.MessageConfig, context),
        }),
        ...(input.NextActivity != null && { NextActivity: input.NextActivity }),
        ...(input.TemplateName != null && { TemplateName: input.TemplateName }),
        ...(input.TemplateVersion != null && { TemplateVersion: input.TemplateVersion }),
    };
};
const serializeAws_restJson1DefaultButtonConfiguration = (input, context) => {
    return {
        ...(input.BackgroundColor != null && { BackgroundColor: input.BackgroundColor }),
        ...(input.BorderRadius != null && { BorderRadius: input.BorderRadius }),
        ...(input.ButtonAction != null && { ButtonAction: input.ButtonAction }),
        ...(input.Link != null && { Link: input.Link }),
        ...(input.Text != null && { Text: input.Text }),
        ...(input.TextColor != null && { TextColor: input.TextColor }),
    };
};
const serializeAws_restJson1DefaultMessage = (input, context) => {
    return {
        ...(input.Body != null && { Body: input.Body }),
        ...(input.Substitutions != null && {
            Substitutions: serializeAws_restJson1MapOfListOf__string(input.Substitutions, context),
        }),
    };
};
const serializeAws_restJson1DefaultPushNotificationMessage = (input, context) => {
    return {
        ...(input.Action != null && { Action: input.Action }),
        ...(input.Body != null && { Body: input.Body }),
        ...(input.Data != null && { Data: serializeAws_restJson1MapOf__string(input.Data, context) }),
        ...(input.SilentPush != null && { SilentPush: input.SilentPush }),
        ...(input.Substitutions != null && {
            Substitutions: serializeAws_restJson1MapOfListOf__string(input.Substitutions, context),
        }),
        ...(input.Title != null && { Title: input.Title }),
        ...(input.Url != null && { Url: input.Url }),
    };
};
const serializeAws_restJson1DefaultPushNotificationTemplate = (input, context) => {
    return {
        ...(input.Action != null && { Action: input.Action }),
        ...(input.Body != null && { Body: input.Body }),
        ...(input.Sound != null && { Sound: input.Sound }),
        ...(input.Title != null && { Title: input.Title }),
        ...(input.Url != null && { Url: input.Url }),
    };
};
const serializeAws_restJson1DirectMessageConfiguration = (input, context) => {
    return {
        ...(input.ADMMessage != null && { ADMMessage: serializeAws_restJson1ADMMessage(input.ADMMessage, context) }),
        ...(input.APNSMessage != null && { APNSMessage: serializeAws_restJson1APNSMessage(input.APNSMessage, context) }),
        ...(input.BaiduMessage != null && {
            BaiduMessage: serializeAws_restJson1BaiduMessage(input.BaiduMessage, context),
        }),
        ...(input.DefaultMessage != null && {
            DefaultMessage: serializeAws_restJson1DefaultMessage(input.DefaultMessage, context),
        }),
        ...(input.DefaultPushNotificationMessage != null && {
            DefaultPushNotificationMessage: serializeAws_restJson1DefaultPushNotificationMessage(input.DefaultPushNotificationMessage, context),
        }),
        ...(input.EmailMessage != null && {
            EmailMessage: serializeAws_restJson1EmailMessage(input.EmailMessage, context),
        }),
        ...(input.GCMMessage != null && { GCMMessage: serializeAws_restJson1GCMMessage(input.GCMMessage, context) }),
        ...(input.SMSMessage != null && { SMSMessage: serializeAws_restJson1SMSMessage(input.SMSMessage, context) }),
        ...(input.VoiceMessage != null && {
            VoiceMessage: serializeAws_restJson1VoiceMessage(input.VoiceMessage, context),
        }),
    };
};
const serializeAws_restJson1EmailChannelRequest = (input, context) => {
    return {
        ...(input.ConfigurationSet != null && { ConfigurationSet: input.ConfigurationSet }),
        ...(input.Enabled != null && { Enabled: input.Enabled }),
        ...(input.FromAddress != null && { FromAddress: input.FromAddress }),
        ...(input.Identity != null && { Identity: input.Identity }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
    };
};
const serializeAws_restJson1EmailMessage = (input, context) => {
    return {
        ...(input.Body != null && { Body: input.Body }),
        ...(input.FeedbackForwardingAddress != null && { FeedbackForwardingAddress: input.FeedbackForwardingAddress }),
        ...(input.FromAddress != null && { FromAddress: input.FromAddress }),
        ...(input.RawEmail != null && { RawEmail: serializeAws_restJson1RawEmail(input.RawEmail, context) }),
        ...(input.ReplyToAddresses != null && {
            ReplyToAddresses: serializeAws_restJson1ListOf__string(input.ReplyToAddresses, context),
        }),
        ...(input.SimpleEmail != null && { SimpleEmail: serializeAws_restJson1SimpleEmail(input.SimpleEmail, context) }),
        ...(input.Substitutions != null && {
            Substitutions: serializeAws_restJson1MapOfListOf__string(input.Substitutions, context),
        }),
    };
};
const serializeAws_restJson1EmailMessageActivity = (input, context) => {
    return {
        ...(input.MessageConfig != null && {
            MessageConfig: serializeAws_restJson1JourneyEmailMessage(input.MessageConfig, context),
        }),
        ...(input.NextActivity != null && { NextActivity: input.NextActivity }),
        ...(input.TemplateName != null && { TemplateName: input.TemplateName }),
        ...(input.TemplateVersion != null && { TemplateVersion: input.TemplateVersion }),
    };
};
const serializeAws_restJson1EmailTemplateRequest = (input, context) => {
    return {
        ...(input.DefaultSubstitutions != null && { DefaultSubstitutions: input.DefaultSubstitutions }),
        ...(input.HtmlPart != null && { HtmlPart: input.HtmlPart }),
        ...(input.RecommenderId != null && { RecommenderId: input.RecommenderId }),
        ...(input.Subject != null && { Subject: input.Subject }),
        ...(input.TemplateDescription != null && { TemplateDescription: input.TemplateDescription }),
        ...(input.TextPart != null && { TextPart: input.TextPart }),
        ...(input.tags != null && { tags: serializeAws_restJson1MapOf__string(input.tags, context) }),
    };
};
const serializeAws_restJson1EndpointBatchItem = (input, context) => {
    return {
        ...(input.Address != null && { Address: input.Address }),
        ...(input.Attributes != null && {
            Attributes: serializeAws_restJson1MapOfListOf__string(input.Attributes, context),
        }),
        ...(input.ChannelType != null && { ChannelType: input.ChannelType }),
        ...(input.Demographic != null && {
            Demographic: serializeAws_restJson1EndpointDemographic(input.Demographic, context),
        }),
        ...(input.EffectiveDate != null && { EffectiveDate: input.EffectiveDate }),
        ...(input.EndpointStatus != null && { EndpointStatus: input.EndpointStatus }),
        ...(input.Id != null && { Id: input.Id }),
        ...(input.Location != null && { Location: serializeAws_restJson1EndpointLocation(input.Location, context) }),
        ...(input.Metrics != null && { Metrics: serializeAws_restJson1MapOf__double(input.Metrics, context) }),
        ...(input.OptOut != null && { OptOut: input.OptOut }),
        ...(input.RequestId != null && { RequestId: input.RequestId }),
        ...(input.User != null && { User: serializeAws_restJson1EndpointUser(input.User, context) }),
    };
};
const serializeAws_restJson1EndpointBatchRequest = (input, context) => {
    return {
        ...(input.Item != null && { Item: serializeAws_restJson1ListOfEndpointBatchItem(input.Item, context) }),
    };
};
const serializeAws_restJson1EndpointDemographic = (input, context) => {
    return {
        ...(input.AppVersion != null && { AppVersion: input.AppVersion }),
        ...(input.Locale != null && { Locale: input.Locale }),
        ...(input.Make != null && { Make: input.Make }),
        ...(input.Model != null && { Model: input.Model }),
        ...(input.ModelVersion != null && { ModelVersion: input.ModelVersion }),
        ...(input.Platform != null && { Platform: input.Platform }),
        ...(input.PlatformVersion != null && { PlatformVersion: input.PlatformVersion }),
        ...(input.Timezone != null && { Timezone: input.Timezone }),
    };
};
const serializeAws_restJson1EndpointLocation = (input, context) => {
    return {
        ...(input.City != null && { City: input.City }),
        ...(input.Country != null && { Country: input.Country }),
        ...(input.Latitude != null && { Latitude: (0, smithy_client_1.serializeFloat)(input.Latitude) }),
        ...(input.Longitude != null && { Longitude: (0, smithy_client_1.serializeFloat)(input.Longitude) }),
        ...(input.PostalCode != null && { PostalCode: input.PostalCode }),
        ...(input.Region != null && { Region: input.Region }),
    };
};
const serializeAws_restJson1EndpointRequest = (input, context) => {
    return {
        ...(input.Address != null && { Address: input.Address }),
        ...(input.Attributes != null && {
            Attributes: serializeAws_restJson1MapOfListOf__string(input.Attributes, context),
        }),
        ...(input.ChannelType != null && { ChannelType: input.ChannelType }),
        ...(input.Demographic != null && {
            Demographic: serializeAws_restJson1EndpointDemographic(input.Demographic, context),
        }),
        ...(input.EffectiveDate != null && { EffectiveDate: input.EffectiveDate }),
        ...(input.EndpointStatus != null && { EndpointStatus: input.EndpointStatus }),
        ...(input.Location != null && { Location: serializeAws_restJson1EndpointLocation(input.Location, context) }),
        ...(input.Metrics != null && { Metrics: serializeAws_restJson1MapOf__double(input.Metrics, context) }),
        ...(input.OptOut != null && { OptOut: input.OptOut }),
        ...(input.RequestId != null && { RequestId: input.RequestId }),
        ...(input.User != null && { User: serializeAws_restJson1EndpointUser(input.User, context) }),
    };
};
const serializeAws_restJson1EndpointSendConfiguration = (input, context) => {
    return {
        ...(input.BodyOverride != null && { BodyOverride: input.BodyOverride }),
        ...(input.Context != null && { Context: serializeAws_restJson1MapOf__string(input.Context, context) }),
        ...(input.RawContent != null && { RawContent: input.RawContent }),
        ...(input.Substitutions != null && {
            Substitutions: serializeAws_restJson1MapOfListOf__string(input.Substitutions, context),
        }),
        ...(input.TitleOverride != null && { TitleOverride: input.TitleOverride }),
    };
};
const serializeAws_restJson1EndpointUser = (input, context) => {
    return {
        ...(input.UserAttributes != null && {
            UserAttributes: serializeAws_restJson1MapOfListOf__string(input.UserAttributes, context),
        }),
        ...(input.UserId != null && { UserId: input.UserId }),
    };
};
const serializeAws_restJson1Event = (input, context) => {
    return {
        ...(input.AppPackageName != null && { AppPackageName: input.AppPackageName }),
        ...(input.AppTitle != null && { AppTitle: input.AppTitle }),
        ...(input.AppVersionCode != null && { AppVersionCode: input.AppVersionCode }),
        ...(input.Attributes != null && { Attributes: serializeAws_restJson1MapOf__string(input.Attributes, context) }),
        ...(input.ClientSdkVersion != null && { ClientSdkVersion: input.ClientSdkVersion }),
        ...(input.EventType != null && { EventType: input.EventType }),
        ...(input.Metrics != null && { Metrics: serializeAws_restJson1MapOf__double(input.Metrics, context) }),
        ...(input.SdkName != null && { SdkName: input.SdkName }),
        ...(input.Session != null && { Session: serializeAws_restJson1Session(input.Session, context) }),
        ...(input.Timestamp != null && { Timestamp: input.Timestamp }),
    };
};
const serializeAws_restJson1EventCondition = (input, context) => {
    return {
        ...(input.Dimensions != null && { Dimensions: serializeAws_restJson1EventDimensions(input.Dimensions, context) }),
        ...(input.MessageActivity != null && { MessageActivity: input.MessageActivity }),
    };
};
const serializeAws_restJson1EventDimensions = (input, context) => {
    return {
        ...(input.Attributes != null && {
            Attributes: serializeAws_restJson1MapOfAttributeDimension(input.Attributes, context),
        }),
        ...(input.EventType != null && { EventType: serializeAws_restJson1SetDimension(input.EventType, context) }),
        ...(input.Metrics != null && { Metrics: serializeAws_restJson1MapOfMetricDimension(input.Metrics, context) }),
    };
};
const serializeAws_restJson1EventFilter = (input, context) => {
    return {
        ...(input.Dimensions != null && { Dimensions: serializeAws_restJson1EventDimensions(input.Dimensions, context) }),
        ...(input.FilterType != null && { FilterType: input.FilterType }),
    };
};
const serializeAws_restJson1EventsBatch = (input, context) => {
    return {
        ...(input.Endpoint != null && { Endpoint: serializeAws_restJson1PublicEndpoint(input.Endpoint, context) }),
        ...(input.Events != null && { Events: serializeAws_restJson1MapOfEvent(input.Events, context) }),
    };
};
const serializeAws_restJson1EventsRequest = (input, context) => {
    return {
        ...(input.BatchItem != null && { BatchItem: serializeAws_restJson1MapOfEventsBatch(input.BatchItem, context) }),
    };
};
const serializeAws_restJson1EventStartCondition = (input, context) => {
    return {
        ...(input.EventFilter != null && { EventFilter: serializeAws_restJson1EventFilter(input.EventFilter, context) }),
        ...(input.SegmentId != null && { SegmentId: input.SegmentId }),
    };
};
const serializeAws_restJson1ExportJobRequest = (input, context) => {
    return {
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
        ...(input.S3UrlPrefix != null && { S3UrlPrefix: input.S3UrlPrefix }),
        ...(input.SegmentId != null && { SegmentId: input.SegmentId }),
        ...(input.SegmentVersion != null && { SegmentVersion: input.SegmentVersion }),
    };
};
const serializeAws_restJson1GCMChannelRequest = (input, context) => {
    return {
        ...(input.ApiKey != null && { ApiKey: input.ApiKey }),
        ...(input.Enabled != null && { Enabled: input.Enabled }),
    };
};
const serializeAws_restJson1GCMMessage = (input, context) => {
    return {
        ...(input.Action != null && { Action: input.Action }),
        ...(input.Body != null && { Body: input.Body }),
        ...(input.CollapseKey != null && { CollapseKey: input.CollapseKey }),
        ...(input.Data != null && { Data: serializeAws_restJson1MapOf__string(input.Data, context) }),
        ...(input.IconReference != null && { IconReference: input.IconReference }),
        ...(input.ImageIconUrl != null && { ImageIconUrl: input.ImageIconUrl }),
        ...(input.ImageUrl != null && { ImageUrl: input.ImageUrl }),
        ...(input.Priority != null && { Priority: input.Priority }),
        ...(input.RawContent != null && { RawContent: input.RawContent }),
        ...(input.RestrictedPackageName != null && { RestrictedPackageName: input.RestrictedPackageName }),
        ...(input.SilentPush != null && { SilentPush: input.SilentPush }),
        ...(input.SmallImageIconUrl != null && { SmallImageIconUrl: input.SmallImageIconUrl }),
        ...(input.Sound != null && { Sound: input.Sound }),
        ...(input.Substitutions != null && {
            Substitutions: serializeAws_restJson1MapOfListOf__string(input.Substitutions, context),
        }),
        ...(input.TimeToLive != null && { TimeToLive: input.TimeToLive }),
        ...(input.Title != null && { Title: input.Title }),
        ...(input.Url != null && { Url: input.Url }),
    };
};
const serializeAws_restJson1GPSCoordinates = (input, context) => {
    return {
        ...(input.Latitude != null && { Latitude: (0, smithy_client_1.serializeFloat)(input.Latitude) }),
        ...(input.Longitude != null && { Longitude: (0, smithy_client_1.serializeFloat)(input.Longitude) }),
    };
};
const serializeAws_restJson1GPSPointDimension = (input, context) => {
    return {
        ...(input.Coordinates != null && { Coordinates: serializeAws_restJson1GPSCoordinates(input.Coordinates, context) }),
        ...(input.RangeInKilometers != null && { RangeInKilometers: (0, smithy_client_1.serializeFloat)(input.RangeInKilometers) }),
    };
};
const serializeAws_restJson1HoldoutActivity = (input, context) => {
    return {
        ...(input.NextActivity != null && { NextActivity: input.NextActivity }),
        ...(input.Percentage != null && { Percentage: input.Percentage }),
    };
};
const serializeAws_restJson1ImportJobRequest = (input, context) => {
    return {
        ...(input.DefineSegment != null && { DefineSegment: input.DefineSegment }),
        ...(input.ExternalId != null && { ExternalId: input.ExternalId }),
        ...(input.Format != null && { Format: input.Format }),
        ...(input.RegisterEndpoints != null && { RegisterEndpoints: input.RegisterEndpoints }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
        ...(input.S3Url != null && { S3Url: input.S3Url }),
        ...(input.SegmentId != null && { SegmentId: input.SegmentId }),
        ...(input.SegmentName != null && { SegmentName: input.SegmentName }),
    };
};
const serializeAws_restJson1InAppMessageBodyConfig = (input, context) => {
    return {
        ...(input.Alignment != null && { Alignment: input.Alignment }),
        ...(input.Body != null && { Body: input.Body }),
        ...(input.TextColor != null && { TextColor: input.TextColor }),
    };
};
const serializeAws_restJson1InAppMessageButton = (input, context) => {
    return {
        ...(input.Android != null && {
            Android: serializeAws_restJson1OverrideButtonConfiguration(input.Android, context),
        }),
        ...(input.DefaultConfig != null && {
            DefaultConfig: serializeAws_restJson1DefaultButtonConfiguration(input.DefaultConfig, context),
        }),
        ...(input.IOS != null && { IOS: serializeAws_restJson1OverrideButtonConfiguration(input.IOS, context) }),
        ...(input.Web != null && { Web: serializeAws_restJson1OverrideButtonConfiguration(input.Web, context) }),
    };
};
const serializeAws_restJson1InAppMessageContent = (input, context) => {
    return {
        ...(input.BackgroundColor != null && { BackgroundColor: input.BackgroundColor }),
        ...(input.BodyConfig != null && {
            BodyConfig: serializeAws_restJson1InAppMessageBodyConfig(input.BodyConfig, context),
        }),
        ...(input.HeaderConfig != null && {
            HeaderConfig: serializeAws_restJson1InAppMessageHeaderConfig(input.HeaderConfig, context),
        }),
        ...(input.ImageUrl != null && { ImageUrl: input.ImageUrl }),
        ...(input.PrimaryBtn != null && {
            PrimaryBtn: serializeAws_restJson1InAppMessageButton(input.PrimaryBtn, context),
        }),
        ...(input.SecondaryBtn != null && {
            SecondaryBtn: serializeAws_restJson1InAppMessageButton(input.SecondaryBtn, context),
        }),
    };
};
const serializeAws_restJson1InAppMessageHeaderConfig = (input, context) => {
    return {
        ...(input.Alignment != null && { Alignment: input.Alignment }),
        ...(input.Header != null && { Header: input.Header }),
        ...(input.TextColor != null && { TextColor: input.TextColor }),
    };
};
const serializeAws_restJson1InAppTemplateRequest = (input, context) => {
    return {
        ...(input.Content != null && { Content: serializeAws_restJson1ListOfInAppMessageContent(input.Content, context) }),
        ...(input.CustomConfig != null && {
            CustomConfig: serializeAws_restJson1MapOf__string(input.CustomConfig, context),
        }),
        ...(input.Layout != null && { Layout: input.Layout }),
        ...(input.TemplateDescription != null && { TemplateDescription: input.TemplateDescription }),
        ...(input.tags != null && { tags: serializeAws_restJson1MapOf__string(input.tags, context) }),
    };
};
const serializeAws_restJson1JourneyChannelSettings = (input, context) => {
    return {
        ...(input.ConnectCampaignArn != null && { ConnectCampaignArn: input.ConnectCampaignArn }),
        ...(input.ConnectCampaignExecutionRoleArn != null && {
            ConnectCampaignExecutionRoleArn: input.ConnectCampaignExecutionRoleArn,
        }),
    };
};
const serializeAws_restJson1JourneyCustomMessage = (input, context) => {
    return {
        ...(input.Data != null && { Data: input.Data }),
    };
};
const serializeAws_restJson1JourneyEmailMessage = (input, context) => {
    return {
        ...(input.FromAddress != null && { FromAddress: input.FromAddress }),
    };
};
const serializeAws_restJson1JourneyLimits = (input, context) => {
    return {
        ...(input.DailyCap != null && { DailyCap: input.DailyCap }),
        ...(input.EndpointReentryCap != null && { EndpointReentryCap: input.EndpointReentryCap }),
        ...(input.EndpointReentryInterval != null && { EndpointReentryInterval: input.EndpointReentryInterval }),
        ...(input.MessagesPerSecond != null && { MessagesPerSecond: input.MessagesPerSecond }),
    };
};
const serializeAws_restJson1JourneyPushMessage = (input, context) => {
    return {
        ...(input.TimeToLive != null && { TimeToLive: input.TimeToLive }),
    };
};
const serializeAws_restJson1JourneySchedule = (input, context) => {
    return {
        ...(input.EndTime != null && { EndTime: input.EndTime.toISOString().split(".")[0] + "Z" }),
        ...(input.StartTime != null && { StartTime: input.StartTime.toISOString().split(".")[0] + "Z" }),
        ...(input.Timezone != null && { Timezone: input.Timezone }),
    };
};
const serializeAws_restJson1JourneySMSMessage = (input, context) => {
    return {
        ...(input.EntityId != null && { EntityId: input.EntityId }),
        ...(input.MessageType != null && { MessageType: input.MessageType }),
        ...(input.OriginationNumber != null && { OriginationNumber: input.OriginationNumber }),
        ...(input.SenderId != null && { SenderId: input.SenderId }),
        ...(input.TemplateId != null && { TemplateId: input.TemplateId }),
    };
};
const serializeAws_restJson1JourneyStateRequest = (input, context) => {
    return {
        ...(input.State != null && { State: input.State }),
    };
};
const serializeAws_restJson1ListOf__EndpointTypesElement = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1ListOf__string = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1ListOfClosedDaysRules = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1ClosedDaysRule(entry, context);
    });
};
const serializeAws_restJson1ListOfEndpointBatchItem = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1EndpointBatchItem(entry, context);
    });
};
const serializeAws_restJson1ListOfInAppMessageContent = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1InAppMessageContent(entry, context);
    });
};
const serializeAws_restJson1ListOfMultiConditionalBranch = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1MultiConditionalBranch(entry, context);
    });
};
const serializeAws_restJson1ListOfOpenHoursRules = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1OpenHoursRule(entry, context);
    });
};
const serializeAws_restJson1ListOfRandomSplitEntry = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1RandomSplitEntry(entry, context);
    });
};
const serializeAws_restJson1ListOfSegmentDimensions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1SegmentDimensions(entry, context);
    });
};
const serializeAws_restJson1ListOfSegmentGroup = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1SegmentGroup(entry, context);
    });
};
const serializeAws_restJson1ListOfSegmentReference = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1SegmentReference(entry, context);
    });
};
const serializeAws_restJson1ListOfSimpleCondition = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1SimpleCondition(entry, context);
    });
};
const serializeAws_restJson1ListOfWriteTreatmentResource = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1WriteTreatmentResource(entry, context);
    });
};
const serializeAws_restJson1MapOf__double = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: (0, smithy_client_1.serializeFloat)(value),
        };
    }, {});
};
const serializeAws_restJson1MapOf__string = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_restJson1MapOfActivity = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: serializeAws_restJson1Activity(value, context),
        };
    }, {});
};
const serializeAws_restJson1MapOfAddressConfiguration = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: serializeAws_restJson1AddressConfiguration(value, context),
        };
    }, {});
};
const serializeAws_restJson1MapOfAttributeDimension = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: serializeAws_restJson1AttributeDimension(value, context),
        };
    }, {});
};
const serializeAws_restJson1MapOfEndpointSendConfiguration = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: serializeAws_restJson1EndpointSendConfiguration(value, context),
        };
    }, {});
};
const serializeAws_restJson1MapOfEvent = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: serializeAws_restJson1Event(value, context),
        };
    }, {});
};
const serializeAws_restJson1MapOfEventsBatch = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: serializeAws_restJson1EventsBatch(value, context),
        };
    }, {});
};
const serializeAws_restJson1MapOfListOf__string = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: serializeAws_restJson1ListOf__string(value, context),
        };
    }, {});
};
const serializeAws_restJson1MapOfListOfOpenHoursRules = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: serializeAws_restJson1ListOfOpenHoursRules(value, context),
        };
    }, {});
};
const serializeAws_restJson1MapOfMetricDimension = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: serializeAws_restJson1MetricDimension(value, context),
        };
    }, {});
};
const serializeAws_restJson1Message = (input, context) => {
    return {
        ...(input.Action != null && { Action: input.Action }),
        ...(input.Body != null && { Body: input.Body }),
        ...(input.ImageIconUrl != null && { ImageIconUrl: input.ImageIconUrl }),
        ...(input.ImageSmallIconUrl != null && { ImageSmallIconUrl: input.ImageSmallIconUrl }),
        ...(input.ImageUrl != null && { ImageUrl: input.ImageUrl }),
        ...(input.JsonBody != null && { JsonBody: input.JsonBody }),
        ...(input.MediaUrl != null && { MediaUrl: input.MediaUrl }),
        ...(input.RawContent != null && { RawContent: input.RawContent }),
        ...(input.SilentPush != null && { SilentPush: input.SilentPush }),
        ...(input.TimeToLive != null && { TimeToLive: input.TimeToLive }),
        ...(input.Title != null && { Title: input.Title }),
        ...(input.Url != null && { Url: input.Url }),
    };
};
const serializeAws_restJson1MessageConfiguration = (input, context) => {
    return {
        ...(input.ADMMessage != null && { ADMMessage: serializeAws_restJson1Message(input.ADMMessage, context) }),
        ...(input.APNSMessage != null && { APNSMessage: serializeAws_restJson1Message(input.APNSMessage, context) }),
        ...(input.BaiduMessage != null && { BaiduMessage: serializeAws_restJson1Message(input.BaiduMessage, context) }),
        ...(input.CustomMessage != null && {
            CustomMessage: serializeAws_restJson1CampaignCustomMessage(input.CustomMessage, context),
        }),
        ...(input.DefaultMessage != null && {
            DefaultMessage: serializeAws_restJson1Message(input.DefaultMessage, context),
        }),
        ...(input.EmailMessage != null && {
            EmailMessage: serializeAws_restJson1CampaignEmailMessage(input.EmailMessage, context),
        }),
        ...(input.GCMMessage != null && { GCMMessage: serializeAws_restJson1Message(input.GCMMessage, context) }),
        ...(input.InAppMessage != null && {
            InAppMessage: serializeAws_restJson1CampaignInAppMessage(input.InAppMessage, context),
        }),
        ...(input.SMSMessage != null && {
            SMSMessage: serializeAws_restJson1CampaignSmsMessage(input.SMSMessage, context),
        }),
    };
};
const serializeAws_restJson1MessageRequest = (input, context) => {
    return {
        ...(input.Addresses != null && {
            Addresses: serializeAws_restJson1MapOfAddressConfiguration(input.Addresses, context),
        }),
        ...(input.Context != null && { Context: serializeAws_restJson1MapOf__string(input.Context, context) }),
        ...(input.Endpoints != null && {
            Endpoints: serializeAws_restJson1MapOfEndpointSendConfiguration(input.Endpoints, context),
        }),
        ...(input.MessageConfiguration != null && {
            MessageConfiguration: serializeAws_restJson1DirectMessageConfiguration(input.MessageConfiguration, context),
        }),
        ...(input.TemplateConfiguration != null && {
            TemplateConfiguration: serializeAws_restJson1TemplateConfiguration(input.TemplateConfiguration, context),
        }),
        ...(input.TraceId != null && { TraceId: input.TraceId }),
    };
};
const serializeAws_restJson1MetricDimension = (input, context) => {
    return {
        ...(input.ComparisonOperator != null && { ComparisonOperator: input.ComparisonOperator }),
        ...(input.Value != null && { Value: (0, smithy_client_1.serializeFloat)(input.Value) }),
    };
};
const serializeAws_restJson1MultiConditionalBranch = (input, context) => {
    return {
        ...(input.Condition != null && { Condition: serializeAws_restJson1SimpleCondition(input.Condition, context) }),
        ...(input.NextActivity != null && { NextActivity: input.NextActivity }),
    };
};
const serializeAws_restJson1MultiConditionalSplitActivity = (input, context) => {
    return {
        ...(input.Branches != null && {
            Branches: serializeAws_restJson1ListOfMultiConditionalBranch(input.Branches, context),
        }),
        ...(input.DefaultActivity != null && { DefaultActivity: input.DefaultActivity }),
        ...(input.EvaluationWaitTime != null && {
            EvaluationWaitTime: serializeAws_restJson1WaitTime(input.EvaluationWaitTime, context),
        }),
    };
};
const serializeAws_restJson1NumberValidateRequest = (input, context) => {
    return {
        ...(input.IsoCountryCode != null && { IsoCountryCode: input.IsoCountryCode }),
        ...(input.PhoneNumber != null && { PhoneNumber: input.PhoneNumber }),
    };
};
const serializeAws_restJson1OpenHours = (input, context) => {
    return {
        ...(input.CUSTOM != null && { CUSTOM: serializeAws_restJson1MapOfListOfOpenHoursRules(input.CUSTOM, context) }),
        ...(input.EMAIL != null && { EMAIL: serializeAws_restJson1MapOfListOfOpenHoursRules(input.EMAIL, context) }),
        ...(input.PUSH != null && { PUSH: serializeAws_restJson1MapOfListOfOpenHoursRules(input.PUSH, context) }),
        ...(input.SMS != null && { SMS: serializeAws_restJson1MapOfListOfOpenHoursRules(input.SMS, context) }),
        ...(input.VOICE != null && { VOICE: serializeAws_restJson1MapOfListOfOpenHoursRules(input.VOICE, context) }),
    };
};
const serializeAws_restJson1OpenHoursRule = (input, context) => {
    return {
        ...(input.EndTime != null && { EndTime: input.EndTime }),
        ...(input.StartTime != null && { StartTime: input.StartTime }),
    };
};
const serializeAws_restJson1OverrideButtonConfiguration = (input, context) => {
    return {
        ...(input.ButtonAction != null && { ButtonAction: input.ButtonAction }),
        ...(input.Link != null && { Link: input.Link }),
    };
};
const serializeAws_restJson1PublicEndpoint = (input, context) => {
    return {
        ...(input.Address != null && { Address: input.Address }),
        ...(input.Attributes != null && {
            Attributes: serializeAws_restJson1MapOfListOf__string(input.Attributes, context),
        }),
        ...(input.ChannelType != null && { ChannelType: input.ChannelType }),
        ...(input.Demographic != null && {
            Demographic: serializeAws_restJson1EndpointDemographic(input.Demographic, context),
        }),
        ...(input.EffectiveDate != null && { EffectiveDate: input.EffectiveDate }),
        ...(input.EndpointStatus != null && { EndpointStatus: input.EndpointStatus }),
        ...(input.Location != null && { Location: serializeAws_restJson1EndpointLocation(input.Location, context) }),
        ...(input.Metrics != null && { Metrics: serializeAws_restJson1MapOf__double(input.Metrics, context) }),
        ...(input.OptOut != null && { OptOut: input.OptOut }),
        ...(input.RequestId != null && { RequestId: input.RequestId }),
        ...(input.User != null && { User: serializeAws_restJson1EndpointUser(input.User, context) }),
    };
};
const serializeAws_restJson1PushMessageActivity = (input, context) => {
    return {
        ...(input.MessageConfig != null && {
            MessageConfig: serializeAws_restJson1JourneyPushMessage(input.MessageConfig, context),
        }),
        ...(input.NextActivity != null && { NextActivity: input.NextActivity }),
        ...(input.TemplateName != null && { TemplateName: input.TemplateName }),
        ...(input.TemplateVersion != null && { TemplateVersion: input.TemplateVersion }),
    };
};
const serializeAws_restJson1PushNotificationTemplateRequest = (input, context) => {
    return {
        ...(input.ADM != null && { ADM: serializeAws_restJson1AndroidPushNotificationTemplate(input.ADM, context) }),
        ...(input.APNS != null && { APNS: serializeAws_restJson1APNSPushNotificationTemplate(input.APNS, context) }),
        ...(input.Baidu != null && { Baidu: serializeAws_restJson1AndroidPushNotificationTemplate(input.Baidu, context) }),
        ...(input.Default != null && {
            Default: serializeAws_restJson1DefaultPushNotificationTemplate(input.Default, context),
        }),
        ...(input.DefaultSubstitutions != null && { DefaultSubstitutions: input.DefaultSubstitutions }),
        ...(input.GCM != null && { GCM: serializeAws_restJson1AndroidPushNotificationTemplate(input.GCM, context) }),
        ...(input.RecommenderId != null && { RecommenderId: input.RecommenderId }),
        ...(input.TemplateDescription != null && { TemplateDescription: input.TemplateDescription }),
        ...(input.tags != null && { tags: serializeAws_restJson1MapOf__string(input.tags, context) }),
    };
};
const serializeAws_restJson1QuietTime = (input, context) => {
    return {
        ...(input.End != null && { End: input.End }),
        ...(input.Start != null && { Start: input.Start }),
    };
};
const serializeAws_restJson1RandomSplitActivity = (input, context) => {
    return {
        ...(input.Branches != null && { Branches: serializeAws_restJson1ListOfRandomSplitEntry(input.Branches, context) }),
    };
};
const serializeAws_restJson1RandomSplitEntry = (input, context) => {
    return {
        ...(input.NextActivity != null && { NextActivity: input.NextActivity }),
        ...(input.Percentage != null && { Percentage: input.Percentage }),
    };
};
const serializeAws_restJson1RawEmail = (input, context) => {
    return {
        ...(input.Data != null && { Data: context.base64Encoder(input.Data) }),
    };
};
const serializeAws_restJson1RecencyDimension = (input, context) => {
    return {
        ...(input.Duration != null && { Duration: input.Duration }),
        ...(input.RecencyType != null && { RecencyType: input.RecencyType }),
    };
};
const serializeAws_restJson1Schedule = (input, context) => {
    return {
        ...(input.EndTime != null && { EndTime: input.EndTime }),
        ...(input.EventFilter != null && {
            EventFilter: serializeAws_restJson1CampaignEventFilter(input.EventFilter, context),
        }),
        ...(input.Frequency != null && { Frequency: input.Frequency }),
        ...(input.IsLocalTime != null && { IsLocalTime: input.IsLocalTime }),
        ...(input.QuietTime != null && { QuietTime: serializeAws_restJson1QuietTime(input.QuietTime, context) }),
        ...(input.StartTime != null && { StartTime: input.StartTime }),
        ...(input.Timezone != null && { Timezone: input.Timezone }),
    };
};
const serializeAws_restJson1SegmentBehaviors = (input, context) => {
    return {
        ...(input.Recency != null && { Recency: serializeAws_restJson1RecencyDimension(input.Recency, context) }),
    };
};
const serializeAws_restJson1SegmentCondition = (input, context) => {
    return {
        ...(input.SegmentId != null && { SegmentId: input.SegmentId }),
    };
};
const serializeAws_restJson1SegmentDemographics = (input, context) => {
    return {
        ...(input.AppVersion != null && { AppVersion: serializeAws_restJson1SetDimension(input.AppVersion, context) }),
        ...(input.Channel != null && { Channel: serializeAws_restJson1SetDimension(input.Channel, context) }),
        ...(input.DeviceType != null && { DeviceType: serializeAws_restJson1SetDimension(input.DeviceType, context) }),
        ...(input.Make != null && { Make: serializeAws_restJson1SetDimension(input.Make, context) }),
        ...(input.Model != null && { Model: serializeAws_restJson1SetDimension(input.Model, context) }),
        ...(input.Platform != null && { Platform: serializeAws_restJson1SetDimension(input.Platform, context) }),
    };
};
const serializeAws_restJson1SegmentDimensions = (input, context) => {
    return {
        ...(input.Attributes != null && {
            Attributes: serializeAws_restJson1MapOfAttributeDimension(input.Attributes, context),
        }),
        ...(input.Behavior != null && { Behavior: serializeAws_restJson1SegmentBehaviors(input.Behavior, context) }),
        ...(input.Demographic != null && {
            Demographic: serializeAws_restJson1SegmentDemographics(input.Demographic, context),
        }),
        ...(input.Location != null && { Location: serializeAws_restJson1SegmentLocation(input.Location, context) }),
        ...(input.Metrics != null && { Metrics: serializeAws_restJson1MapOfMetricDimension(input.Metrics, context) }),
        ...(input.UserAttributes != null && {
            UserAttributes: serializeAws_restJson1MapOfAttributeDimension(input.UserAttributes, context),
        }),
    };
};
const serializeAws_restJson1SegmentGroup = (input, context) => {
    return {
        ...(input.Dimensions != null && {
            Dimensions: serializeAws_restJson1ListOfSegmentDimensions(input.Dimensions, context),
        }),
        ...(input.SourceSegments != null && {
            SourceSegments: serializeAws_restJson1ListOfSegmentReference(input.SourceSegments, context),
        }),
        ...(input.SourceType != null && { SourceType: input.SourceType }),
        ...(input.Type != null && { Type: input.Type }),
    };
};
const serializeAws_restJson1SegmentGroupList = (input, context) => {
    return {
        ...(input.Groups != null && { Groups: serializeAws_restJson1ListOfSegmentGroup(input.Groups, context) }),
        ...(input.Include != null && { Include: input.Include }),
    };
};
const serializeAws_restJson1SegmentLocation = (input, context) => {
    return {
        ...(input.Country != null && { Country: serializeAws_restJson1SetDimension(input.Country, context) }),
        ...(input.GPSPoint != null && { GPSPoint: serializeAws_restJson1GPSPointDimension(input.GPSPoint, context) }),
    };
};
const serializeAws_restJson1SegmentReference = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.Version != null && { Version: input.Version }),
    };
};
const serializeAws_restJson1SendOTPMessageRequestParameters = (input, context) => {
    return {
        ...(input.AllowedAttempts != null && { AllowedAttempts: input.AllowedAttempts }),
        ...(input.BrandName != null && { BrandName: input.BrandName }),
        ...(input.Channel != null && { Channel: input.Channel }),
        ...(input.CodeLength != null && { CodeLength: input.CodeLength }),
        ...(input.DestinationIdentity != null && { DestinationIdentity: input.DestinationIdentity }),
        ...(input.EntityId != null && { EntityId: input.EntityId }),
        ...(input.Language != null && { Language: input.Language }),
        ...(input.OriginationIdentity != null && { OriginationIdentity: input.OriginationIdentity }),
        ...(input.ReferenceId != null && { ReferenceId: input.ReferenceId }),
        ...(input.TemplateId != null && { TemplateId: input.TemplateId }),
        ...(input.ValidityPeriod != null && { ValidityPeriod: input.ValidityPeriod }),
    };
};
const serializeAws_restJson1SendUsersMessageRequest = (input, context) => {
    return {
        ...(input.Context != null && { Context: serializeAws_restJson1MapOf__string(input.Context, context) }),
        ...(input.MessageConfiguration != null && {
            MessageConfiguration: serializeAws_restJson1DirectMessageConfiguration(input.MessageConfiguration, context),
        }),
        ...(input.TemplateConfiguration != null && {
            TemplateConfiguration: serializeAws_restJson1TemplateConfiguration(input.TemplateConfiguration, context),
        }),
        ...(input.TraceId != null && { TraceId: input.TraceId }),
        ...(input.Users != null && { Users: serializeAws_restJson1MapOfEndpointSendConfiguration(input.Users, context) }),
    };
};
const serializeAws_restJson1Session = (input, context) => {
    return {
        ...(input.Duration != null && { Duration: input.Duration }),
        ...(input.Id != null && { Id: input.Id }),
        ...(input.StartTimestamp != null && { StartTimestamp: input.StartTimestamp }),
        ...(input.StopTimestamp != null && { StopTimestamp: input.StopTimestamp }),
    };
};
const serializeAws_restJson1SetDimension = (input, context) => {
    return {
        ...(input.DimensionType != null && { DimensionType: input.DimensionType }),
        ...(input.Values != null && { Values: serializeAws_restJson1ListOf__string(input.Values, context) }),
    };
};
const serializeAws_restJson1SimpleCondition = (input, context) => {
    return {
        ...(input.EventCondition != null && {
            EventCondition: serializeAws_restJson1EventCondition(input.EventCondition, context),
        }),
        ...(input.SegmentCondition != null && {
            SegmentCondition: serializeAws_restJson1SegmentCondition(input.SegmentCondition, context),
        }),
        ...(input.SegmentDimensions != null && {
            segmentDimensions: serializeAws_restJson1SegmentDimensions(input.SegmentDimensions, context),
        }),
    };
};
const serializeAws_restJson1SimpleEmail = (input, context) => {
    return {
        ...(input.HtmlPart != null && { HtmlPart: serializeAws_restJson1SimpleEmailPart(input.HtmlPart, context) }),
        ...(input.Subject != null && { Subject: serializeAws_restJson1SimpleEmailPart(input.Subject, context) }),
        ...(input.TextPart != null && { TextPart: serializeAws_restJson1SimpleEmailPart(input.TextPart, context) }),
    };
};
const serializeAws_restJson1SimpleEmailPart = (input, context) => {
    return {
        ...(input.Charset != null && { Charset: input.Charset }),
        ...(input.Data != null && { Data: input.Data }),
    };
};
const serializeAws_restJson1SMSChannelRequest = (input, context) => {
    return {
        ...(input.Enabled != null && { Enabled: input.Enabled }),
        ...(input.SenderId != null && { SenderId: input.SenderId }),
        ...(input.ShortCode != null && { ShortCode: input.ShortCode }),
    };
};
const serializeAws_restJson1SMSMessage = (input, context) => {
    return {
        ...(input.Body != null && { Body: input.Body }),
        ...(input.EntityId != null && { EntityId: input.EntityId }),
        ...(input.Keyword != null && { Keyword: input.Keyword }),
        ...(input.MediaUrl != null && { MediaUrl: input.MediaUrl }),
        ...(input.MessageType != null && { MessageType: input.MessageType }),
        ...(input.OriginationNumber != null && { OriginationNumber: input.OriginationNumber }),
        ...(input.SenderId != null && { SenderId: input.SenderId }),
        ...(input.Substitutions != null && {
            Substitutions: serializeAws_restJson1MapOfListOf__string(input.Substitutions, context),
        }),
        ...(input.TemplateId != null && { TemplateId: input.TemplateId }),
    };
};
const serializeAws_restJson1SMSMessageActivity = (input, context) => {
    return {
        ...(input.MessageConfig != null && {
            MessageConfig: serializeAws_restJson1JourneySMSMessage(input.MessageConfig, context),
        }),
        ...(input.NextActivity != null && { NextActivity: input.NextActivity }),
        ...(input.TemplateName != null && { TemplateName: input.TemplateName }),
        ...(input.TemplateVersion != null && { TemplateVersion: input.TemplateVersion }),
    };
};
const serializeAws_restJson1SMSTemplateRequest = (input, context) => {
    return {
        ...(input.Body != null && { Body: input.Body }),
        ...(input.DefaultSubstitutions != null && { DefaultSubstitutions: input.DefaultSubstitutions }),
        ...(input.RecommenderId != null && { RecommenderId: input.RecommenderId }),
        ...(input.TemplateDescription != null && { TemplateDescription: input.TemplateDescription }),
        ...(input.tags != null && { tags: serializeAws_restJson1MapOf__string(input.tags, context) }),
    };
};
const serializeAws_restJson1StartCondition = (input, context) => {
    return {
        ...(input.Description != null && { Description: input.Description }),
        ...(input.EventStartCondition != null && {
            EventStartCondition: serializeAws_restJson1EventStartCondition(input.EventStartCondition, context),
        }),
        ...(input.SegmentStartCondition != null && {
            SegmentStartCondition: serializeAws_restJson1SegmentCondition(input.SegmentStartCondition, context),
        }),
    };
};
const serializeAws_restJson1TagsModel = (input, context) => {
    return {
        ...(input.tags != null && { tags: serializeAws_restJson1MapOf__string(input.tags, context) }),
    };
};
const serializeAws_restJson1Template = (input, context) => {
    return {
        ...(input.Name != null && { Name: input.Name }),
        ...(input.Version != null && { Version: input.Version }),
    };
};
const serializeAws_restJson1TemplateActiveVersionRequest = (input, context) => {
    return {
        ...(input.Version != null && { Version: input.Version }),
    };
};
const serializeAws_restJson1TemplateConfiguration = (input, context) => {
    return {
        ...(input.EmailTemplate != null && { EmailTemplate: serializeAws_restJson1Template(input.EmailTemplate, context) }),
        ...(input.PushTemplate != null && { PushTemplate: serializeAws_restJson1Template(input.PushTemplate, context) }),
        ...(input.SMSTemplate != null && { SMSTemplate: serializeAws_restJson1Template(input.SMSTemplate, context) }),
        ...(input.VoiceTemplate != null && { VoiceTemplate: serializeAws_restJson1Template(input.VoiceTemplate, context) }),
    };
};
const serializeAws_restJson1UpdateAttributesRequest = (input, context) => {
    return {
        ...(input.Blacklist != null && { Blacklist: serializeAws_restJson1ListOf__string(input.Blacklist, context) }),
    };
};
const serializeAws_restJson1UpdateRecommenderConfigurationShape = (input, context) => {
    return {
        ...(input.Attributes != null && { Attributes: serializeAws_restJson1MapOf__string(input.Attributes, context) }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.RecommendationProviderIdType != null && {
            RecommendationProviderIdType: input.RecommendationProviderIdType,
        }),
        ...(input.RecommendationProviderRoleArn != null && {
            RecommendationProviderRoleArn: input.RecommendationProviderRoleArn,
        }),
        ...(input.RecommendationProviderUri != null && { RecommendationProviderUri: input.RecommendationProviderUri }),
        ...(input.RecommendationTransformerUri != null && {
            RecommendationTransformerUri: input.RecommendationTransformerUri,
        }),
        ...(input.RecommendationsDisplayName != null && { RecommendationsDisplayName: input.RecommendationsDisplayName }),
        ...(input.RecommendationsPerMessage != null && { RecommendationsPerMessage: input.RecommendationsPerMessage }),
    };
};
const serializeAws_restJson1VerifyOTPMessageRequestParameters = (input, context) => {
    return {
        ...(input.DestinationIdentity != null && { DestinationIdentity: input.DestinationIdentity }),
        ...(input.Otp != null && { Otp: input.Otp }),
        ...(input.ReferenceId != null && { ReferenceId: input.ReferenceId }),
    };
};
const serializeAws_restJson1VoiceChannelRequest = (input, context) => {
    return {
        ...(input.Enabled != null && { Enabled: input.Enabled }),
    };
};
const serializeAws_restJson1VoiceMessage = (input, context) => {
    return {
        ...(input.Body != null && { Body: input.Body }),
        ...(input.LanguageCode != null && { LanguageCode: input.LanguageCode }),
        ...(input.OriginationNumber != null && { OriginationNumber: input.OriginationNumber }),
        ...(input.Substitutions != null && {
            Substitutions: serializeAws_restJson1MapOfListOf__string(input.Substitutions, context),
        }),
        ...(input.VoiceId != null && { VoiceId: input.VoiceId }),
    };
};
const serializeAws_restJson1VoiceTemplateRequest = (input, context) => {
    return {
        ...(input.Body != null && { Body: input.Body }),
        ...(input.DefaultSubstitutions != null && { DefaultSubstitutions: input.DefaultSubstitutions }),
        ...(input.LanguageCode != null && { LanguageCode: input.LanguageCode }),
        ...(input.TemplateDescription != null && { TemplateDescription: input.TemplateDescription }),
        ...(input.VoiceId != null && { VoiceId: input.VoiceId }),
        ...(input.tags != null && { tags: serializeAws_restJson1MapOf__string(input.tags, context) }),
    };
};
const serializeAws_restJson1WaitActivity = (input, context) => {
    return {
        ...(input.NextActivity != null && { NextActivity: input.NextActivity }),
        ...(input.WaitTime != null && { WaitTime: serializeAws_restJson1WaitTime(input.WaitTime, context) }),
    };
};
const serializeAws_restJson1WaitTime = (input, context) => {
    return {
        ...(input.WaitFor != null && { WaitFor: input.WaitFor }),
        ...(input.WaitUntil != null && { WaitUntil: input.WaitUntil }),
    };
};
const serializeAws_restJson1WriteApplicationSettingsRequest = (input, context) => {
    return {
        ...(input.CampaignHook != null && {
            CampaignHook: serializeAws_restJson1CampaignHook(input.CampaignHook, context),
        }),
        ...(input.CloudWatchMetricsEnabled != null && { CloudWatchMetricsEnabled: input.CloudWatchMetricsEnabled }),
        ...(input.EventTaggingEnabled != null && { EventTaggingEnabled: input.EventTaggingEnabled }),
        ...(input.Limits != null && { Limits: serializeAws_restJson1CampaignLimits(input.Limits, context) }),
        ...(input.QuietTime != null && { QuietTime: serializeAws_restJson1QuietTime(input.QuietTime, context) }),
    };
};
const serializeAws_restJson1WriteCampaignRequest = (input, context) => {
    return {
        ...(input.AdditionalTreatments != null && {
            AdditionalTreatments: serializeAws_restJson1ListOfWriteTreatmentResource(input.AdditionalTreatments, context),
        }),
        ...(input.CustomDeliveryConfiguration != null && {
            CustomDeliveryConfiguration: serializeAws_restJson1CustomDeliveryConfiguration(input.CustomDeliveryConfiguration, context),
        }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.HoldoutPercent != null && { HoldoutPercent: input.HoldoutPercent }),
        ...(input.Hook != null && { Hook: serializeAws_restJson1CampaignHook(input.Hook, context) }),
        ...(input.IsPaused != null && { IsPaused: input.IsPaused }),
        ...(input.Limits != null && { Limits: serializeAws_restJson1CampaignLimits(input.Limits, context) }),
        ...(input.MessageConfiguration != null && {
            MessageConfiguration: serializeAws_restJson1MessageConfiguration(input.MessageConfiguration, context),
        }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.Priority != null && { Priority: input.Priority }),
        ...(input.Schedule != null && { Schedule: serializeAws_restJson1Schedule(input.Schedule, context) }),
        ...(input.SegmentId != null && { SegmentId: input.SegmentId }),
        ...(input.SegmentVersion != null && { SegmentVersion: input.SegmentVersion }),
        ...(input.TemplateConfiguration != null && {
            TemplateConfiguration: serializeAws_restJson1TemplateConfiguration(input.TemplateConfiguration, context),
        }),
        ...(input.TreatmentDescription != null && { TreatmentDescription: input.TreatmentDescription }),
        ...(input.TreatmentName != null && { TreatmentName: input.TreatmentName }),
        ...(input.tags != null && { tags: serializeAws_restJson1MapOf__string(input.tags, context) }),
    };
};
const serializeAws_restJson1WriteEventStream = (input, context) => {
    return {
        ...(input.DestinationStreamArn != null && { DestinationStreamArn: input.DestinationStreamArn }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
    };
};
const serializeAws_restJson1WriteJourneyRequest = (input, context) => {
    return {
        ...(input.Activities != null && { Activities: serializeAws_restJson1MapOfActivity(input.Activities, context) }),
        ...(input.ClosedDays != null && { ClosedDays: serializeAws_restJson1ClosedDays(input.ClosedDays, context) }),
        ...(input.CreationDate != null && { CreationDate: input.CreationDate }),
        ...(input.JourneyChannelSettings != null && {
            JourneyChannelSettings: serializeAws_restJson1JourneyChannelSettings(input.JourneyChannelSettings, context),
        }),
        ...(input.LastModifiedDate != null && { LastModifiedDate: input.LastModifiedDate }),
        ...(input.Limits != null && { Limits: serializeAws_restJson1JourneyLimits(input.Limits, context) }),
        ...(input.LocalTime != null && { LocalTime: input.LocalTime }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.OpenHours != null && { OpenHours: serializeAws_restJson1OpenHours(input.OpenHours, context) }),
        ...(input.QuietTime != null && { QuietTime: serializeAws_restJson1QuietTime(input.QuietTime, context) }),
        ...(input.RefreshFrequency != null && { RefreshFrequency: input.RefreshFrequency }),
        ...(input.RefreshOnSegmentUpdate != null && { RefreshOnSegmentUpdate: input.RefreshOnSegmentUpdate }),
        ...(input.Schedule != null && { Schedule: serializeAws_restJson1JourneySchedule(input.Schedule, context) }),
        ...(input.SendingSchedule != null && { SendingSchedule: input.SendingSchedule }),
        ...(input.StartActivity != null && { StartActivity: input.StartActivity }),
        ...(input.StartCondition != null && {
            StartCondition: serializeAws_restJson1StartCondition(input.StartCondition, context),
        }),
        ...(input.State != null && { State: input.State }),
        ...(input.WaitForQuietTime != null && { WaitForQuietTime: input.WaitForQuietTime }),
    };
};
const serializeAws_restJson1WriteSegmentRequest = (input, context) => {
    return {
        ...(input.Dimensions != null && { Dimensions: serializeAws_restJson1SegmentDimensions(input.Dimensions, context) }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.SegmentGroups != null && {
            SegmentGroups: serializeAws_restJson1SegmentGroupList(input.SegmentGroups, context),
        }),
        ...(input.tags != null && { tags: serializeAws_restJson1MapOf__string(input.tags, context) }),
    };
};
const serializeAws_restJson1WriteTreatmentResource = (input, context) => {
    return {
        ...(input.CustomDeliveryConfiguration != null && {
            CustomDeliveryConfiguration: serializeAws_restJson1CustomDeliveryConfiguration(input.CustomDeliveryConfiguration, context),
        }),
        ...(input.MessageConfiguration != null && {
            MessageConfiguration: serializeAws_restJson1MessageConfiguration(input.MessageConfiguration, context),
        }),
        ...(input.Schedule != null && { Schedule: serializeAws_restJson1Schedule(input.Schedule, context) }),
        ...(input.SizePercent != null && { SizePercent: input.SizePercent }),
        ...(input.TemplateConfiguration != null && {
            TemplateConfiguration: serializeAws_restJson1TemplateConfiguration(input.TemplateConfiguration, context),
        }),
        ...(input.TreatmentDescription != null && { TreatmentDescription: input.TreatmentDescription }),
        ...(input.TreatmentName != null && { TreatmentName: input.TreatmentName }),
    };
};
const deserializeAws_restJson1ActivitiesResponse = (output, context) => {
    return {
        Item: output.Item != null ? deserializeAws_restJson1ListOfActivityResponse(output.Item, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_restJson1Activity = (output, context) => {
    return {
        CUSTOM: output.CUSTOM != null ? deserializeAws_restJson1CustomMessageActivity(output.CUSTOM, context) : undefined,
        ConditionalSplit: output.ConditionalSplit != null
            ? deserializeAws_restJson1ConditionalSplitActivity(output.ConditionalSplit, context)
            : undefined,
        ContactCenter: output.ContactCenter != null
            ? deserializeAws_restJson1ContactCenterActivity(output.ContactCenter, context)
            : undefined,
        Description: (0, smithy_client_1.expectString)(output.Description),
        EMAIL: output.EMAIL != null ? deserializeAws_restJson1EmailMessageActivity(output.EMAIL, context) : undefined,
        Holdout: output.Holdout != null ? deserializeAws_restJson1HoldoutActivity(output.Holdout, context) : undefined,
        MultiCondition: output.MultiCondition != null
            ? deserializeAws_restJson1MultiConditionalSplitActivity(output.MultiCondition, context)
            : undefined,
        PUSH: output.PUSH != null ? deserializeAws_restJson1PushMessageActivity(output.PUSH, context) : undefined,
        RandomSplit: output.RandomSplit != null ? deserializeAws_restJson1RandomSplitActivity(output.RandomSplit, context) : undefined,
        SMS: output.SMS != null ? deserializeAws_restJson1SMSMessageActivity(output.SMS, context) : undefined,
        Wait: output.Wait != null ? deserializeAws_restJson1WaitActivity(output.Wait, context) : undefined,
    };
};
const deserializeAws_restJson1ActivityResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        CampaignId: (0, smithy_client_1.expectString)(output.CampaignId),
        End: (0, smithy_client_1.expectString)(output.End),
        Id: (0, smithy_client_1.expectString)(output.Id),
        Result: (0, smithy_client_1.expectString)(output.Result),
        ScheduledStart: (0, smithy_client_1.expectString)(output.ScheduledStart),
        Start: (0, smithy_client_1.expectString)(output.Start),
        State: (0, smithy_client_1.expectString)(output.State),
        SuccessfulEndpointCount: (0, smithy_client_1.expectInt32)(output.SuccessfulEndpointCount),
        TimezonesCompletedCount: (0, smithy_client_1.expectInt32)(output.TimezonesCompletedCount),
        TimezonesTotalCount: (0, smithy_client_1.expectInt32)(output.TimezonesTotalCount),
        TotalEndpointCount: (0, smithy_client_1.expectInt32)(output.TotalEndpointCount),
        TreatmentId: (0, smithy_client_1.expectString)(output.TreatmentId),
    };
};
const deserializeAws_restJson1ADMChannelResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        HasCredential: (0, smithy_client_1.expectBoolean)(output.HasCredential),
        Id: (0, smithy_client_1.expectString)(output.Id),
        IsArchived: (0, smithy_client_1.expectBoolean)(output.IsArchived),
        LastModifiedBy: (0, smithy_client_1.expectString)(output.LastModifiedBy),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        Platform: (0, smithy_client_1.expectString)(output.Platform),
        Version: (0, smithy_client_1.expectInt32)(output.Version),
    };
};
const deserializeAws_restJson1AndroidPushNotificationTemplate = (output, context) => {
    return {
        Action: (0, smithy_client_1.expectString)(output.Action),
        Body: (0, smithy_client_1.expectString)(output.Body),
        ImageIconUrl: (0, smithy_client_1.expectString)(output.ImageIconUrl),
        ImageUrl: (0, smithy_client_1.expectString)(output.ImageUrl),
        RawContent: (0, smithy_client_1.expectString)(output.RawContent),
        SmallImageIconUrl: (0, smithy_client_1.expectString)(output.SmallImageIconUrl),
        Sound: (0, smithy_client_1.expectString)(output.Sound),
        Title: (0, smithy_client_1.expectString)(output.Title),
        Url: (0, smithy_client_1.expectString)(output.Url),
    };
};
const deserializeAws_restJson1APNSChannelResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        DefaultAuthenticationMethod: (0, smithy_client_1.expectString)(output.DefaultAuthenticationMethod),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        HasCredential: (0, smithy_client_1.expectBoolean)(output.HasCredential),
        HasTokenKey: (0, smithy_client_1.expectBoolean)(output.HasTokenKey),
        Id: (0, smithy_client_1.expectString)(output.Id),
        IsArchived: (0, smithy_client_1.expectBoolean)(output.IsArchived),
        LastModifiedBy: (0, smithy_client_1.expectString)(output.LastModifiedBy),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        Platform: (0, smithy_client_1.expectString)(output.Platform),
        Version: (0, smithy_client_1.expectInt32)(output.Version),
    };
};
const deserializeAws_restJson1APNSPushNotificationTemplate = (output, context) => {
    return {
        Action: (0, smithy_client_1.expectString)(output.Action),
        Body: (0, smithy_client_1.expectString)(output.Body),
        MediaUrl: (0, smithy_client_1.expectString)(output.MediaUrl),
        RawContent: (0, smithy_client_1.expectString)(output.RawContent),
        Sound: (0, smithy_client_1.expectString)(output.Sound),
        Title: (0, smithy_client_1.expectString)(output.Title),
        Url: (0, smithy_client_1.expectString)(output.Url),
    };
};
const deserializeAws_restJson1APNSSandboxChannelResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        DefaultAuthenticationMethod: (0, smithy_client_1.expectString)(output.DefaultAuthenticationMethod),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        HasCredential: (0, smithy_client_1.expectBoolean)(output.HasCredential),
        HasTokenKey: (0, smithy_client_1.expectBoolean)(output.HasTokenKey),
        Id: (0, smithy_client_1.expectString)(output.Id),
        IsArchived: (0, smithy_client_1.expectBoolean)(output.IsArchived),
        LastModifiedBy: (0, smithy_client_1.expectString)(output.LastModifiedBy),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        Platform: (0, smithy_client_1.expectString)(output.Platform),
        Version: (0, smithy_client_1.expectInt32)(output.Version),
    };
};
const deserializeAws_restJson1APNSVoipChannelResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        DefaultAuthenticationMethod: (0, smithy_client_1.expectString)(output.DefaultAuthenticationMethod),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        HasCredential: (0, smithy_client_1.expectBoolean)(output.HasCredential),
        HasTokenKey: (0, smithy_client_1.expectBoolean)(output.HasTokenKey),
        Id: (0, smithy_client_1.expectString)(output.Id),
        IsArchived: (0, smithy_client_1.expectBoolean)(output.IsArchived),
        LastModifiedBy: (0, smithy_client_1.expectString)(output.LastModifiedBy),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        Platform: (0, smithy_client_1.expectString)(output.Platform),
        Version: (0, smithy_client_1.expectInt32)(output.Version),
    };
};
const deserializeAws_restJson1APNSVoipSandboxChannelResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        DefaultAuthenticationMethod: (0, smithy_client_1.expectString)(output.DefaultAuthenticationMethod),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        HasCredential: (0, smithy_client_1.expectBoolean)(output.HasCredential),
        HasTokenKey: (0, smithy_client_1.expectBoolean)(output.HasTokenKey),
        Id: (0, smithy_client_1.expectString)(output.Id),
        IsArchived: (0, smithy_client_1.expectBoolean)(output.IsArchived),
        LastModifiedBy: (0, smithy_client_1.expectString)(output.LastModifiedBy),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        Platform: (0, smithy_client_1.expectString)(output.Platform),
        Version: (0, smithy_client_1.expectInt32)(output.Version),
    };
};
const deserializeAws_restJson1ApplicationDateRangeKpiResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        EndTime: output.EndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output.EndTime)) : undefined,
        KpiName: (0, smithy_client_1.expectString)(output.KpiName),
        KpiResult: output.KpiResult != null ? deserializeAws_restJson1BaseKpiResult(output.KpiResult, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        StartTime: output.StartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output.StartTime)) : undefined,
    };
};
const deserializeAws_restJson1ApplicationResponse = (output, context) => {
    return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        Id: (0, smithy_client_1.expectString)(output.Id),
        Name: (0, smithy_client_1.expectString)(output.Name),
        tags: output.tags != null ? deserializeAws_restJson1MapOf__string(output.tags, context) : undefined,
    };
};
const deserializeAws_restJson1ApplicationSettingsResource = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        CampaignHook: output.CampaignHook != null ? deserializeAws_restJson1CampaignHook(output.CampaignHook, context) : undefined,
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        Limits: output.Limits != null ? deserializeAws_restJson1CampaignLimits(output.Limits, context) : undefined,
        QuietTime: output.QuietTime != null ? deserializeAws_restJson1QuietTime(output.QuietTime, context) : undefined,
    };
};
const deserializeAws_restJson1ApplicationsResponse = (output, context) => {
    return {
        Item: output.Item != null ? deserializeAws_restJson1ListOfApplicationResponse(output.Item, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_restJson1AttributeDimension = (output, context) => {
    return {
        AttributeType: (0, smithy_client_1.expectString)(output.AttributeType),
        Values: output.Values != null ? deserializeAws_restJson1ListOf__string(output.Values, context) : undefined,
    };
};
const deserializeAws_restJson1AttributesResource = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        AttributeType: (0, smithy_client_1.expectString)(output.AttributeType),
        Attributes: output.Attributes != null ? deserializeAws_restJson1ListOf__string(output.Attributes, context) : undefined,
    };
};
const deserializeAws_restJson1BaiduChannelResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        Credential: (0, smithy_client_1.expectString)(output.Credential),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        HasCredential: (0, smithy_client_1.expectBoolean)(output.HasCredential),
        Id: (0, smithy_client_1.expectString)(output.Id),
        IsArchived: (0, smithy_client_1.expectBoolean)(output.IsArchived),
        LastModifiedBy: (0, smithy_client_1.expectString)(output.LastModifiedBy),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        Platform: (0, smithy_client_1.expectString)(output.Platform),
        Version: (0, smithy_client_1.expectInt32)(output.Version),
    };
};
const deserializeAws_restJson1BaseKpiResult = (output, context) => {
    return {
        Rows: output.Rows != null ? deserializeAws_restJson1ListOfResultRow(output.Rows, context) : undefined,
    };
};
const deserializeAws_restJson1CampaignCustomMessage = (output, context) => {
    return {
        Data: (0, smithy_client_1.expectString)(output.Data),
    };
};
const deserializeAws_restJson1CampaignDateRangeKpiResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        CampaignId: (0, smithy_client_1.expectString)(output.CampaignId),
        EndTime: output.EndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output.EndTime)) : undefined,
        KpiName: (0, smithy_client_1.expectString)(output.KpiName),
        KpiResult: output.KpiResult != null ? deserializeAws_restJson1BaseKpiResult(output.KpiResult, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        StartTime: output.StartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output.StartTime)) : undefined,
    };
};
const deserializeAws_restJson1CampaignEmailMessage = (output, context) => {
    return {
        Body: (0, smithy_client_1.expectString)(output.Body),
        FromAddress: (0, smithy_client_1.expectString)(output.FromAddress),
        HtmlBody: (0, smithy_client_1.expectString)(output.HtmlBody),
        Title: (0, smithy_client_1.expectString)(output.Title),
    };
};
const deserializeAws_restJson1CampaignEventFilter = (output, context) => {
    return {
        Dimensions: output.Dimensions != null ? deserializeAws_restJson1EventDimensions(output.Dimensions, context) : undefined,
        FilterType: (0, smithy_client_1.expectString)(output.FilterType),
    };
};
const deserializeAws_restJson1CampaignHook = (output, context) => {
    return {
        LambdaFunctionName: (0, smithy_client_1.expectString)(output.LambdaFunctionName),
        Mode: (0, smithy_client_1.expectString)(output.Mode),
        WebUrl: (0, smithy_client_1.expectString)(output.WebUrl),
    };
};
const deserializeAws_restJson1CampaignInAppMessage = (output, context) => {
    return {
        Body: (0, smithy_client_1.expectString)(output.Body),
        Content: output.Content != null ? deserializeAws_restJson1ListOfInAppMessageContent(output.Content, context) : undefined,
        CustomConfig: output.CustomConfig != null ? deserializeAws_restJson1MapOf__string(output.CustomConfig, context) : undefined,
        Layout: (0, smithy_client_1.expectString)(output.Layout),
    };
};
const deserializeAws_restJson1CampaignLimits = (output, context) => {
    return {
        Daily: (0, smithy_client_1.expectInt32)(output.Daily),
        MaximumDuration: (0, smithy_client_1.expectInt32)(output.MaximumDuration),
        MessagesPerSecond: (0, smithy_client_1.expectInt32)(output.MessagesPerSecond),
        Session: (0, smithy_client_1.expectInt32)(output.Session),
        Total: (0, smithy_client_1.expectInt32)(output.Total),
    };
};
const deserializeAws_restJson1CampaignResponse = (output, context) => {
    return {
        AdditionalTreatments: output.AdditionalTreatments != null
            ? deserializeAws_restJson1ListOfTreatmentResource(output.AdditionalTreatments, context)
            : undefined,
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        CustomDeliveryConfiguration: output.CustomDeliveryConfiguration != null
            ? deserializeAws_restJson1CustomDeliveryConfiguration(output.CustomDeliveryConfiguration, context)
            : undefined,
        DefaultState: output.DefaultState != null ? deserializeAws_restJson1CampaignState(output.DefaultState, context) : undefined,
        Description: (0, smithy_client_1.expectString)(output.Description),
        HoldoutPercent: (0, smithy_client_1.expectInt32)(output.HoldoutPercent),
        Hook: output.Hook != null ? deserializeAws_restJson1CampaignHook(output.Hook, context) : undefined,
        Id: (0, smithy_client_1.expectString)(output.Id),
        IsPaused: (0, smithy_client_1.expectBoolean)(output.IsPaused),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        Limits: output.Limits != null ? deserializeAws_restJson1CampaignLimits(output.Limits, context) : undefined,
        MessageConfiguration: output.MessageConfiguration != null
            ? deserializeAws_restJson1MessageConfiguration(output.MessageConfiguration, context)
            : undefined,
        Name: (0, smithy_client_1.expectString)(output.Name),
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        Schedule: output.Schedule != null ? deserializeAws_restJson1Schedule(output.Schedule, context) : undefined,
        SegmentId: (0, smithy_client_1.expectString)(output.SegmentId),
        SegmentVersion: (0, smithy_client_1.expectInt32)(output.SegmentVersion),
        State: output.State != null ? deserializeAws_restJson1CampaignState(output.State, context) : undefined,
        TemplateConfiguration: output.TemplateConfiguration != null
            ? deserializeAws_restJson1TemplateConfiguration(output.TemplateConfiguration, context)
            : undefined,
        TreatmentDescription: (0, smithy_client_1.expectString)(output.TreatmentDescription),
        TreatmentName: (0, smithy_client_1.expectString)(output.TreatmentName),
        Version: (0, smithy_client_1.expectInt32)(output.Version),
        tags: output.tags != null ? deserializeAws_restJson1MapOf__string(output.tags, context) : undefined,
    };
};
const deserializeAws_restJson1CampaignSmsMessage = (output, context) => {
    return {
        Body: (0, smithy_client_1.expectString)(output.Body),
        EntityId: (0, smithy_client_1.expectString)(output.EntityId),
        MessageType: (0, smithy_client_1.expectString)(output.MessageType),
        OriginationNumber: (0, smithy_client_1.expectString)(output.OriginationNumber),
        SenderId: (0, smithy_client_1.expectString)(output.SenderId),
        TemplateId: (0, smithy_client_1.expectString)(output.TemplateId),
    };
};
const deserializeAws_restJson1CampaignsResponse = (output, context) => {
    return {
        Item: output.Item != null ? deserializeAws_restJson1ListOfCampaignResponse(output.Item, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_restJson1CampaignState = (output, context) => {
    return {
        CampaignStatus: (0, smithy_client_1.expectString)(output.CampaignStatus),
    };
};
const deserializeAws_restJson1ChannelResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        HasCredential: (0, smithy_client_1.expectBoolean)(output.HasCredential),
        Id: (0, smithy_client_1.expectString)(output.Id),
        IsArchived: (0, smithy_client_1.expectBoolean)(output.IsArchived),
        LastModifiedBy: (0, smithy_client_1.expectString)(output.LastModifiedBy),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        Version: (0, smithy_client_1.expectInt32)(output.Version),
    };
};
const deserializeAws_restJson1ChannelsResponse = (output, context) => {
    return {
        Channels: output.Channels != null ? deserializeAws_restJson1MapOfChannelResponse(output.Channels, context) : undefined,
    };
};
const deserializeAws_restJson1ClosedDays = (output, context) => {
    return {
        CUSTOM: output.CUSTOM != null ? deserializeAws_restJson1ListOfClosedDaysRules(output.CUSTOM, context) : undefined,
        EMAIL: output.EMAIL != null ? deserializeAws_restJson1ListOfClosedDaysRules(output.EMAIL, context) : undefined,
        PUSH: output.PUSH != null ? deserializeAws_restJson1ListOfClosedDaysRules(output.PUSH, context) : undefined,
        SMS: output.SMS != null ? deserializeAws_restJson1ListOfClosedDaysRules(output.SMS, context) : undefined,
        VOICE: output.VOICE != null ? deserializeAws_restJson1ListOfClosedDaysRules(output.VOICE, context) : undefined,
    };
};
const deserializeAws_restJson1ClosedDaysRule = (output, context) => {
    return {
        EndDateTime: (0, smithy_client_1.expectString)(output.EndDateTime),
        Name: (0, smithy_client_1.expectString)(output.Name),
        StartDateTime: (0, smithy_client_1.expectString)(output.StartDateTime),
    };
};
const deserializeAws_restJson1Condition = (output, context) => {
    return {
        Conditions: output.Conditions != null ? deserializeAws_restJson1ListOfSimpleCondition(output.Conditions, context) : undefined,
        Operator: (0, smithy_client_1.expectString)(output.Operator),
    };
};
const deserializeAws_restJson1ConditionalSplitActivity = (output, context) => {
    return {
        Condition: output.Condition != null ? deserializeAws_restJson1Condition(output.Condition, context) : undefined,
        EvaluationWaitTime: output.EvaluationWaitTime != null
            ? deserializeAws_restJson1WaitTime(output.EvaluationWaitTime, context)
            : undefined,
        FalseActivity: (0, smithy_client_1.expectString)(output.FalseActivity),
        TrueActivity: (0, smithy_client_1.expectString)(output.TrueActivity),
    };
};
const deserializeAws_restJson1ContactCenterActivity = (output, context) => {
    return {
        NextActivity: (0, smithy_client_1.expectString)(output.NextActivity),
    };
};
const deserializeAws_restJson1CreateTemplateMessageBody = (output, context) => {
    return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        Message: (0, smithy_client_1.expectString)(output.Message),
        RequestID: (0, smithy_client_1.expectString)(output.RequestID),
    };
};
const deserializeAws_restJson1CustomDeliveryConfiguration = (output, context) => {
    return {
        DeliveryUri: (0, smithy_client_1.expectString)(output.DeliveryUri),
        EndpointTypes: output.EndpointTypes != null
            ? deserializeAws_restJson1ListOf__EndpointTypesElement(output.EndpointTypes, context)
            : undefined,
    };
};
const deserializeAws_restJson1CustomMessageActivity = (output, context) => {
    return {
        DeliveryUri: (0, smithy_client_1.expectString)(output.DeliveryUri),
        EndpointTypes: output.EndpointTypes != null
            ? deserializeAws_restJson1ListOf__EndpointTypesElement(output.EndpointTypes, context)
            : undefined,
        MessageConfig: output.MessageConfig != null
            ? deserializeAws_restJson1JourneyCustomMessage(output.MessageConfig, context)
            : undefined,
        NextActivity: (0, smithy_client_1.expectString)(output.NextActivity),
        TemplateName: (0, smithy_client_1.expectString)(output.TemplateName),
        TemplateVersion: (0, smithy_client_1.expectString)(output.TemplateVersion),
    };
};
const deserializeAws_restJson1DefaultButtonConfiguration = (output, context) => {
    return {
        BackgroundColor: (0, smithy_client_1.expectString)(output.BackgroundColor),
        BorderRadius: (0, smithy_client_1.expectInt32)(output.BorderRadius),
        ButtonAction: (0, smithy_client_1.expectString)(output.ButtonAction),
        Link: (0, smithy_client_1.expectString)(output.Link),
        Text: (0, smithy_client_1.expectString)(output.Text),
        TextColor: (0, smithy_client_1.expectString)(output.TextColor),
    };
};
const deserializeAws_restJson1DefaultPushNotificationTemplate = (output, context) => {
    return {
        Action: (0, smithy_client_1.expectString)(output.Action),
        Body: (0, smithy_client_1.expectString)(output.Body),
        Sound: (0, smithy_client_1.expectString)(output.Sound),
        Title: (0, smithy_client_1.expectString)(output.Title),
        Url: (0, smithy_client_1.expectString)(output.Url),
    };
};
const deserializeAws_restJson1EmailChannelResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        ConfigurationSet: (0, smithy_client_1.expectString)(output.ConfigurationSet),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        FromAddress: (0, smithy_client_1.expectString)(output.FromAddress),
        HasCredential: (0, smithy_client_1.expectBoolean)(output.HasCredential),
        Id: (0, smithy_client_1.expectString)(output.Id),
        Identity: (0, smithy_client_1.expectString)(output.Identity),
        IsArchived: (0, smithy_client_1.expectBoolean)(output.IsArchived),
        LastModifiedBy: (0, smithy_client_1.expectString)(output.LastModifiedBy),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        MessagesPerSecond: (0, smithy_client_1.expectInt32)(output.MessagesPerSecond),
        Platform: (0, smithy_client_1.expectString)(output.Platform),
        RoleArn: (0, smithy_client_1.expectString)(output.RoleArn),
        Version: (0, smithy_client_1.expectInt32)(output.Version),
    };
};
const deserializeAws_restJson1EmailMessageActivity = (output, context) => {
    return {
        MessageConfig: output.MessageConfig != null
            ? deserializeAws_restJson1JourneyEmailMessage(output.MessageConfig, context)
            : undefined,
        NextActivity: (0, smithy_client_1.expectString)(output.NextActivity),
        TemplateName: (0, smithy_client_1.expectString)(output.TemplateName),
        TemplateVersion: (0, smithy_client_1.expectString)(output.TemplateVersion),
    };
};
const deserializeAws_restJson1EmailTemplateResponse = (output, context) => {
    return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        DefaultSubstitutions: (0, smithy_client_1.expectString)(output.DefaultSubstitutions),
        HtmlPart: (0, smithy_client_1.expectString)(output.HtmlPart),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        RecommenderId: (0, smithy_client_1.expectString)(output.RecommenderId),
        Subject: (0, smithy_client_1.expectString)(output.Subject),
        TemplateDescription: (0, smithy_client_1.expectString)(output.TemplateDescription),
        TemplateName: (0, smithy_client_1.expectString)(output.TemplateName),
        TemplateType: (0, smithy_client_1.expectString)(output.TemplateType),
        TextPart: (0, smithy_client_1.expectString)(output.TextPart),
        Version: (0, smithy_client_1.expectString)(output.Version),
        tags: output.tags != null ? deserializeAws_restJson1MapOf__string(output.tags, context) : undefined,
    };
};
const deserializeAws_restJson1EndpointDemographic = (output, context) => {
    return {
        AppVersion: (0, smithy_client_1.expectString)(output.AppVersion),
        Locale: (0, smithy_client_1.expectString)(output.Locale),
        Make: (0, smithy_client_1.expectString)(output.Make),
        Model: (0, smithy_client_1.expectString)(output.Model),
        ModelVersion: (0, smithy_client_1.expectString)(output.ModelVersion),
        Platform: (0, smithy_client_1.expectString)(output.Platform),
        PlatformVersion: (0, smithy_client_1.expectString)(output.PlatformVersion),
        Timezone: (0, smithy_client_1.expectString)(output.Timezone),
    };
};
const deserializeAws_restJson1EndpointItemResponse = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        StatusCode: (0, smithy_client_1.expectInt32)(output.StatusCode),
    };
};
const deserializeAws_restJson1EndpointLocation = (output, context) => {
    return {
        City: (0, smithy_client_1.expectString)(output.City),
        Country: (0, smithy_client_1.expectString)(output.Country),
        Latitude: (0, smithy_client_1.limitedParseDouble)(output.Latitude),
        Longitude: (0, smithy_client_1.limitedParseDouble)(output.Longitude),
        PostalCode: (0, smithy_client_1.expectString)(output.PostalCode),
        Region: (0, smithy_client_1.expectString)(output.Region),
    };
};
const deserializeAws_restJson1EndpointMessageResult = (output, context) => {
    return {
        Address: (0, smithy_client_1.expectString)(output.Address),
        DeliveryStatus: (0, smithy_client_1.expectString)(output.DeliveryStatus),
        MessageId: (0, smithy_client_1.expectString)(output.MessageId),
        StatusCode: (0, smithy_client_1.expectInt32)(output.StatusCode),
        StatusMessage: (0, smithy_client_1.expectString)(output.StatusMessage),
        UpdatedToken: (0, smithy_client_1.expectString)(output.UpdatedToken),
    };
};
const deserializeAws_restJson1EndpointResponse = (output, context) => {
    return {
        Address: (0, smithy_client_1.expectString)(output.Address),
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        Attributes: output.Attributes != null ? deserializeAws_restJson1MapOfListOf__string(output.Attributes, context) : undefined,
        ChannelType: (0, smithy_client_1.expectString)(output.ChannelType),
        CohortId: (0, smithy_client_1.expectString)(output.CohortId),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        Demographic: output.Demographic != null ? deserializeAws_restJson1EndpointDemographic(output.Demographic, context) : undefined,
        EffectiveDate: (0, smithy_client_1.expectString)(output.EffectiveDate),
        EndpointStatus: (0, smithy_client_1.expectString)(output.EndpointStatus),
        Id: (0, smithy_client_1.expectString)(output.Id),
        Location: output.Location != null ? deserializeAws_restJson1EndpointLocation(output.Location, context) : undefined,
        Metrics: output.Metrics != null ? deserializeAws_restJson1MapOf__double(output.Metrics, context) : undefined,
        OptOut: (0, smithy_client_1.expectString)(output.OptOut),
        RequestId: (0, smithy_client_1.expectString)(output.RequestId),
        User: output.User != null ? deserializeAws_restJson1EndpointUser(output.User, context) : undefined,
    };
};
const deserializeAws_restJson1EndpointsResponse = (output, context) => {
    return {
        Item: output.Item != null ? deserializeAws_restJson1ListOfEndpointResponse(output.Item, context) : undefined,
    };
};
const deserializeAws_restJson1EndpointUser = (output, context) => {
    return {
        UserAttributes: output.UserAttributes != null
            ? deserializeAws_restJson1MapOfListOf__string(output.UserAttributes, context)
            : undefined,
        UserId: (0, smithy_client_1.expectString)(output.UserId),
    };
};
const deserializeAws_restJson1EventCondition = (output, context) => {
    return {
        Dimensions: output.Dimensions != null ? deserializeAws_restJson1EventDimensions(output.Dimensions, context) : undefined,
        MessageActivity: (0, smithy_client_1.expectString)(output.MessageActivity),
    };
};
const deserializeAws_restJson1EventDimensions = (output, context) => {
    return {
        Attributes: output.Attributes != null
            ? deserializeAws_restJson1MapOfAttributeDimension(output.Attributes, context)
            : undefined,
        EventType: output.EventType != null ? deserializeAws_restJson1SetDimension(output.EventType, context) : undefined,
        Metrics: output.Metrics != null ? deserializeAws_restJson1MapOfMetricDimension(output.Metrics, context) : undefined,
    };
};
const deserializeAws_restJson1EventFilter = (output, context) => {
    return {
        Dimensions: output.Dimensions != null ? deserializeAws_restJson1EventDimensions(output.Dimensions, context) : undefined,
        FilterType: (0, smithy_client_1.expectString)(output.FilterType),
    };
};
const deserializeAws_restJson1EventItemResponse = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        StatusCode: (0, smithy_client_1.expectInt32)(output.StatusCode),
    };
};
const deserializeAws_restJson1EventsResponse = (output, context) => {
    return {
        Results: output.Results != null ? deserializeAws_restJson1MapOfItemResponse(output.Results, context) : undefined,
    };
};
const deserializeAws_restJson1EventStartCondition = (output, context) => {
    return {
        EventFilter: output.EventFilter != null ? deserializeAws_restJson1EventFilter(output.EventFilter, context) : undefined,
        SegmentId: (0, smithy_client_1.expectString)(output.SegmentId),
    };
};
const deserializeAws_restJson1EventStream = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        DestinationStreamArn: (0, smithy_client_1.expectString)(output.DestinationStreamArn),
        ExternalId: (0, smithy_client_1.expectString)(output.ExternalId),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        LastUpdatedBy: (0, smithy_client_1.expectString)(output.LastUpdatedBy),
        RoleArn: (0, smithy_client_1.expectString)(output.RoleArn),
    };
};
const deserializeAws_restJson1ExportJobResource = (output, context) => {
    return {
        RoleArn: (0, smithy_client_1.expectString)(output.RoleArn),
        S3UrlPrefix: (0, smithy_client_1.expectString)(output.S3UrlPrefix),
        SegmentId: (0, smithy_client_1.expectString)(output.SegmentId),
        SegmentVersion: (0, smithy_client_1.expectInt32)(output.SegmentVersion),
    };
};
const deserializeAws_restJson1ExportJobResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        CompletedPieces: (0, smithy_client_1.expectInt32)(output.CompletedPieces),
        CompletionDate: (0, smithy_client_1.expectString)(output.CompletionDate),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        Definition: output.Definition != null ? deserializeAws_restJson1ExportJobResource(output.Definition, context) : undefined,
        FailedPieces: (0, smithy_client_1.expectInt32)(output.FailedPieces),
        Failures: output.Failures != null ? deserializeAws_restJson1ListOf__string(output.Failures, context) : undefined,
        Id: (0, smithy_client_1.expectString)(output.Id),
        JobStatus: (0, smithy_client_1.expectString)(output.JobStatus),
        TotalFailures: (0, smithy_client_1.expectInt32)(output.TotalFailures),
        TotalPieces: (0, smithy_client_1.expectInt32)(output.TotalPieces),
        TotalProcessed: (0, smithy_client_1.expectInt32)(output.TotalProcessed),
        Type: (0, smithy_client_1.expectString)(output.Type),
    };
};
const deserializeAws_restJson1ExportJobsResponse = (output, context) => {
    return {
        Item: output.Item != null ? deserializeAws_restJson1ListOfExportJobResponse(output.Item, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_restJson1GCMChannelResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        Credential: (0, smithy_client_1.expectString)(output.Credential),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        HasCredential: (0, smithy_client_1.expectBoolean)(output.HasCredential),
        Id: (0, smithy_client_1.expectString)(output.Id),
        IsArchived: (0, smithy_client_1.expectBoolean)(output.IsArchived),
        LastModifiedBy: (0, smithy_client_1.expectString)(output.LastModifiedBy),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        Platform: (0, smithy_client_1.expectString)(output.Platform),
        Version: (0, smithy_client_1.expectInt32)(output.Version),
    };
};
const deserializeAws_restJson1GPSCoordinates = (output, context) => {
    return {
        Latitude: (0, smithy_client_1.limitedParseDouble)(output.Latitude),
        Longitude: (0, smithy_client_1.limitedParseDouble)(output.Longitude),
    };
};
const deserializeAws_restJson1GPSPointDimension = (output, context) => {
    return {
        Coordinates: output.Coordinates != null ? deserializeAws_restJson1GPSCoordinates(output.Coordinates, context) : undefined,
        RangeInKilometers: (0, smithy_client_1.limitedParseDouble)(output.RangeInKilometers),
    };
};
const deserializeAws_restJson1HoldoutActivity = (output, context) => {
    return {
        NextActivity: (0, smithy_client_1.expectString)(output.NextActivity),
        Percentage: (0, smithy_client_1.expectInt32)(output.Percentage),
    };
};
const deserializeAws_restJson1ImportJobResource = (output, context) => {
    return {
        DefineSegment: (0, smithy_client_1.expectBoolean)(output.DefineSegment),
        ExternalId: (0, smithy_client_1.expectString)(output.ExternalId),
        Format: (0, smithy_client_1.expectString)(output.Format),
        RegisterEndpoints: (0, smithy_client_1.expectBoolean)(output.RegisterEndpoints),
        RoleArn: (0, smithy_client_1.expectString)(output.RoleArn),
        S3Url: (0, smithy_client_1.expectString)(output.S3Url),
        SegmentId: (0, smithy_client_1.expectString)(output.SegmentId),
        SegmentName: (0, smithy_client_1.expectString)(output.SegmentName),
    };
};
const deserializeAws_restJson1ImportJobResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        CompletedPieces: (0, smithy_client_1.expectInt32)(output.CompletedPieces),
        CompletionDate: (0, smithy_client_1.expectString)(output.CompletionDate),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        Definition: output.Definition != null ? deserializeAws_restJson1ImportJobResource(output.Definition, context) : undefined,
        FailedPieces: (0, smithy_client_1.expectInt32)(output.FailedPieces),
        Failures: output.Failures != null ? deserializeAws_restJson1ListOf__string(output.Failures, context) : undefined,
        Id: (0, smithy_client_1.expectString)(output.Id),
        JobStatus: (0, smithy_client_1.expectString)(output.JobStatus),
        TotalFailures: (0, smithy_client_1.expectInt32)(output.TotalFailures),
        TotalPieces: (0, smithy_client_1.expectInt32)(output.TotalPieces),
        TotalProcessed: (0, smithy_client_1.expectInt32)(output.TotalProcessed),
        Type: (0, smithy_client_1.expectString)(output.Type),
    };
};
const deserializeAws_restJson1ImportJobsResponse = (output, context) => {
    return {
        Item: output.Item != null ? deserializeAws_restJson1ListOfImportJobResponse(output.Item, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_restJson1InAppCampaignSchedule = (output, context) => {
    return {
        EndDate: (0, smithy_client_1.expectString)(output.EndDate),
        EventFilter: output.EventFilter != null ? deserializeAws_restJson1CampaignEventFilter(output.EventFilter, context) : undefined,
        QuietTime: output.QuietTime != null ? deserializeAws_restJson1QuietTime(output.QuietTime, context) : undefined,
    };
};
const deserializeAws_restJson1InAppMessage = (output, context) => {
    return {
        Content: output.Content != null ? deserializeAws_restJson1ListOfInAppMessageContent(output.Content, context) : undefined,
        CustomConfig: output.CustomConfig != null ? deserializeAws_restJson1MapOf__string(output.CustomConfig, context) : undefined,
        Layout: (0, smithy_client_1.expectString)(output.Layout),
    };
};
const deserializeAws_restJson1InAppMessageBodyConfig = (output, context) => {
    return {
        Alignment: (0, smithy_client_1.expectString)(output.Alignment),
        Body: (0, smithy_client_1.expectString)(output.Body),
        TextColor: (0, smithy_client_1.expectString)(output.TextColor),
    };
};
const deserializeAws_restJson1InAppMessageButton = (output, context) => {
    return {
        Android: output.Android != null ? deserializeAws_restJson1OverrideButtonConfiguration(output.Android, context) : undefined,
        DefaultConfig: output.DefaultConfig != null
            ? deserializeAws_restJson1DefaultButtonConfiguration(output.DefaultConfig, context)
            : undefined,
        IOS: output.IOS != null ? deserializeAws_restJson1OverrideButtonConfiguration(output.IOS, context) : undefined,
        Web: output.Web != null ? deserializeAws_restJson1OverrideButtonConfiguration(output.Web, context) : undefined,
    };
};
const deserializeAws_restJson1InAppMessageCampaign = (output, context) => {
    return {
        CampaignId: (0, smithy_client_1.expectString)(output.CampaignId),
        DailyCap: (0, smithy_client_1.expectInt32)(output.DailyCap),
        InAppMessage: output.InAppMessage != null ? deserializeAws_restJson1InAppMessage(output.InAppMessage, context) : undefined,
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        Schedule: output.Schedule != null ? deserializeAws_restJson1InAppCampaignSchedule(output.Schedule, context) : undefined,
        SessionCap: (0, smithy_client_1.expectInt32)(output.SessionCap),
        TotalCap: (0, smithy_client_1.expectInt32)(output.TotalCap),
        TreatmentId: (0, smithy_client_1.expectString)(output.TreatmentId),
    };
};
const deserializeAws_restJson1InAppMessageContent = (output, context) => {
    return {
        BackgroundColor: (0, smithy_client_1.expectString)(output.BackgroundColor),
        BodyConfig: output.BodyConfig != null
            ? deserializeAws_restJson1InAppMessageBodyConfig(output.BodyConfig, context)
            : undefined,
        HeaderConfig: output.HeaderConfig != null
            ? deserializeAws_restJson1InAppMessageHeaderConfig(output.HeaderConfig, context)
            : undefined,
        ImageUrl: (0, smithy_client_1.expectString)(output.ImageUrl),
        PrimaryBtn: output.PrimaryBtn != null ? deserializeAws_restJson1InAppMessageButton(output.PrimaryBtn, context) : undefined,
        SecondaryBtn: output.SecondaryBtn != null
            ? deserializeAws_restJson1InAppMessageButton(output.SecondaryBtn, context)
            : undefined,
    };
};
const deserializeAws_restJson1InAppMessageHeaderConfig = (output, context) => {
    return {
        Alignment: (0, smithy_client_1.expectString)(output.Alignment),
        Header: (0, smithy_client_1.expectString)(output.Header),
        TextColor: (0, smithy_client_1.expectString)(output.TextColor),
    };
};
const deserializeAws_restJson1InAppMessagesResponse = (output, context) => {
    return {
        InAppMessageCampaigns: output.InAppMessageCampaigns != null
            ? deserializeAws_restJson1ListOfInAppMessageCampaign(output.InAppMessageCampaigns, context)
            : undefined,
    };
};
const deserializeAws_restJson1InAppTemplateResponse = (output, context) => {
    return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        Content: output.Content != null ? deserializeAws_restJson1ListOfInAppMessageContent(output.Content, context) : undefined,
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        CustomConfig: output.CustomConfig != null ? deserializeAws_restJson1MapOf__string(output.CustomConfig, context) : undefined,
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        Layout: (0, smithy_client_1.expectString)(output.Layout),
        TemplateDescription: (0, smithy_client_1.expectString)(output.TemplateDescription),
        TemplateName: (0, smithy_client_1.expectString)(output.TemplateName),
        TemplateType: (0, smithy_client_1.expectString)(output.TemplateType),
        Version: (0, smithy_client_1.expectString)(output.Version),
        tags: output.tags != null ? deserializeAws_restJson1MapOf__string(output.tags, context) : undefined,
    };
};
const deserializeAws_restJson1ItemResponse = (output, context) => {
    return {
        EndpointItemResponse: output.EndpointItemResponse != null
            ? deserializeAws_restJson1EndpointItemResponse(output.EndpointItemResponse, context)
            : undefined,
        EventsItemResponse: output.EventsItemResponse != null
            ? deserializeAws_restJson1MapOfEventItemResponse(output.EventsItemResponse, context)
            : undefined,
    };
};
const deserializeAws_restJson1JourneyChannelSettings = (output, context) => {
    return {
        ConnectCampaignArn: (0, smithy_client_1.expectString)(output.ConnectCampaignArn),
        ConnectCampaignExecutionRoleArn: (0, smithy_client_1.expectString)(output.ConnectCampaignExecutionRoleArn),
    };
};
const deserializeAws_restJson1JourneyCustomMessage = (output, context) => {
    return {
        Data: (0, smithy_client_1.expectString)(output.Data),
    };
};
const deserializeAws_restJson1JourneyDateRangeKpiResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        EndTime: output.EndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output.EndTime)) : undefined,
        JourneyId: (0, smithy_client_1.expectString)(output.JourneyId),
        KpiName: (0, smithy_client_1.expectString)(output.KpiName),
        KpiResult: output.KpiResult != null ? deserializeAws_restJson1BaseKpiResult(output.KpiResult, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        StartTime: output.StartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output.StartTime)) : undefined,
    };
};
const deserializeAws_restJson1JourneyEmailMessage = (output, context) => {
    return {
        FromAddress: (0, smithy_client_1.expectString)(output.FromAddress),
    };
};
const deserializeAws_restJson1JourneyExecutionActivityMetricsResponse = (output, context) => {
    return {
        ActivityType: (0, smithy_client_1.expectString)(output.ActivityType),
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        JourneyActivityId: (0, smithy_client_1.expectString)(output.JourneyActivityId),
        JourneyId: (0, smithy_client_1.expectString)(output.JourneyId),
        LastEvaluatedTime: (0, smithy_client_1.expectString)(output.LastEvaluatedTime),
        Metrics: output.Metrics != null ? deserializeAws_restJson1MapOf__string(output.Metrics, context) : undefined,
    };
};
const deserializeAws_restJson1JourneyExecutionMetricsResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        JourneyId: (0, smithy_client_1.expectString)(output.JourneyId),
        LastEvaluatedTime: (0, smithy_client_1.expectString)(output.LastEvaluatedTime),
        Metrics: output.Metrics != null ? deserializeAws_restJson1MapOf__string(output.Metrics, context) : undefined,
    };
};
const deserializeAws_restJson1JourneyLimits = (output, context) => {
    return {
        DailyCap: (0, smithy_client_1.expectInt32)(output.DailyCap),
        EndpointReentryCap: (0, smithy_client_1.expectInt32)(output.EndpointReentryCap),
        EndpointReentryInterval: (0, smithy_client_1.expectString)(output.EndpointReentryInterval),
        MessagesPerSecond: (0, smithy_client_1.expectInt32)(output.MessagesPerSecond),
    };
};
const deserializeAws_restJson1JourneyPushMessage = (output, context) => {
    return {
        TimeToLive: (0, smithy_client_1.expectString)(output.TimeToLive),
    };
};
const deserializeAws_restJson1JourneyResponse = (output, context) => {
    return {
        Activities: output.Activities != null ? deserializeAws_restJson1MapOfActivity(output.Activities, context) : undefined,
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        ClosedDays: output.ClosedDays != null ? deserializeAws_restJson1ClosedDays(output.ClosedDays, context) : undefined,
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        Id: (0, smithy_client_1.expectString)(output.Id),
        JourneyChannelSettings: output.JourneyChannelSettings != null
            ? deserializeAws_restJson1JourneyChannelSettings(output.JourneyChannelSettings, context)
            : undefined,
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        Limits: output.Limits != null ? deserializeAws_restJson1JourneyLimits(output.Limits, context) : undefined,
        LocalTime: (0, smithy_client_1.expectBoolean)(output.LocalTime),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OpenHours: output.OpenHours != null ? deserializeAws_restJson1OpenHours(output.OpenHours, context) : undefined,
        QuietTime: output.QuietTime != null ? deserializeAws_restJson1QuietTime(output.QuietTime, context) : undefined,
        RefreshFrequency: (0, smithy_client_1.expectString)(output.RefreshFrequency),
        RefreshOnSegmentUpdate: (0, smithy_client_1.expectBoolean)(output.RefreshOnSegmentUpdate),
        Schedule: output.Schedule != null ? deserializeAws_restJson1JourneySchedule(output.Schedule, context) : undefined,
        SendingSchedule: (0, smithy_client_1.expectBoolean)(output.SendingSchedule),
        StartActivity: (0, smithy_client_1.expectString)(output.StartActivity),
        StartCondition: output.StartCondition != null
            ? deserializeAws_restJson1StartCondition(output.StartCondition, context)
            : undefined,
        State: (0, smithy_client_1.expectString)(output.State),
        WaitForQuietTime: (0, smithy_client_1.expectBoolean)(output.WaitForQuietTime),
        tags: output.tags != null ? deserializeAws_restJson1MapOf__string(output.tags, context) : undefined,
    };
};
const deserializeAws_restJson1JourneySchedule = (output, context) => {
    return {
        EndTime: output.EndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output.EndTime)) : undefined,
        StartTime: output.StartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output.StartTime)) : undefined,
        Timezone: (0, smithy_client_1.expectString)(output.Timezone),
    };
};
const deserializeAws_restJson1JourneySMSMessage = (output, context) => {
    return {
        EntityId: (0, smithy_client_1.expectString)(output.EntityId),
        MessageType: (0, smithy_client_1.expectString)(output.MessageType),
        OriginationNumber: (0, smithy_client_1.expectString)(output.OriginationNumber),
        SenderId: (0, smithy_client_1.expectString)(output.SenderId),
        TemplateId: (0, smithy_client_1.expectString)(output.TemplateId),
    };
};
const deserializeAws_restJson1JourneysResponse = (output, context) => {
    return {
        Item: output.Item != null ? deserializeAws_restJson1ListOfJourneyResponse(output.Item, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_restJson1ListOf__EndpointTypesElement = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1ListOf__string = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfActivityResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ActivityResponse(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfApplicationResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ApplicationResponse(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfCampaignResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1CampaignResponse(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfClosedDaysRules = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ClosedDaysRule(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfEndpointResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1EndpointResponse(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfExportJobResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ExportJobResponse(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfImportJobResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ImportJobResponse(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfInAppMessageCampaign = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1InAppMessageCampaign(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfInAppMessageContent = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1InAppMessageContent(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfJourneyResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1JourneyResponse(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfMultiConditionalBranch = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1MultiConditionalBranch(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfOpenHoursRules = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1OpenHoursRule(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfRandomSplitEntry = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1RandomSplitEntry(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfRecommenderConfigurationResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1RecommenderConfigurationResponse(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfResultRow = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ResultRow(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfResultRowValue = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ResultRowValue(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfSegmentDimensions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1SegmentDimensions(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfSegmentGroup = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1SegmentGroup(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfSegmentReference = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1SegmentReference(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfSegmentResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1SegmentResponse(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfSimpleCondition = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1SimpleCondition(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfTemplateResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1TemplateResponse(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfTemplateVersionResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1TemplateVersionResponse(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfTreatmentResource = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1TreatmentResource(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListRecommenderConfigurationsResponse = (output, context) => {
    return {
        Item: output.Item != null
            ? deserializeAws_restJson1ListOfRecommenderConfigurationResponse(output.Item, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_restJson1MapOf__double = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: (0, smithy_client_1.limitedParseDouble)(value),
        };
    }, {});
};
const deserializeAws_restJson1MapOf__integer = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: (0, smithy_client_1.expectInt32)(value),
        };
    }, {});
};
const deserializeAws_restJson1MapOf__string = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: (0, smithy_client_1.expectString)(value),
        };
    }, {});
};
const deserializeAws_restJson1MapOfActivity = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1Activity(value, context),
        };
    }, {});
};
const deserializeAws_restJson1MapOfAttributeDimension = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1AttributeDimension(value, context),
        };
    }, {});
};
const deserializeAws_restJson1MapOfChannelResponse = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1ChannelResponse(value, context),
        };
    }, {});
};
const deserializeAws_restJson1MapOfEndpointMessageResult = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1EndpointMessageResult(value, context),
        };
    }, {});
};
const deserializeAws_restJson1MapOfEventItemResponse = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1EventItemResponse(value, context),
        };
    }, {});
};
const deserializeAws_restJson1MapOfItemResponse = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1ItemResponse(value, context),
        };
    }, {});
};
const deserializeAws_restJson1MapOfListOf__string = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1ListOf__string(value, context),
        };
    }, {});
};
const deserializeAws_restJson1MapOfListOfOpenHoursRules = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1ListOfOpenHoursRules(value, context),
        };
    }, {});
};
const deserializeAws_restJson1MapOfMapOfEndpointMessageResult = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1MapOfEndpointMessageResult(value, context),
        };
    }, {});
};
const deserializeAws_restJson1MapOfMessageResult = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1MessageResult(value, context),
        };
    }, {});
};
const deserializeAws_restJson1MapOfMetricDimension = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1MetricDimension(value, context),
        };
    }, {});
};
const deserializeAws_restJson1Message = (output, context) => {
    return {
        Action: (0, smithy_client_1.expectString)(output.Action),
        Body: (0, smithy_client_1.expectString)(output.Body),
        ImageIconUrl: (0, smithy_client_1.expectString)(output.ImageIconUrl),
        ImageSmallIconUrl: (0, smithy_client_1.expectString)(output.ImageSmallIconUrl),
        ImageUrl: (0, smithy_client_1.expectString)(output.ImageUrl),
        JsonBody: (0, smithy_client_1.expectString)(output.JsonBody),
        MediaUrl: (0, smithy_client_1.expectString)(output.MediaUrl),
        RawContent: (0, smithy_client_1.expectString)(output.RawContent),
        SilentPush: (0, smithy_client_1.expectBoolean)(output.SilentPush),
        TimeToLive: (0, smithy_client_1.expectInt32)(output.TimeToLive),
        Title: (0, smithy_client_1.expectString)(output.Title),
        Url: (0, smithy_client_1.expectString)(output.Url),
    };
};
const deserializeAws_restJson1MessageBody = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        RequestID: (0, smithy_client_1.expectString)(output.RequestID),
    };
};
const deserializeAws_restJson1MessageConfiguration = (output, context) => {
    return {
        ADMMessage: output.ADMMessage != null ? deserializeAws_restJson1Message(output.ADMMessage, context) : undefined,
        APNSMessage: output.APNSMessage != null ? deserializeAws_restJson1Message(output.APNSMessage, context) : undefined,
        BaiduMessage: output.BaiduMessage != null ? deserializeAws_restJson1Message(output.BaiduMessage, context) : undefined,
        CustomMessage: output.CustomMessage != null
            ? deserializeAws_restJson1CampaignCustomMessage(output.CustomMessage, context)
            : undefined,
        DefaultMessage: output.DefaultMessage != null ? deserializeAws_restJson1Message(output.DefaultMessage, context) : undefined,
        EmailMessage: output.EmailMessage != null
            ? deserializeAws_restJson1CampaignEmailMessage(output.EmailMessage, context)
            : undefined,
        GCMMessage: output.GCMMessage != null ? deserializeAws_restJson1Message(output.GCMMessage, context) : undefined,
        InAppMessage: output.InAppMessage != null
            ? deserializeAws_restJson1CampaignInAppMessage(output.InAppMessage, context)
            : undefined,
        SMSMessage: output.SMSMessage != null ? deserializeAws_restJson1CampaignSmsMessage(output.SMSMessage, context) : undefined,
    };
};
const deserializeAws_restJson1MessageResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        EndpointResult: output.EndpointResult != null
            ? deserializeAws_restJson1MapOfEndpointMessageResult(output.EndpointResult, context)
            : undefined,
        RequestId: (0, smithy_client_1.expectString)(output.RequestId),
        Result: output.Result != null ? deserializeAws_restJson1MapOfMessageResult(output.Result, context) : undefined,
    };
};
const deserializeAws_restJson1MessageResult = (output, context) => {
    return {
        DeliveryStatus: (0, smithy_client_1.expectString)(output.DeliveryStatus),
        MessageId: (0, smithy_client_1.expectString)(output.MessageId),
        StatusCode: (0, smithy_client_1.expectInt32)(output.StatusCode),
        StatusMessage: (0, smithy_client_1.expectString)(output.StatusMessage),
        UpdatedToken: (0, smithy_client_1.expectString)(output.UpdatedToken),
    };
};
const deserializeAws_restJson1MetricDimension = (output, context) => {
    return {
        ComparisonOperator: (0, smithy_client_1.expectString)(output.ComparisonOperator),
        Value: (0, smithy_client_1.limitedParseDouble)(output.Value),
    };
};
const deserializeAws_restJson1MultiConditionalBranch = (output, context) => {
    return {
        Condition: output.Condition != null ? deserializeAws_restJson1SimpleCondition(output.Condition, context) : undefined,
        NextActivity: (0, smithy_client_1.expectString)(output.NextActivity),
    };
};
const deserializeAws_restJson1MultiConditionalSplitActivity = (output, context) => {
    return {
        Branches: output.Branches != null
            ? deserializeAws_restJson1ListOfMultiConditionalBranch(output.Branches, context)
            : undefined,
        DefaultActivity: (0, smithy_client_1.expectString)(output.DefaultActivity),
        EvaluationWaitTime: output.EvaluationWaitTime != null
            ? deserializeAws_restJson1WaitTime(output.EvaluationWaitTime, context)
            : undefined,
    };
};
const deserializeAws_restJson1NumberValidateResponse = (output, context) => {
    return {
        Carrier: (0, smithy_client_1.expectString)(output.Carrier),
        City: (0, smithy_client_1.expectString)(output.City),
        CleansedPhoneNumberE164: (0, smithy_client_1.expectString)(output.CleansedPhoneNumberE164),
        CleansedPhoneNumberNational: (0, smithy_client_1.expectString)(output.CleansedPhoneNumberNational),
        Country: (0, smithy_client_1.expectString)(output.Country),
        CountryCodeIso2: (0, smithy_client_1.expectString)(output.CountryCodeIso2),
        CountryCodeNumeric: (0, smithy_client_1.expectString)(output.CountryCodeNumeric),
        County: (0, smithy_client_1.expectString)(output.County),
        OriginalCountryCodeIso2: (0, smithy_client_1.expectString)(output.OriginalCountryCodeIso2),
        OriginalPhoneNumber: (0, smithy_client_1.expectString)(output.OriginalPhoneNumber),
        PhoneType: (0, smithy_client_1.expectString)(output.PhoneType),
        PhoneTypeCode: (0, smithy_client_1.expectInt32)(output.PhoneTypeCode),
        Timezone: (0, smithy_client_1.expectString)(output.Timezone),
        ZipCode: (0, smithy_client_1.expectString)(output.ZipCode),
    };
};
const deserializeAws_restJson1OpenHours = (output, context) => {
    return {
        CUSTOM: output.CUSTOM != null ? deserializeAws_restJson1MapOfListOfOpenHoursRules(output.CUSTOM, context) : undefined,
        EMAIL: output.EMAIL != null ? deserializeAws_restJson1MapOfListOfOpenHoursRules(output.EMAIL, context) : undefined,
        PUSH: output.PUSH != null ? deserializeAws_restJson1MapOfListOfOpenHoursRules(output.PUSH, context) : undefined,
        SMS: output.SMS != null ? deserializeAws_restJson1MapOfListOfOpenHoursRules(output.SMS, context) : undefined,
        VOICE: output.VOICE != null ? deserializeAws_restJson1MapOfListOfOpenHoursRules(output.VOICE, context) : undefined,
    };
};
const deserializeAws_restJson1OpenHoursRule = (output, context) => {
    return {
        EndTime: (0, smithy_client_1.expectString)(output.EndTime),
        StartTime: (0, smithy_client_1.expectString)(output.StartTime),
    };
};
const deserializeAws_restJson1OverrideButtonConfiguration = (output, context) => {
    return {
        ButtonAction: (0, smithy_client_1.expectString)(output.ButtonAction),
        Link: (0, smithy_client_1.expectString)(output.Link),
    };
};
const deserializeAws_restJson1PushMessageActivity = (output, context) => {
    return {
        MessageConfig: output.MessageConfig != null
            ? deserializeAws_restJson1JourneyPushMessage(output.MessageConfig, context)
            : undefined,
        NextActivity: (0, smithy_client_1.expectString)(output.NextActivity),
        TemplateName: (0, smithy_client_1.expectString)(output.TemplateName),
        TemplateVersion: (0, smithy_client_1.expectString)(output.TemplateVersion),
    };
};
const deserializeAws_restJson1PushNotificationTemplateResponse = (output, context) => {
    return {
        ADM: output.ADM != null ? deserializeAws_restJson1AndroidPushNotificationTemplate(output.ADM, context) : undefined,
        APNS: output.APNS != null ? deserializeAws_restJson1APNSPushNotificationTemplate(output.APNS, context) : undefined,
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        Baidu: output.Baidu != null ? deserializeAws_restJson1AndroidPushNotificationTemplate(output.Baidu, context) : undefined,
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        Default: output.Default != null
            ? deserializeAws_restJson1DefaultPushNotificationTemplate(output.Default, context)
            : undefined,
        DefaultSubstitutions: (0, smithy_client_1.expectString)(output.DefaultSubstitutions),
        GCM: output.GCM != null ? deserializeAws_restJson1AndroidPushNotificationTemplate(output.GCM, context) : undefined,
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        RecommenderId: (0, smithy_client_1.expectString)(output.RecommenderId),
        TemplateDescription: (0, smithy_client_1.expectString)(output.TemplateDescription),
        TemplateName: (0, smithy_client_1.expectString)(output.TemplateName),
        TemplateType: (0, smithy_client_1.expectString)(output.TemplateType),
        Version: (0, smithy_client_1.expectString)(output.Version),
        tags: output.tags != null ? deserializeAws_restJson1MapOf__string(output.tags, context) : undefined,
    };
};
const deserializeAws_restJson1QuietTime = (output, context) => {
    return {
        End: (0, smithy_client_1.expectString)(output.End),
        Start: (0, smithy_client_1.expectString)(output.Start),
    };
};
const deserializeAws_restJson1RandomSplitActivity = (output, context) => {
    return {
        Branches: output.Branches != null ? deserializeAws_restJson1ListOfRandomSplitEntry(output.Branches, context) : undefined,
    };
};
const deserializeAws_restJson1RandomSplitEntry = (output, context) => {
    return {
        NextActivity: (0, smithy_client_1.expectString)(output.NextActivity),
        Percentage: (0, smithy_client_1.expectInt32)(output.Percentage),
    };
};
const deserializeAws_restJson1RecencyDimension = (output, context) => {
    return {
        Duration: (0, smithy_client_1.expectString)(output.Duration),
        RecencyType: (0, smithy_client_1.expectString)(output.RecencyType),
    };
};
const deserializeAws_restJson1RecommenderConfigurationResponse = (output, context) => {
    return {
        Attributes: output.Attributes != null ? deserializeAws_restJson1MapOf__string(output.Attributes, context) : undefined,
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Id: (0, smithy_client_1.expectString)(output.Id),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        Name: (0, smithy_client_1.expectString)(output.Name),
        RecommendationProviderIdType: (0, smithy_client_1.expectString)(output.RecommendationProviderIdType),
        RecommendationProviderRoleArn: (0, smithy_client_1.expectString)(output.RecommendationProviderRoleArn),
        RecommendationProviderUri: (0, smithy_client_1.expectString)(output.RecommendationProviderUri),
        RecommendationTransformerUri: (0, smithy_client_1.expectString)(output.RecommendationTransformerUri),
        RecommendationsDisplayName: (0, smithy_client_1.expectString)(output.RecommendationsDisplayName),
        RecommendationsPerMessage: (0, smithy_client_1.expectInt32)(output.RecommendationsPerMessage),
    };
};
const deserializeAws_restJson1ResultRow = (output, context) => {
    return {
        GroupedBys: output.GroupedBys != null ? deserializeAws_restJson1ListOfResultRowValue(output.GroupedBys, context) : undefined,
        Values: output.Values != null ? deserializeAws_restJson1ListOfResultRowValue(output.Values, context) : undefined,
    };
};
const deserializeAws_restJson1ResultRowValue = (output, context) => {
    return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Type: (0, smithy_client_1.expectString)(output.Type),
        Value: (0, smithy_client_1.expectString)(output.Value),
    };
};
const deserializeAws_restJson1Schedule = (output, context) => {
    return {
        EndTime: (0, smithy_client_1.expectString)(output.EndTime),
        EventFilter: output.EventFilter != null ? deserializeAws_restJson1CampaignEventFilter(output.EventFilter, context) : undefined,
        Frequency: (0, smithy_client_1.expectString)(output.Frequency),
        IsLocalTime: (0, smithy_client_1.expectBoolean)(output.IsLocalTime),
        QuietTime: output.QuietTime != null ? deserializeAws_restJson1QuietTime(output.QuietTime, context) : undefined,
        StartTime: (0, smithy_client_1.expectString)(output.StartTime),
        Timezone: (0, smithy_client_1.expectString)(output.Timezone),
    };
};
const deserializeAws_restJson1SegmentBehaviors = (output, context) => {
    return {
        Recency: output.Recency != null ? deserializeAws_restJson1RecencyDimension(output.Recency, context) : undefined,
    };
};
const deserializeAws_restJson1SegmentCondition = (output, context) => {
    return {
        SegmentId: (0, smithy_client_1.expectString)(output.SegmentId),
    };
};
const deserializeAws_restJson1SegmentDemographics = (output, context) => {
    return {
        AppVersion: output.AppVersion != null ? deserializeAws_restJson1SetDimension(output.AppVersion, context) : undefined,
        Channel: output.Channel != null ? deserializeAws_restJson1SetDimension(output.Channel, context) : undefined,
        DeviceType: output.DeviceType != null ? deserializeAws_restJson1SetDimension(output.DeviceType, context) : undefined,
        Make: output.Make != null ? deserializeAws_restJson1SetDimension(output.Make, context) : undefined,
        Model: output.Model != null ? deserializeAws_restJson1SetDimension(output.Model, context) : undefined,
        Platform: output.Platform != null ? deserializeAws_restJson1SetDimension(output.Platform, context) : undefined,
    };
};
const deserializeAws_restJson1SegmentDimensions = (output, context) => {
    return {
        Attributes: output.Attributes != null
            ? deserializeAws_restJson1MapOfAttributeDimension(output.Attributes, context)
            : undefined,
        Behavior: output.Behavior != null ? deserializeAws_restJson1SegmentBehaviors(output.Behavior, context) : undefined,
        Demographic: output.Demographic != null ? deserializeAws_restJson1SegmentDemographics(output.Demographic, context) : undefined,
        Location: output.Location != null ? deserializeAws_restJson1SegmentLocation(output.Location, context) : undefined,
        Metrics: output.Metrics != null ? deserializeAws_restJson1MapOfMetricDimension(output.Metrics, context) : undefined,
        UserAttributes: output.UserAttributes != null
            ? deserializeAws_restJson1MapOfAttributeDimension(output.UserAttributes, context)
            : undefined,
    };
};
const deserializeAws_restJson1SegmentGroup = (output, context) => {
    return {
        Dimensions: output.Dimensions != null
            ? deserializeAws_restJson1ListOfSegmentDimensions(output.Dimensions, context)
            : undefined,
        SourceSegments: output.SourceSegments != null
            ? deserializeAws_restJson1ListOfSegmentReference(output.SourceSegments, context)
            : undefined,
        SourceType: (0, smithy_client_1.expectString)(output.SourceType),
        Type: (0, smithy_client_1.expectString)(output.Type),
    };
};
const deserializeAws_restJson1SegmentGroupList = (output, context) => {
    return {
        Groups: output.Groups != null ? deserializeAws_restJson1ListOfSegmentGroup(output.Groups, context) : undefined,
        Include: (0, smithy_client_1.expectString)(output.Include),
    };
};
const deserializeAws_restJson1SegmentImportResource = (output, context) => {
    return {
        ChannelCounts: output.ChannelCounts != null ? deserializeAws_restJson1MapOf__integer(output.ChannelCounts, context) : undefined,
        ExternalId: (0, smithy_client_1.expectString)(output.ExternalId),
        Format: (0, smithy_client_1.expectString)(output.Format),
        RoleArn: (0, smithy_client_1.expectString)(output.RoleArn),
        S3Url: (0, smithy_client_1.expectString)(output.S3Url),
        Size: (0, smithy_client_1.expectInt32)(output.Size),
    };
};
const deserializeAws_restJson1SegmentLocation = (output, context) => {
    return {
        Country: output.Country != null ? deserializeAws_restJson1SetDimension(output.Country, context) : undefined,
        GPSPoint: output.GPSPoint != null ? deserializeAws_restJson1GPSPointDimension(output.GPSPoint, context) : undefined,
    };
};
const deserializeAws_restJson1SegmentReference = (output, context) => {
    return {
        Id: (0, smithy_client_1.expectString)(output.Id),
        Version: (0, smithy_client_1.expectInt32)(output.Version),
    };
};
const deserializeAws_restJson1SegmentResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        Dimensions: output.Dimensions != null ? deserializeAws_restJson1SegmentDimensions(output.Dimensions, context) : undefined,
        Id: (0, smithy_client_1.expectString)(output.Id),
        ImportDefinition: output.ImportDefinition != null
            ? deserializeAws_restJson1SegmentImportResource(output.ImportDefinition, context)
            : undefined,
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        Name: (0, smithy_client_1.expectString)(output.Name),
        SegmentGroups: output.SegmentGroups != null
            ? deserializeAws_restJson1SegmentGroupList(output.SegmentGroups, context)
            : undefined,
        SegmentType: (0, smithy_client_1.expectString)(output.SegmentType),
        Version: (0, smithy_client_1.expectInt32)(output.Version),
        tags: output.tags != null ? deserializeAws_restJson1MapOf__string(output.tags, context) : undefined,
    };
};
const deserializeAws_restJson1SegmentsResponse = (output, context) => {
    return {
        Item: output.Item != null ? deserializeAws_restJson1ListOfSegmentResponse(output.Item, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_restJson1SendUsersMessageResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        RequestId: (0, smithy_client_1.expectString)(output.RequestId),
        Result: output.Result != null
            ? deserializeAws_restJson1MapOfMapOfEndpointMessageResult(output.Result, context)
            : undefined,
    };
};
const deserializeAws_restJson1SetDimension = (output, context) => {
    return {
        DimensionType: (0, smithy_client_1.expectString)(output.DimensionType),
        Values: output.Values != null ? deserializeAws_restJson1ListOf__string(output.Values, context) : undefined,
    };
};
const deserializeAws_restJson1SimpleCondition = (output, context) => {
    return {
        EventCondition: output.EventCondition != null
            ? deserializeAws_restJson1EventCondition(output.EventCondition, context)
            : undefined,
        SegmentCondition: output.SegmentCondition != null
            ? deserializeAws_restJson1SegmentCondition(output.SegmentCondition, context)
            : undefined,
        SegmentDimensions: output.segmentDimensions != null
            ? deserializeAws_restJson1SegmentDimensions(output.segmentDimensions, context)
            : undefined,
    };
};
const deserializeAws_restJson1SMSChannelResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        HasCredential: (0, smithy_client_1.expectBoolean)(output.HasCredential),
        Id: (0, smithy_client_1.expectString)(output.Id),
        IsArchived: (0, smithy_client_1.expectBoolean)(output.IsArchived),
        LastModifiedBy: (0, smithy_client_1.expectString)(output.LastModifiedBy),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        Platform: (0, smithy_client_1.expectString)(output.Platform),
        PromotionalMessagesPerSecond: (0, smithy_client_1.expectInt32)(output.PromotionalMessagesPerSecond),
        SenderId: (0, smithy_client_1.expectString)(output.SenderId),
        ShortCode: (0, smithy_client_1.expectString)(output.ShortCode),
        TransactionalMessagesPerSecond: (0, smithy_client_1.expectInt32)(output.TransactionalMessagesPerSecond),
        Version: (0, smithy_client_1.expectInt32)(output.Version),
    };
};
const deserializeAws_restJson1SMSMessageActivity = (output, context) => {
    return {
        MessageConfig: output.MessageConfig != null
            ? deserializeAws_restJson1JourneySMSMessage(output.MessageConfig, context)
            : undefined,
        NextActivity: (0, smithy_client_1.expectString)(output.NextActivity),
        TemplateName: (0, smithy_client_1.expectString)(output.TemplateName),
        TemplateVersion: (0, smithy_client_1.expectString)(output.TemplateVersion),
    };
};
const deserializeAws_restJson1SMSTemplateResponse = (output, context) => {
    return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        Body: (0, smithy_client_1.expectString)(output.Body),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        DefaultSubstitutions: (0, smithy_client_1.expectString)(output.DefaultSubstitutions),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        RecommenderId: (0, smithy_client_1.expectString)(output.RecommenderId),
        TemplateDescription: (0, smithy_client_1.expectString)(output.TemplateDescription),
        TemplateName: (0, smithy_client_1.expectString)(output.TemplateName),
        TemplateType: (0, smithy_client_1.expectString)(output.TemplateType),
        Version: (0, smithy_client_1.expectString)(output.Version),
        tags: output.tags != null ? deserializeAws_restJson1MapOf__string(output.tags, context) : undefined,
    };
};
const deserializeAws_restJson1StartCondition = (output, context) => {
    return {
        Description: (0, smithy_client_1.expectString)(output.Description),
        EventStartCondition: output.EventStartCondition != null
            ? deserializeAws_restJson1EventStartCondition(output.EventStartCondition, context)
            : undefined,
        SegmentStartCondition: output.SegmentStartCondition != null
            ? deserializeAws_restJson1SegmentCondition(output.SegmentStartCondition, context)
            : undefined,
    };
};
const deserializeAws_restJson1TagsModel = (output, context) => {
    return {
        tags: output.tags != null ? deserializeAws_restJson1MapOf__string(output.tags, context) : undefined,
    };
};
const deserializeAws_restJson1Template = (output, context) => {
    return {
        Name: (0, smithy_client_1.expectString)(output.Name),
        Version: (0, smithy_client_1.expectString)(output.Version),
    };
};
const deserializeAws_restJson1TemplateConfiguration = (output, context) => {
    return {
        EmailTemplate: output.EmailTemplate != null ? deserializeAws_restJson1Template(output.EmailTemplate, context) : undefined,
        PushTemplate: output.PushTemplate != null ? deserializeAws_restJson1Template(output.PushTemplate, context) : undefined,
        SMSTemplate: output.SMSTemplate != null ? deserializeAws_restJson1Template(output.SMSTemplate, context) : undefined,
        VoiceTemplate: output.VoiceTemplate != null ? deserializeAws_restJson1Template(output.VoiceTemplate, context) : undefined,
    };
};
const deserializeAws_restJson1TemplateCreateMessageBody = (output, context) => {
    return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        Message: (0, smithy_client_1.expectString)(output.Message),
        RequestID: (0, smithy_client_1.expectString)(output.RequestID),
    };
};
const deserializeAws_restJson1TemplateResponse = (output, context) => {
    return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        DefaultSubstitutions: (0, smithy_client_1.expectString)(output.DefaultSubstitutions),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        TemplateDescription: (0, smithy_client_1.expectString)(output.TemplateDescription),
        TemplateName: (0, smithy_client_1.expectString)(output.TemplateName),
        TemplateType: (0, smithy_client_1.expectString)(output.TemplateType),
        Version: (0, smithy_client_1.expectString)(output.Version),
        tags: output.tags != null ? deserializeAws_restJson1MapOf__string(output.tags, context) : undefined,
    };
};
const deserializeAws_restJson1TemplatesResponse = (output, context) => {
    return {
        Item: output.Item != null ? deserializeAws_restJson1ListOfTemplateResponse(output.Item, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_restJson1TemplateVersionResponse = (output, context) => {
    return {
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        DefaultSubstitutions: (0, smithy_client_1.expectString)(output.DefaultSubstitutions),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        TemplateDescription: (0, smithy_client_1.expectString)(output.TemplateDescription),
        TemplateName: (0, smithy_client_1.expectString)(output.TemplateName),
        TemplateType: (0, smithy_client_1.expectString)(output.TemplateType),
        Version: (0, smithy_client_1.expectString)(output.Version),
    };
};
const deserializeAws_restJson1TemplateVersionsResponse = (output, context) => {
    return {
        Item: output.Item != null ? deserializeAws_restJson1ListOfTemplateVersionResponse(output.Item, context) : undefined,
        Message: (0, smithy_client_1.expectString)(output.Message),
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        RequestID: (0, smithy_client_1.expectString)(output.RequestID),
    };
};
const deserializeAws_restJson1TreatmentResource = (output, context) => {
    return {
        CustomDeliveryConfiguration: output.CustomDeliveryConfiguration != null
            ? deserializeAws_restJson1CustomDeliveryConfiguration(output.CustomDeliveryConfiguration, context)
            : undefined,
        Id: (0, smithy_client_1.expectString)(output.Id),
        MessageConfiguration: output.MessageConfiguration != null
            ? deserializeAws_restJson1MessageConfiguration(output.MessageConfiguration, context)
            : undefined,
        Schedule: output.Schedule != null ? deserializeAws_restJson1Schedule(output.Schedule, context) : undefined,
        SizePercent: (0, smithy_client_1.expectInt32)(output.SizePercent),
        State: output.State != null ? deserializeAws_restJson1CampaignState(output.State, context) : undefined,
        TemplateConfiguration: output.TemplateConfiguration != null
            ? deserializeAws_restJson1TemplateConfiguration(output.TemplateConfiguration, context)
            : undefined,
        TreatmentDescription: (0, smithy_client_1.expectString)(output.TreatmentDescription),
        TreatmentName: (0, smithy_client_1.expectString)(output.TreatmentName),
    };
};
const deserializeAws_restJson1VerificationResponse = (output, context) => {
    return {
        Valid: (0, smithy_client_1.expectBoolean)(output.Valid),
    };
};
const deserializeAws_restJson1VoiceChannelResponse = (output, context) => {
    return {
        ApplicationId: (0, smithy_client_1.expectString)(output.ApplicationId),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        HasCredential: (0, smithy_client_1.expectBoolean)(output.HasCredential),
        Id: (0, smithy_client_1.expectString)(output.Id),
        IsArchived: (0, smithy_client_1.expectBoolean)(output.IsArchived),
        LastModifiedBy: (0, smithy_client_1.expectString)(output.LastModifiedBy),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        Platform: (0, smithy_client_1.expectString)(output.Platform),
        Version: (0, smithy_client_1.expectInt32)(output.Version),
    };
};
const deserializeAws_restJson1VoiceTemplateResponse = (output, context) => {
    return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        Body: (0, smithy_client_1.expectString)(output.Body),
        CreationDate: (0, smithy_client_1.expectString)(output.CreationDate),
        DefaultSubstitutions: (0, smithy_client_1.expectString)(output.DefaultSubstitutions),
        LanguageCode: (0, smithy_client_1.expectString)(output.LanguageCode),
        LastModifiedDate: (0, smithy_client_1.expectString)(output.LastModifiedDate),
        TemplateDescription: (0, smithy_client_1.expectString)(output.TemplateDescription),
        TemplateName: (0, smithy_client_1.expectString)(output.TemplateName),
        TemplateType: (0, smithy_client_1.expectString)(output.TemplateType),
        Version: (0, smithy_client_1.expectString)(output.Version),
        VoiceId: (0, smithy_client_1.expectString)(output.VoiceId),
        tags: output.tags != null ? deserializeAws_restJson1MapOf__string(output.tags, context) : undefined,
    };
};
const deserializeAws_restJson1WaitActivity = (output, context) => {
    return {
        NextActivity: (0, smithy_client_1.expectString)(output.NextActivity),
        WaitTime: output.WaitTime != null ? deserializeAws_restJson1WaitTime(output.WaitTime, context) : undefined,
    };
};
const deserializeAws_restJson1WaitTime = (output, context) => {
    return {
        WaitFor: (0, smithy_client_1.expectString)(output.WaitFor),
        WaitUntil: (0, smithy_client_1.expectString)(output.WaitUntil),
    };
};
const deserializeMetadata = (output) => {
    var _a, _b;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"]) !== null && _b !== void 0 ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    var _a;
    const value = await parseBody(errorBody, context);
    value.message = (_a = value.message) !== null && _a !== void 0 ? _a : value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
