import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
import {
  DeleteSessionCommandInput,
  DeleteSessionCommandOutput,
} from "./commands/DeleteSessionCommand";
import {
  GetSessionCommandInput,
  GetSessionCommandOutput,
} from "./commands/GetSessionCommand";
import {
  PostContentCommandInput,
  PostContentCommandOutput,
} from "./commands/PostContentCommand";
import {
  PostTextCommandInput,
  PostTextCommandOutput,
} from "./commands/PostTextCommand";
import {
  PutSessionCommandInput,
  PutSessionCommandOutput,
} from "./commands/PutSessionCommand";
import { LexRuntimeServiceClient } from "./LexRuntimeServiceClient";
export declare class LexRuntimeService extends LexRuntimeServiceClient {
  deleteSession(
    args: DeleteSessionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteSessionCommandOutput>;
  deleteSession(
    args: DeleteSessionCommandInput,
    cb: (err: any, data?: DeleteSessionCommandOutput) => void
  ): void;
  deleteSession(
    args: DeleteSessionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteSessionCommandOutput) => void
  ): void;
  getSession(
    args: GetSessionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetSessionCommandOutput>;
  getSession(
    args: GetSessionCommandInput,
    cb: (err: any, data?: GetSessionCommandOutput) => void
  ): void;
  getSession(
    args: GetSessionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetSessionCommandOutput) => void
  ): void;
  postContent(
    args: PostContentCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PostContentCommandOutput>;
  postContent(
    args: PostContentCommandInput,
    cb: (err: any, data?: PostContentCommandOutput) => void
  ): void;
  postContent(
    args: PostContentCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PostContentCommandOutput) => void
  ): void;
  postText(
    args: PostTextCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PostTextCommandOutput>;
  postText(
    args: PostTextCommandInput,
    cb: (err: any, data?: PostTextCommandOutput) => void
  ): void;
  postText(
    args: PostTextCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PostTextCommandOutput) => void
  ): void;
  putSession(
    args: PutSessionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PutSessionCommandOutput>;
  putSession(
    args: PutSessionCommandInput,
    cb: (err: any, data?: PutSessionCommandOutput) => void
  ): void;
  putSession(
    args: PutSessionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PutSessionCommandOutput) => void
  ): void;
}
