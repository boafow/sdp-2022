import {
  ExceptionOptionType as __ExceptionOptionType,
  LazyJsonString as __LazyJsonString,
} from "@aws-sdk/smithy-client";
import { Readable } from "stream";
import { LexRuntimeServiceServiceException as __BaseException } from "./LexRuntimeServiceServiceException";
export interface ActiveContextTimeToLive {
  timeToLiveInSeconds?: number;
  turnsToLive?: number;
}
export interface ActiveContext {
  name: string | undefined;
  timeToLive: ActiveContextTimeToLive | undefined;
  parameters: Record<string, string> | undefined;
}
export declare class BadRequestException extends __BaseException {
  readonly name: "BadRequestException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<BadRequestException, __BaseException>
  );
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface DeleteSessionRequest {
  botName: string | undefined;
  botAlias: string | undefined;
  userId: string | undefined;
}
export interface DeleteSessionResponse {
  botName?: string;
  botAlias?: string;
  userId?: string;
  sessionId?: string;
}
export declare class InternalFailureException extends __BaseException {
  readonly name: "InternalFailureException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalFailureException, __BaseException>
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  retryAfterSeconds?: string;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class NotFoundException extends __BaseException {
  readonly name: "NotFoundException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
}
export interface GetSessionRequest {
  botName: string | undefined;
  botAlias: string | undefined;
  userId: string | undefined;
  checkpointLabelFilter?: string;
}
export declare enum FulfillmentState {
  FAILED = "Failed",
  FULFILLED = "Fulfilled",
  READY_FOR_FULFILLMENT = "ReadyForFulfillment",
}
export declare enum MessageFormatType {
  COMPOSITE = "Composite",
  CUSTOM_PAYLOAD = "CustomPayload",
  PLAIN_TEXT = "PlainText",
  SSML = "SSML",
}
export declare enum DialogActionType {
  CLOSE = "Close",
  CONFIRM_INTENT = "ConfirmIntent",
  DELEGATE = "Delegate",
  ELICIT_INTENT = "ElicitIntent",
  ELICIT_SLOT = "ElicitSlot",
}
export interface DialogAction {
  type: DialogActionType | string | undefined;
  intentName?: string;
  slots?: Record<string, string>;
  slotToElicit?: string;
  fulfillmentState?: FulfillmentState | string;
  message?: string;
  messageFormat?: MessageFormatType | string;
}
export declare enum ConfirmationStatus {
  CONFIRMED = "Confirmed",
  DENIED = "Denied",
  NONE = "None",
}
export interface IntentSummary {
  intentName?: string;
  checkpointLabel?: string;
  slots?: Record<string, string>;
  confirmationStatus?: ConfirmationStatus | string;
  dialogActionType: DialogActionType | string | undefined;
  fulfillmentState?: FulfillmentState | string;
  slotToElicit?: string;
}
export interface GetSessionResponse {
  recentIntentSummaryView?: IntentSummary[];
  sessionAttributes?: Record<string, string>;
  sessionId?: string;
  dialogAction?: DialogAction;
  activeContexts?: ActiveContext[];
}
export declare class BadGatewayException extends __BaseException {
  readonly name: "BadGatewayException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<BadGatewayException, __BaseException>
  );
}
export declare class DependencyFailedException extends __BaseException {
  readonly name: "DependencyFailedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<DependencyFailedException, __BaseException>
  );
}
export declare class LoopDetectedException extends __BaseException {
  readonly name: "LoopDetectedException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<LoopDetectedException, __BaseException>
  );
}
export declare class NotAcceptableException extends __BaseException {
  readonly name: "NotAcceptableException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<NotAcceptableException, __BaseException>
  );
}
export interface PostContentRequest {
  botName: string | undefined;
  botAlias: string | undefined;
  userId: string | undefined;
  sessionAttributes?: __LazyJsonString | string;
  requestAttributes?: __LazyJsonString | string;
  contentType: string | undefined;
  accept?: string;
  inputStream: Readable | ReadableStream | Blob | undefined;
  activeContexts?: __LazyJsonString | string;
}
export declare enum DialogState {
  CONFIRM_INTENT = "ConfirmIntent",
  ELICIT_INTENT = "ElicitIntent",
  ELICIT_SLOT = "ElicitSlot",
  FAILED = "Failed",
  FULFILLED = "Fulfilled",
  READY_FOR_FULFILLMENT = "ReadyForFulfillment",
}
export interface PostContentResponse {
  contentType?: string;
  intentName?: string;
  nluIntentConfidence?: __LazyJsonString | string;
  alternativeIntents?: __LazyJsonString | string;
  slots?: __LazyJsonString | string;
  sessionAttributes?: __LazyJsonString | string;
  sentimentResponse?: string;
  message?: string;
  encodedMessage?: string;
  messageFormat?: MessageFormatType | string;
  dialogState?: DialogState | string;
  slotToElicit?: string;
  inputTranscript?: string;
  encodedInputTranscript?: string;
  audioStream?: Readable | ReadableStream | Blob;
  botVersion?: string;
  sessionId?: string;
  activeContexts?: __LazyJsonString | string;
}
export declare class RequestTimeoutException extends __BaseException {
  readonly name: "RequestTimeoutException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<RequestTimeoutException, __BaseException>
  );
}
export declare class UnsupportedMediaTypeException extends __BaseException {
  readonly name: "UnsupportedMediaTypeException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UnsupportedMediaTypeException, __BaseException>
  );
}
export interface PostTextRequest {
  botName: string | undefined;
  botAlias: string | undefined;
  userId: string | undefined;
  sessionAttributes?: Record<string, string>;
  requestAttributes?: Record<string, string>;
  inputText: string | undefined;
  activeContexts?: ActiveContext[];
}
export interface IntentConfidence {
  score?: number;
}
export interface PredictedIntent {
  intentName?: string;
  nluIntentConfidence?: IntentConfidence;
  slots?: Record<string, string>;
}
export declare enum ContentType {
  GENERIC = "application/vnd.amazonaws.card.generic",
}
export interface Button {
  text: string | undefined;
  value: string | undefined;
}
export interface GenericAttachment {
  title?: string;
  subTitle?: string;
  attachmentLinkUrl?: string;
  imageUrl?: string;
  buttons?: Button[];
}
export interface ResponseCard {
  version?: string;
  contentType?: ContentType | string;
  genericAttachments?: GenericAttachment[];
}
export interface SentimentResponse {
  sentimentLabel?: string;
  sentimentScore?: string;
}
export interface PostTextResponse {
  intentName?: string;
  nluIntentConfidence?: IntentConfidence;
  alternativeIntents?: PredictedIntent[];
  slots?: Record<string, string>;
  sessionAttributes?: Record<string, string>;
  message?: string;
  sentimentResponse?: SentimentResponse;
  messageFormat?: MessageFormatType | string;
  dialogState?: DialogState | string;
  slotToElicit?: string;
  responseCard?: ResponseCard;
  sessionId?: string;
  botVersion?: string;
  activeContexts?: ActiveContext[];
}
export interface PutSessionRequest {
  botName: string | undefined;
  botAlias: string | undefined;
  userId: string | undefined;
  sessionAttributes?: Record<string, string>;
  dialogAction?: DialogAction;
  recentIntentSummaryView?: IntentSummary[];
  accept?: string;
  activeContexts?: ActiveContext[];
}
export interface PutSessionResponse {
  contentType?: string;
  intentName?: string;
  slots?: __LazyJsonString | string;
  sessionAttributes?: __LazyJsonString | string;
  message?: string;
  encodedMessage?: string;
  messageFormat?: MessageFormatType | string;
  dialogState?: DialogState | string;
  slotToElicit?: string;
  audioStream?: Readable | ReadableStream | Blob;
  sessionId?: string;
  activeContexts?: __LazyJsonString | string;
}
export declare const ActiveContextTimeToLiveFilterSensitiveLog: (
  obj: ActiveContextTimeToLive
) => any;
export declare const ActiveContextFilterSensitiveLog: (
  obj: ActiveContext
) => any;
export declare const DeleteSessionRequestFilterSensitiveLog: (
  obj: DeleteSessionRequest
) => any;
export declare const DeleteSessionResponseFilterSensitiveLog: (
  obj: DeleteSessionResponse
) => any;
export declare const GetSessionRequestFilterSensitiveLog: (
  obj: GetSessionRequest
) => any;
export declare const DialogActionFilterSensitiveLog: (obj: DialogAction) => any;
export declare const IntentSummaryFilterSensitiveLog: (
  obj: IntentSummary
) => any;
export declare const GetSessionResponseFilterSensitiveLog: (
  obj: GetSessionResponse
) => any;
export declare const PostContentRequestFilterSensitiveLog: (
  obj: PostContentRequest
) => any;
export declare const PostContentResponseFilterSensitiveLog: (
  obj: PostContentResponse
) => any;
export declare const PostTextRequestFilterSensitiveLog: (
  obj: PostTextRequest
) => any;
export declare const IntentConfidenceFilterSensitiveLog: (
  obj: IntentConfidence
) => any;
export declare const PredictedIntentFilterSensitiveLog: (
  obj: PredictedIntent
) => any;
export declare const ButtonFilterSensitiveLog: (obj: Button) => any;
export declare const GenericAttachmentFilterSensitiveLog: (
  obj: GenericAttachment
) => any;
export declare const ResponseCardFilterSensitiveLog: (obj: ResponseCard) => any;
export declare const SentimentResponseFilterSensitiveLog: (
  obj: SentimentResponse
) => any;
export declare const PostTextResponseFilterSensitiveLog: (
  obj: PostTextResponse
) => any;
export declare const PutSessionRequestFilterSensitiveLog: (
  obj: PutSessionRequest
) => any;
export declare const PutSessionResponseFilterSensitiveLog: (
  obj: PutSessionResponse
) => any;
