import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
import {
  DeleteSessionCommandInput,
  DeleteSessionCommandOutput,
} from "./commands/DeleteSessionCommand";
import {
  GetSessionCommandInput,
  GetSessionCommandOutput,
} from "./commands/GetSessionCommand";
import {
  PutSessionCommandInput,
  PutSessionCommandOutput,
} from "./commands/PutSessionCommand";
import {
  RecognizeTextCommandInput,
  RecognizeTextCommandOutput,
} from "./commands/RecognizeTextCommand";
import {
  RecognizeUtteranceCommandInput,
  RecognizeUtteranceCommandOutput,
} from "./commands/RecognizeUtteranceCommand";
import {
  StartConversationCommandInput,
  StartConversationCommandOutput,
} from "./commands/StartConversationCommand";
import { LexRuntimeV2Client } from "./LexRuntimeV2Client";
export declare class LexRuntimeV2 extends LexRuntimeV2Client {
  deleteSession(
    args: DeleteSessionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteSessionCommandOutput>;
  deleteSession(
    args: DeleteSessionCommandInput,
    cb: (err: any, data?: DeleteSessionCommandOutput) => void
  ): void;
  deleteSession(
    args: DeleteSessionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteSessionCommandOutput) => void
  ): void;
  getSession(
    args: GetSessionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetSessionCommandOutput>;
  getSession(
    args: GetSessionCommandInput,
    cb: (err: any, data?: GetSessionCommandOutput) => void
  ): void;
  getSession(
    args: GetSessionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetSessionCommandOutput) => void
  ): void;
  putSession(
    args: PutSessionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PutSessionCommandOutput>;
  putSession(
    args: PutSessionCommandInput,
    cb: (err: any, data?: PutSessionCommandOutput) => void
  ): void;
  putSession(
    args: PutSessionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PutSessionCommandOutput) => void
  ): void;
  recognizeText(
    args: RecognizeTextCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<RecognizeTextCommandOutput>;
  recognizeText(
    args: RecognizeTextCommandInput,
    cb: (err: any, data?: RecognizeTextCommandOutput) => void
  ): void;
  recognizeText(
    args: RecognizeTextCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: RecognizeTextCommandOutput) => void
  ): void;
  recognizeUtterance(
    args: RecognizeUtteranceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<RecognizeUtteranceCommandOutput>;
  recognizeUtterance(
    args: RecognizeUtteranceCommandInput,
    cb: (err: any, data?: RecognizeUtteranceCommandOutput) => void
  ): void;
  recognizeUtterance(
    args: RecognizeUtteranceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: RecognizeUtteranceCommandOutput) => void
  ): void;
  startConversation(
    args: StartConversationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StartConversationCommandOutput>;
  startConversation(
    args: StartConversationCommandInput,
    cb: (err: any, data?: StartConversationCommandOutput) => void
  ): void;
  startConversation(
    args: StartConversationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StartConversationCommandOutput) => void
  ): void;
}
