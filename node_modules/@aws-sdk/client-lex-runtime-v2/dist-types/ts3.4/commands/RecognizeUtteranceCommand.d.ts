import { Command as $Command } from "@aws-sdk/smithy-client";
import {
  Handler,
  HttpHandlerOptions as __HttpHandlerOptions,
  MetadataBearer as __MetadataBearer,
  MiddlewareStack,
} from "@aws-sdk/types";
import {
  LexRuntimeV2ClientResolvedConfig,
  ServiceInputTypes,
  ServiceOutputTypes,
} from "../LexRuntimeV2Client";
import {
  RecognizeUtteranceRequest,
  RecognizeUtteranceResponse,
} from "../models/models_0";
declare type RecognizeUtteranceCommandInputType = Pick<
  RecognizeUtteranceRequest,
  Exclude<keyof RecognizeUtteranceRequest, "inputStream">
> & {
  inputStream?:
    | RecognizeUtteranceRequest["inputStream"]
    | string
    | Uint8Array
    | Buffer;
};
export interface RecognizeUtteranceCommandInput
  extends RecognizeUtteranceCommandInputType {}
export interface RecognizeUtteranceCommandOutput
  extends RecognizeUtteranceResponse,
    __MetadataBearer {}
export declare class RecognizeUtteranceCommand extends $Command<
  RecognizeUtteranceCommandInput,
  RecognizeUtteranceCommandOutput,
  LexRuntimeV2ClientResolvedConfig
> {
  readonly input: RecognizeUtteranceCommandInput;
  constructor(input: RecognizeUtteranceCommandInput);
  resolveMiddleware(
    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,
    configuration: LexRuntimeV2ClientResolvedConfig,
    options?: __HttpHandlerOptions
  ): Handler<RecognizeUtteranceCommandInput, RecognizeUtteranceCommandOutput>;
  private serialize;
  private deserialize;
}
export {};
