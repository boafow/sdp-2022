import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { Readable } from "stream";
import { LexRuntimeV2ServiceException as __BaseException } from "./LexRuntimeV2ServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface ActiveContextTimeToLive {
  timeToLiveInSeconds: number | undefined;
  turnsToLive: number | undefined;
}
export interface ActiveContext {
  name: string | undefined;
  timeToLive: ActiveContextTimeToLive | undefined;
  contextAttributes: Record<string, string> | undefined;
}
export interface AudioInputEvent {
  audioChunk?: Uint8Array;
  contentType: string | undefined;
  eventId?: string;
  clientTimestampMillis?: number;
}
export interface AudioResponseEvent {
  audioChunk?: Uint8Array;
  contentType?: string;
  eventId?: string;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface DeleteSessionRequest {
  botId: string | undefined;
  botAliasId: string | undefined;
  localeId: string | undefined;
  sessionId: string | undefined;
}
export interface DeleteSessionResponse {
  botId?: string;
  botAliasId?: string;
  localeId?: string;
  sessionId?: string;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface GetSessionRequest {
  botId: string | undefined;
  botAliasId: string | undefined;
  localeId: string | undefined;
  sessionId: string | undefined;
}
export declare enum ConfirmationState {
  CONFIRMED = "Confirmed",
  DENIED = "Denied",
  NONE = "None",
}
export declare enum Shape {
  COMPOSITE = "Composite",
  LIST = "List",
  SCALAR = "Scalar",
}
export interface Value {
  originalValue?: string;
  interpretedValue: string | undefined;
  resolvedValues?: string[];
}
export declare enum IntentState {
  FAILED = "Failed",
  FULFILLED = "Fulfilled",
  FULFILLMENT_IN_PROGRESS = "FulfillmentInProgress",
  IN_PROGRESS = "InProgress",
  READY_FOR_FULFILLMENT = "ReadyForFulfillment",
  WAITING = "Waiting",
}
export interface ConfidenceScore {
  score?: number;
}
export declare enum SentimentType {
  MIXED = "MIXED",
  NEGATIVE = "NEGATIVE",
  NEUTRAL = "NEUTRAL",
  POSITIVE = "POSITIVE",
}
export interface SentimentScore {
  positive?: number;
  negative?: number;
  neutral?: number;
  mixed?: number;
}
export interface SentimentResponse {
  sentiment?: SentimentType | string;
  sentimentScore?: SentimentScore;
}
export declare enum MessageContentType {
  CUSTOM_PAYLOAD = "CustomPayload",
  IMAGE_RESPONSE_CARD = "ImageResponseCard",
  PLAIN_TEXT = "PlainText",
  SSML = "SSML",
}
export interface Button {
  text: string | undefined;
  value: string | undefined;
}
export interface ImageResponseCard {
  title: string | undefined;
  subtitle?: string;
  imageUrl?: string;
  buttons?: Button[];
}
export interface Message {
  content?: string;
  contentType: MessageContentType | string | undefined;
  imageResponseCard?: ImageResponseCard;
}
export declare enum StyleType {
  DEFAULT = "Default",
  SPELL_BY_LETTER = "SpellByLetter",
  SPELL_BY_WORD = "SpellByWord",
}
export declare enum DialogActionType {
  CLOSE = "Close",
  CONFIRM_INTENT = "ConfirmIntent",
  DELEGATE = "Delegate",
  ELICIT_INTENT = "ElicitIntent",
  ELICIT_SLOT = "ElicitSlot",
  NONE = "None",
}
export interface RuntimeHintValue {
  phrase: string | undefined;
}
export declare class BadGatewayException extends __BaseException {
  readonly name: "BadGatewayException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<BadGatewayException, __BaseException>
  );
}
export declare class DependencyFailedException extends __BaseException {
  readonly name: "DependencyFailedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DependencyFailedException, __BaseException>
  );
}
export interface PutSessionResponse {
  contentType?: string;
  messages?: string;
  sessionState?: string;
  requestAttributes?: string;
  sessionId?: string;
  audioStream?: Readable | ReadableStream | Blob;
}
export interface RecognizeUtteranceRequest {
  botId: string | undefined;
  botAliasId: string | undefined;
  localeId: string | undefined;
  sessionId: string | undefined;
  sessionState?: string;
  requestAttributes?: string;
  requestContentType: string | undefined;
  responseContentType?: string;
  inputStream?: Readable | ReadableStream | Blob;
}
export interface RecognizeUtteranceResponse {
  inputMode?: string;
  contentType?: string;
  messages?: string;
  interpretations?: string;
  sessionState?: string;
  requestAttributes?: string;
  sessionId?: string;
  inputTranscript?: string;
  audioStream?: Readable | ReadableStream | Blob;
}
export declare enum ConversationMode {
  AUDIO = "AUDIO",
  TEXT = "TEXT",
}
export interface DisconnectionEvent {
  eventId?: string;
  clientTimestampMillis?: number;
}
export interface DTMFInputEvent {
  inputCharacter: string | undefined;
  eventId?: string;
  clientTimestampMillis?: number;
}
export interface PlaybackCompletionEvent {
  eventId?: string;
  clientTimestampMillis?: number;
}
export interface TextInputEvent {
  text: string | undefined;
  eventId?: string;
  clientTimestampMillis?: number;
}
export interface HeartbeatEvent {
  eventId?: string;
}
export declare enum InputMode {
  DTMF = "DTMF",
  SPEECH = "Speech",
  TEXT = "Text",
}
export declare enum PlaybackInterruptionReason {
  DTMF_START_DETECTED = "DTMF_START_DETECTED",
  TEXT_DETECTED = "TEXT_DETECTED",
  VOICE_START_DETECTED = "VOICE_START_DETECTED",
}
export interface PlaybackInterruptionEvent {
  eventReason?: PlaybackInterruptionReason | string;
  causedByEventId?: string;
  eventId?: string;
}
export interface TextResponseEvent {
  messages?: Message[];
  eventId?: string;
}
export interface TranscriptEvent {
  transcript?: string;
  eventId?: string;
}
export interface ElicitSubSlot {
  name: string | undefined;
  subSlotToElicit?: ElicitSubSlot;
}
export interface DialogAction {
  type: DialogActionType | string | undefined;
  slotToElicit?: string;
  slotElicitationStyle?: StyleType | string;
  subSlotToElicit?: ElicitSubSlot;
}
export interface RuntimeHintDetails {
  runtimeHintValues?: RuntimeHintValue[];
  subSlotHints?: Record<string, RuntimeHintDetails>;
}
export interface RuntimeHints {
  slotHints?: Record<string, Record<string, RuntimeHintDetails>>;
}
export interface Slot {
  value?: Value;
  shape?: Shape | string;
  values?: Slot[];
  subSlots?: Record<string, Slot>;
}
export interface Intent {
  name: string | undefined;
  slots?: Record<string, Slot>;
  state?: IntentState | string;
  confirmationState?: ConfirmationState | string;
}
export interface Interpretation {
  nluConfidence?: ConfidenceScore;
  sentimentResponse?: SentimentResponse;
  intent?: Intent;
}
export interface SessionState {
  dialogAction?: DialogAction;
  intent?: Intent;
  activeContexts?: ActiveContext[];
  sessionAttributes?: Record<string, string>;
  originatingRequestId?: string;
  runtimeHints?: RuntimeHints;
}
export interface ConfigurationEvent {
  requestAttributes?: Record<string, string>;
  responseContentType: string | undefined;
  sessionState?: SessionState;
  welcomeMessages?: Message[];
  disablePlayback?: boolean;
  eventId?: string;
  clientTimestampMillis?: number;
}
export interface PutSessionRequest {
  botId: string | undefined;
  botAliasId: string | undefined;
  localeId: string | undefined;
  sessionId: string | undefined;
  messages?: Message[];
  sessionState: SessionState | undefined;
  requestAttributes?: Record<string, string>;
  responseContentType?: string;
}
export interface RecognizeTextRequest {
  botId: string | undefined;
  botAliasId: string | undefined;
  localeId: string | undefined;
  sessionId: string | undefined;
  text: string | undefined;
  sessionState?: SessionState;
  requestAttributes?: Record<string, string>;
}
export declare type StartConversationRequestEventStream =
  | StartConversationRequestEventStream.AudioInputEventMember
  | StartConversationRequestEventStream.ConfigurationEventMember
  | StartConversationRequestEventStream.DTMFInputEventMember
  | StartConversationRequestEventStream.DisconnectionEventMember
  | StartConversationRequestEventStream.PlaybackCompletionEventMember
  | StartConversationRequestEventStream.TextInputEventMember
  | StartConversationRequestEventStream.$UnknownMember;
export declare namespace StartConversationRequestEventStream {
  interface ConfigurationEventMember {
    ConfigurationEvent: ConfigurationEvent;
    AudioInputEvent?: never;
    DTMFInputEvent?: never;
    TextInputEvent?: never;
    PlaybackCompletionEvent?: never;
    DisconnectionEvent?: never;
    $unknown?: never;
  }
  interface AudioInputEventMember {
    ConfigurationEvent?: never;
    AudioInputEvent: AudioInputEvent;
    DTMFInputEvent?: never;
    TextInputEvent?: never;
    PlaybackCompletionEvent?: never;
    DisconnectionEvent?: never;
    $unknown?: never;
  }
  interface DTMFInputEventMember {
    ConfigurationEvent?: never;
    AudioInputEvent?: never;
    DTMFInputEvent: DTMFInputEvent;
    TextInputEvent?: never;
    PlaybackCompletionEvent?: never;
    DisconnectionEvent?: never;
    $unknown?: never;
  }
  interface TextInputEventMember {
    ConfigurationEvent?: never;
    AudioInputEvent?: never;
    DTMFInputEvent?: never;
    TextInputEvent: TextInputEvent;
    PlaybackCompletionEvent?: never;
    DisconnectionEvent?: never;
    $unknown?: never;
  }
  interface PlaybackCompletionEventMember {
    ConfigurationEvent?: never;
    AudioInputEvent?: never;
    DTMFInputEvent?: never;
    TextInputEvent?: never;
    PlaybackCompletionEvent: PlaybackCompletionEvent;
    DisconnectionEvent?: never;
    $unknown?: never;
  }
  interface DisconnectionEventMember {
    ConfigurationEvent?: never;
    AudioInputEvent?: never;
    DTMFInputEvent?: never;
    TextInputEvent?: never;
    PlaybackCompletionEvent?: never;
    DisconnectionEvent: DisconnectionEvent;
    $unknown?: never;
  }
  interface $UnknownMember {
    ConfigurationEvent?: never;
    AudioInputEvent?: never;
    DTMFInputEvent?: never;
    TextInputEvent?: never;
    PlaybackCompletionEvent?: never;
    DisconnectionEvent?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    ConfigurationEvent: (value: ConfigurationEvent) => T;
    AudioInputEvent: (value: AudioInputEvent) => T;
    DTMFInputEvent: (value: DTMFInputEvent) => T;
    TextInputEvent: (value: TextInputEvent) => T;
    PlaybackCompletionEvent: (value: PlaybackCompletionEvent) => T;
    DisconnectionEvent: (value: DisconnectionEvent) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: StartConversationRequestEventStream,
    visitor: Visitor<T>
  ) => T;
}
export interface StartConversationRequest {
  botId: string | undefined;
  botAliasId: string | undefined;
  localeId: string | undefined;
  sessionId: string | undefined;
  conversationMode?: ConversationMode | string;
  requestEventStream:
    | AsyncIterable<StartConversationRequestEventStream>
    | undefined;
}
export interface GetSessionResponse {
  sessionId?: string;
  messages?: Message[];
  interpretations?: Interpretation[];
  sessionState?: SessionState;
}
export interface IntentResultEvent {
  inputMode?: InputMode | string;
  interpretations?: Interpretation[];
  sessionState?: SessionState;
  requestAttributes?: Record<string, string>;
  sessionId?: string;
  eventId?: string;
}
export interface RecognizeTextResponse {
  messages?: Message[];
  sessionState?: SessionState;
  interpretations?: Interpretation[];
  requestAttributes?: Record<string, string>;
  sessionId?: string;
}
export declare type StartConversationResponseEventStream =
  | StartConversationResponseEventStream.AccessDeniedExceptionMember
  | StartConversationResponseEventStream.AudioResponseEventMember
  | StartConversationResponseEventStream.BadGatewayExceptionMember
  | StartConversationResponseEventStream.ConflictExceptionMember
  | StartConversationResponseEventStream.DependencyFailedExceptionMember
  | StartConversationResponseEventStream.HeartbeatEventMember
  | StartConversationResponseEventStream.IntentResultEventMember
  | StartConversationResponseEventStream.InternalServerExceptionMember
  | StartConversationResponseEventStream.PlaybackInterruptionEventMember
  | StartConversationResponseEventStream.ResourceNotFoundExceptionMember
  | StartConversationResponseEventStream.TextResponseEventMember
  | StartConversationResponseEventStream.ThrottlingExceptionMember
  | StartConversationResponseEventStream.TranscriptEventMember
  | StartConversationResponseEventStream.ValidationExceptionMember
  | StartConversationResponseEventStream.$UnknownMember;
export declare namespace StartConversationResponseEventStream {
  interface PlaybackInterruptionEventMember {
    PlaybackInterruptionEvent: PlaybackInterruptionEvent;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface TranscriptEventMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent: TranscriptEvent;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface IntentResultEventMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent: IntentResultEvent;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface TextResponseEventMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent: TextResponseEvent;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface AudioResponseEventMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent: AudioResponseEvent;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface HeartbeatEventMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent: HeartbeatEvent;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface AccessDeniedExceptionMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException: AccessDeniedException;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface ResourceNotFoundExceptionMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException: ResourceNotFoundException;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface ValidationExceptionMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException: ValidationException;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface ThrottlingExceptionMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException: ThrottlingException;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface InternalServerExceptionMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException: InternalServerException;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface ConflictExceptionMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException: ConflictException;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface DependencyFailedExceptionMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException: DependencyFailedException;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface BadGatewayExceptionMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException: BadGatewayException;
    $unknown?: never;
  }
  interface $UnknownMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    PlaybackInterruptionEvent: (value: PlaybackInterruptionEvent) => T;
    TranscriptEvent: (value: TranscriptEvent) => T;
    IntentResultEvent: (value: IntentResultEvent) => T;
    TextResponseEvent: (value: TextResponseEvent) => T;
    AudioResponseEvent: (value: AudioResponseEvent) => T;
    HeartbeatEvent: (value: HeartbeatEvent) => T;
    AccessDeniedException: (value: AccessDeniedException) => T;
    ResourceNotFoundException: (value: ResourceNotFoundException) => T;
    ValidationException: (value: ValidationException) => T;
    ThrottlingException: (value: ThrottlingException) => T;
    InternalServerException: (value: InternalServerException) => T;
    ConflictException: (value: ConflictException) => T;
    DependencyFailedException: (value: DependencyFailedException) => T;
    BadGatewayException: (value: BadGatewayException) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: StartConversationResponseEventStream,
    visitor: Visitor<T>
  ) => T;
}
export interface StartConversationResponse {
  responseEventStream?: AsyncIterable<StartConversationResponseEventStream>;
}
export declare const ActiveContextTimeToLiveFilterSensitiveLog: (
  obj: ActiveContextTimeToLive
) => any;
export declare const ActiveContextFilterSensitiveLog: (
  obj: ActiveContext
) => any;
export declare const AudioInputEventFilterSensitiveLog: (
  obj: AudioInputEvent
) => any;
export declare const AudioResponseEventFilterSensitiveLog: (
  obj: AudioResponseEvent
) => any;
export declare const DeleteSessionRequestFilterSensitiveLog: (
  obj: DeleteSessionRequest
) => any;
export declare const DeleteSessionResponseFilterSensitiveLog: (
  obj: DeleteSessionResponse
) => any;
export declare const GetSessionRequestFilterSensitiveLog: (
  obj: GetSessionRequest
) => any;
export declare const ValueFilterSensitiveLog: (obj: Value) => any;
export declare const ConfidenceScoreFilterSensitiveLog: (
  obj: ConfidenceScore
) => any;
export declare const SentimentScoreFilterSensitiveLog: (
  obj: SentimentScore
) => any;
export declare const SentimentResponseFilterSensitiveLog: (
  obj: SentimentResponse
) => any;
export declare const ButtonFilterSensitiveLog: (obj: Button) => any;
export declare const ImageResponseCardFilterSensitiveLog: (
  obj: ImageResponseCard
) => any;
export declare const MessageFilterSensitiveLog: (obj: Message) => any;
export declare const RuntimeHintValueFilterSensitiveLog: (
  obj: RuntimeHintValue
) => any;
export declare const PutSessionResponseFilterSensitiveLog: (
  obj: PutSessionResponse
) => any;
export declare const RecognizeUtteranceRequestFilterSensitiveLog: (
  obj: RecognizeUtteranceRequest
) => any;
export declare const RecognizeUtteranceResponseFilterSensitiveLog: (
  obj: RecognizeUtteranceResponse
) => any;
export declare const DisconnectionEventFilterSensitiveLog: (
  obj: DisconnectionEvent
) => any;
export declare const DTMFInputEventFilterSensitiveLog: (
  obj: DTMFInputEvent
) => any;
export declare const PlaybackCompletionEventFilterSensitiveLog: (
  obj: PlaybackCompletionEvent
) => any;
export declare const TextInputEventFilterSensitiveLog: (
  obj: TextInputEvent
) => any;
export declare const HeartbeatEventFilterSensitiveLog: (
  obj: HeartbeatEvent
) => any;
export declare const PlaybackInterruptionEventFilterSensitiveLog: (
  obj: PlaybackInterruptionEvent
) => any;
export declare const TextResponseEventFilterSensitiveLog: (
  obj: TextResponseEvent
) => any;
export declare const TranscriptEventFilterSensitiveLog: (
  obj: TranscriptEvent
) => any;
export declare const ElicitSubSlotFilterSensitiveLog: (
  obj: ElicitSubSlot
) => any;
export declare const DialogActionFilterSensitiveLog: (obj: DialogAction) => any;
export declare const RuntimeHintDetailsFilterSensitiveLog: (
  obj: RuntimeHintDetails
) => any;
export declare const RuntimeHintsFilterSensitiveLog: (obj: RuntimeHints) => any;
export declare const SlotFilterSensitiveLog: (obj: Slot) => any;
export declare const IntentFilterSensitiveLog: (obj: Intent) => any;
export declare const InterpretationFilterSensitiveLog: (
  obj: Interpretation
) => any;
export declare const SessionStateFilterSensitiveLog: (obj: SessionState) => any;
export declare const ConfigurationEventFilterSensitiveLog: (
  obj: ConfigurationEvent
) => any;
export declare const PutSessionRequestFilterSensitiveLog: (
  obj: PutSessionRequest
) => any;
export declare const RecognizeTextRequestFilterSensitiveLog: (
  obj: RecognizeTextRequest
) => any;
export declare const StartConversationRequestEventStreamFilterSensitiveLog: (
  obj: StartConversationRequestEventStream
) => any;
export declare const StartConversationRequestFilterSensitiveLog: (
  obj: StartConversationRequest
) => any;
export declare const GetSessionResponseFilterSensitiveLog: (
  obj: GetSessionResponse
) => any;
export declare const IntentResultEventFilterSensitiveLog: (
  obj: IntentResultEvent
) => any;
export declare const RecognizeTextResponseFilterSensitiveLog: (
  obj: RecognizeTextResponse
) => any;
export declare const StartConversationResponseEventStreamFilterSensitiveLog: (
  obj: StartConversationResponseEventStream
) => any;
export declare const StartConversationResponseFilterSensitiveLog: (
  obj: StartConversationResponse
) => any;
