{"version":3,"file":"bundleId.js","names":["getProfilesForBundleIdDangerousAsync","context","bundleIdentifier","bundleId","BundleId","findAsync","identifier","getProfilesAsync","getProfilesForBundleIdAsync","profiles","validProfileIds","Set","Promise","all","map","profile","getBundleIdAsync","add","id","e","name","message","includes","filter","has","getBundleIdForIdentifierAsync","CommandError"],"sources":["../../src/appleApi/bundleId.ts"],"sourcesContent":["import { BundleId, Profile, RequestContext } from '@expo/apple-utils';\n\nimport CommandError from '../CommandError';\n\nasync function getProfilesForBundleIdDangerousAsync(\n  context: RequestContext,\n  bundleIdentifier: string\n): Promise<Profile[]> {\n  const bundleId = await BundleId.findAsync(context, { identifier: bundleIdentifier });\n  if (bundleId) {\n    return bundleId.getProfilesAsync();\n  }\n  return [];\n}\n\nexport async function getProfilesForBundleIdAsync(\n  context: RequestContext,\n  bundleIdentifier: string\n): Promise<Profile[]> {\n  const profiles = await getProfilesForBundleIdDangerousAsync(context, bundleIdentifier);\n  // users sometimes have a poisoned Apple cache and receive stale data from the API\n  // we call an arbitrary method, `getBundleIdAsync` on each profile\n  // if it errors, the profile was stale, so we remove it\n  const validProfileIds = new Set();\n  await Promise.all(\n    profiles.map(async profile => {\n      try {\n        await profile.getBundleIdAsync();\n        validProfileIds.add(profile.id);\n      } catch (e: any) {\n        if (\n          e.name === 'UnexpectedAppleResponse' &&\n          e.message.includes('The specified resource does not exist - There is no resource of type')\n        ) {\n          // TODO: add tracking analytics here\n          return;\n        }\n        throw e;\n      }\n    })\n  );\n  return profiles.filter(profile => validProfileIds.has(profile.id));\n}\n\nexport async function getBundleIdForIdentifierAsync(\n  context: RequestContext,\n  bundleIdentifier: string\n): Promise<BundleId> {\n  const bundleId = await BundleId.findAsync(context, { identifier: bundleIdentifier });\n  if (!bundleId) {\n    throw new CommandError(`Failed to find Bundle ID item with identifier \"${bundleIdentifier}\"`);\n  }\n  return bundleId;\n}\n"],"mappings":";;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAA2C;AAE3C,eAAeA,oCAAoC,CACjDC,OAAuB,EACvBC,gBAAwB,EACJ;EACpB,MAAMC,QAAQ,GAAG,MAAMC,sBAAQ,CAACC,SAAS,CAACJ,OAAO,EAAE;IAAEK,UAAU,EAAEJ;EAAiB,CAAC,CAAC;EACpF,IAAIC,QAAQ,EAAE;IACZ,OAAOA,QAAQ,CAACI,gBAAgB,EAAE;EACpC;EACA,OAAO,EAAE;AACX;AAEO,eAAeC,2BAA2B,CAC/CP,OAAuB,EACvBC,gBAAwB,EACJ;EACpB,MAAMO,QAAQ,GAAG,MAAMT,oCAAoC,CAACC,OAAO,EAAEC,gBAAgB,CAAC;EACtF;EACA;EACA;EACA,MAAMQ,eAAe,GAAG,IAAIC,GAAG,EAAE;EACjC,MAAMC,OAAO,CAACC,GAAG,CACfJ,QAAQ,CAACK,GAAG,CAAC,MAAMC,OAAO,IAAI;IAC5B,IAAI;MACF,MAAMA,OAAO,CAACC,gBAAgB,EAAE;MAChCN,eAAe,CAACO,GAAG,CAACF,OAAO,CAACG,EAAE,CAAC;IACjC,CAAC,CAAC,OAAOC,CAAM,EAAE;MACf,IACEA,CAAC,CAACC,IAAI,KAAK,yBAAyB,IACpCD,CAAC,CAACE,OAAO,CAACC,QAAQ,CAAC,sEAAsE,CAAC,EAC1F;QACA;QACA;MACF;MACA,MAAMH,CAAC;IACT;EACF,CAAC,CAAC,CACH;EACD,OAAOV,QAAQ,CAACc,MAAM,CAACR,OAAO,IAAIL,eAAe,CAACc,GAAG,CAACT,OAAO,CAACG,EAAE,CAAC,CAAC;AACpE;AAEO,eAAeO,6BAA6B,CACjDxB,OAAuB,EACvBC,gBAAwB,EACL;EACnB,MAAMC,QAAQ,GAAG,MAAMC,sBAAQ,CAACC,SAAS,CAACJ,OAAO,EAAE;IAAEK,UAAU,EAAEJ;EAAiB,CAAC,CAAC;EACpF,IAAI,CAACC,QAAQ,EAAE;IACb,MAAM,KAAIuB,uBAAY,EAAE,kDAAiDxB,gBAAiB,GAAE,CAAC;EAC/F;EACA,OAAOC,QAAQ;AACjB"}