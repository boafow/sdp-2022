{"version":3,"file":"distributionCert.js","names":["AppleTooManyCertsError","CommandError","getCertificateBySerialNumberAsync","context","serialNumber","cert","Certificate","getAsync","find","item","attributes","getDistributionCertificateAync","certificates","query","filter","certificateType","CertificateType","IOS_DISTRIBUTION","certificate","transformCertificate","id","name","status","created","Date","requestedDate","getTime","expires","expirationDate","ownerName","ownerId","listDistributionCertificatesAsync","authCtx","spinner","ora","start","getRequestContext","certs","DISTRIBUTION","MAC_APP_DISTRIBUTION","map","succeed","error","fail","createDistributionCertificateAsync","results","createCertificateAndP12Async","certId","certP12","certificateP12","certPassword","password","certPrivateSigningKey","privateSigningKey","distCertSerialNumber","teamId","team","teamName","test","message","ErrorCodes","APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR","revokeDistributionCertificateAsync","ids","length","Promise","all","deleteAsync","isDistCert","obj","chalk","underline","DistCertManager","constructor","ctx","list","create","revoke","format","expiresDate","_formatTimestamp","createdDate","timestamp","dateformat"],"sources":["../../src/appleApi/distributionCert.ts"],"sourcesContent":["import {\n  Certificate,\n  CertificateType,\n  createCertificateAndP12Async,\n  RequestContext,\n} from '@expo/apple-utils';\nimport chalk from 'chalk';\nimport dateformat from 'dateformat';\n\nimport CommandError, { ErrorCodes } from '../CommandError';\nimport { ora } from '../utils/ora';\nimport { AppleCtx, getRequestContext } from './authenticate';\n\nexport type DistCertInfo = {\n  id: string;\n  name: string;\n  status: string;\n  created: number;\n  expires: number;\n  ownerName: string;\n  ownerId: string;\n  serialNumber: string;\n};\n\nexport type DistCert = {\n  certId?: string;\n  certP12: string;\n  certPassword: string;\n  certPrivateSigningKey?: string;\n  distCertSerialNumber?: string;\n  teamId: string;\n  teamName?: string;\n};\n\nexport class AppleTooManyCertsError extends CommandError {}\n\nexport async function getCertificateBySerialNumberAsync(\n  context: RequestContext,\n  serialNumber: string\n): Promise<Certificate> {\n  const cert = (await Certificate.getAsync(context)).find(\n    item => item.attributes.serialNumber === serialNumber\n  );\n  if (!cert) {\n    throw new CommandError(`No certificate exists with serial number \"${serialNumber}\"`);\n  }\n  return cert;\n}\n\nexport async function getDistributionCertificateAync(\n  context: RequestContext,\n  serialNumber: string\n): Promise<Certificate | null> {\n  // At most, this returns 2 values.\n  const certificates = await Certificate.getAsync(context, {\n    query: {\n      filter: {\n        certificateType: CertificateType.IOS_DISTRIBUTION,\n      },\n    },\n  });\n  return (\n    certificates.find(certificate => certificate.attributes.serialNumber === serialNumber) ?? null\n  );\n}\n\nexport function transformCertificate(cert: Certificate): DistCertInfo {\n  return {\n    id: cert.id,\n    name: cert.attributes.name,\n    status: cert.attributes.status,\n    created: new Date(cert.attributes.requestedDate).getTime() / 1000,\n    expires: new Date(cert.attributes.expirationDate).getTime() / 1000,\n    ownerName: cert.attributes.ownerName,\n    ownerId: cert.attributes.ownerId,\n    serialNumber: cert.attributes.serialNumber,\n  };\n}\n\nexport async function listDistributionCertificatesAsync(\n  authCtx: AppleCtx\n): Promise<DistCertInfo[]> {\n  const spinner = ora(`Fetching Apple distribution certificates`).start();\n  try {\n    const context = getRequestContext(authCtx);\n    const certs = (\n      await Certificate.getAsync(context, {\n        query: {\n          filter: {\n            certificateType: [\n              CertificateType.DISTRIBUTION,\n              CertificateType.IOS_DISTRIBUTION,\n              CertificateType.MAC_APP_DISTRIBUTION,\n            ],\n          },\n        },\n      })\n    ).map(transformCertificate);\n    spinner.succeed(`Fetched Apple distribution certificates`);\n    return certs;\n  } catch (error: any) {\n    spinner.fail(`Failed to fetch Apple distribution certificates`);\n    throw error;\n  }\n}\n\n/**\n * Run from `eas credentials` -> iOS -> Add new Distribution Certificate\n */\nexport async function createDistributionCertificateAsync(authCtx: AppleCtx): Promise<DistCert> {\n  const spinner = ora(`Creating Apple distribution certificate`).start();\n  try {\n    const context = getRequestContext(authCtx);\n    const results = await createCertificateAndP12Async(context, {\n      certificateType: CertificateType.IOS_DISTRIBUTION,\n    });\n    spinner.succeed(`Created Apple distribution certificate`);\n    return {\n      certId: results.certificate.id,\n      certP12: results.certificateP12,\n      certPassword: results.password,\n      certPrivateSigningKey: results.privateSigningKey,\n      distCertSerialNumber: results.certificate.attributes.serialNumber,\n      teamId: authCtx.team.id,\n      teamName: authCtx.team.name,\n    };\n  } catch (error: any) {\n    spinner.fail('Failed to create Apple distribution certificate');\n    // TODO: Move check into apple-utils\n    if (\n      /You already have a current .* certificate or a pending certificate request/.test(\n        error.message\n      )\n    ) {\n      throw new AppleTooManyCertsError(\n        ErrorCodes.APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR,\n        APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR\n      );\n    }\n    throw error;\n  }\n}\n\nexport async function revokeDistributionCertificateAsync(\n  authCtx: AppleCtx,\n  ids: string[]\n): Promise<void> {\n  const name = `Apple distribution certificate${ids?.length === 1 ? '' : 's'}`;\n  const spinner = ora(`Revoking ${name}`).start();\n  try {\n    const context = getRequestContext(authCtx);\n    await Promise.all(ids.map(id => Certificate.deleteAsync(context, { id })));\n\n    spinner.succeed(`Revoked ${name}`);\n  } catch (error: any) {\n    spinner.fail(`Failed to revoke ${name}`);\n    throw error;\n  }\n}\n\nexport function isDistCert(obj: { [key: string]: any }): obj is DistCert {\n  return (\n    obj.certP12 &&\n    typeof obj.certP12 === 'string' &&\n    obj.certPassword &&\n    typeof obj.certPassword === 'string' &&\n    obj.teamId &&\n    typeof obj.teamId === 'string'\n  );\n}\n\nconst APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR = `\nYou can have only ${chalk.underline(\n  'three'\n)} Apple Distribution Certificates generated on your Apple Developer account.\nPlease revoke the old ones or reuse existing from your other apps.\nPlease remember that Apple Distribution Certificates are not application specific!\n`;\n\nexport class DistCertManager {\n  constructor(public ctx: AppleCtx) {}\n\n  async list(): Promise<DistCertInfo[]> {\n    return listDistributionCertificatesAsync(this.ctx);\n  }\n  async create(): Promise<DistCert> {\n    return createDistributionCertificateAsync(this.ctx);\n  }\n  async revoke(ids: string[]) {\n    return revokeDistributionCertificateAsync(this.ctx, ids);\n  }\n\n  format({ name, id, status, expires, created, ownerName }: DistCertInfo): string {\n    const expiresDate = _formatTimestamp(expires);\n    const createdDate = _formatTimestamp(created);\n    return `${name} (${status}) - ID: ${id} - expires: ${expiresDate} (created: ${createdDate}) - owner: ${ownerName}`;\n  }\n}\n\nfunction _formatTimestamp(timestamp: number): string {\n  return dateformat(new Date(timestamp * 1000));\n}\n"],"mappings":"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"}