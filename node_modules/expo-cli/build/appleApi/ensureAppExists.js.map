{"version":3,"file":"ensureAppExists.js","names":["ensureBundleIdExistsAsync","authCtx","accountName","projectName","bundleIdentifier","options","ensureBundleIdExistsWithNameAsync","name","context","getRequestContext","spinner","ora","chalk","dim","start","bundleId","BundleId","findAsync","identifier","text","createAsync","succeed","err","message","match","fail","bold","team","id","assertContractMessagesAsync","updateBundleIdCapabilityAsync","capabilityType","CapabilityType","PUSH_NOTIFICATIONS","option","enablePushNotifications","CapabilityTypeOption","ON","OFF"],"sources":["../../src/appleApi/ensureAppExists.ts"],"sourcesContent":["import { BundleId, CapabilityType, CapabilityTypeOption } from '@expo/apple-utils';\nimport chalk from 'chalk';\n\nimport { ora } from '../utils/ora';\nimport { AppleCtx, getRequestContext } from './authenticate';\nimport { assertContractMessagesAsync } from './contractMessages';\n\nexport interface EnsureAppExistsOptions {\n  enablePushNotifications?: boolean;\n}\n\nexport interface AppLookupParams {\n  accountName: string;\n  projectName: string;\n  bundleIdentifier: string;\n}\n\nexport async function ensureBundleIdExistsAsync(\n  authCtx: AppleCtx,\n  { accountName, projectName, bundleIdentifier }: AppLookupParams,\n  options?: EnsureAppExistsOptions\n) {\n  return ensureBundleIdExistsWithNameAsync(\n    authCtx,\n    {\n      name: `@${accountName}/${projectName}`,\n      bundleIdentifier,\n    },\n    options\n  );\n}\n\nexport async function ensureBundleIdExistsWithNameAsync(\n  authCtx: AppleCtx,\n  { name, bundleIdentifier }: { name: string; bundleIdentifier: string },\n  options?: EnsureAppExistsOptions\n) {\n  const context = getRequestContext(authCtx);\n  let spinner = ora(`Linking bundle identifier ${chalk.dim(bundleIdentifier)}`).start();\n\n  let bundleId: BundleId | null;\n  try {\n    // Get the bundle id\n    bundleId = await BundleId.findAsync(context, { identifier: bundleIdentifier });\n\n    if (!bundleId) {\n      spinner.text = `Registering bundle identifier ${chalk.dim(bundleIdentifier)}`;\n      // If it doesn't exist, create it\n      bundleId = await BundleId.createAsync(context, {\n        name,\n        identifier: bundleIdentifier,\n      });\n    }\n    spinner.succeed(`Bundle identifier registered ${chalk.dim(bundleIdentifier)}`);\n  } catch (err: any) {\n    if (err.message.match(/An App ID with Identifier '(.*)' is not available/)) {\n      spinner.fail(\n        `The bundle identifier ${chalk.bold(bundleIdentifier)} is not available to team \"${\n          authCtx.team.name\n        }\" (${authCtx.team.id}), please change it in your app config and try again.`\n      );\n    } else {\n      spinner.fail(`Failed to register bundle identifier ${chalk.dim(bundleIdentifier)}`);\n\n      // Assert contract errors for easier resolution when the user has an expired developer account.\n      if (err.message.match(/forbidden for security reasons/)) {\n        await assertContractMessagesAsync(context);\n      }\n    }\n\n    throw err;\n  }\n\n  if (options) {\n    try {\n      spinner = ora(`Syncing capabilities`).start();\n\n      // Update the capabilities\n      await bundleId.updateBundleIdCapabilityAsync({\n        capabilityType: CapabilityType.PUSH_NOTIFICATIONS,\n        option: options.enablePushNotifications\n          ? CapabilityTypeOption.ON\n          : CapabilityTypeOption.OFF,\n        // TODO: Add more capabilities\n      });\n      spinner.succeed(`Synced capabilities`);\n    } catch (err: any) {\n      spinner.fail(`Failed to sync capabilities ${chalk.dim(bundleIdentifier)}`);\n\n      throw err;\n    }\n  }\n}\n"],"mappings":"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"}