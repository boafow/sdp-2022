{"version":3,"file":"p12Certificate.js","names":["getP12CertFingerprint","p12Buffer","passwordRaw","certData","getRawCertData","certAsn1","forge","pki","certificateToAsn1","certDer","asn1","toDer","getBytes","md","sha1","create","update","digest","toHex","toUpperCase","findP12CertSerialNumber","serialNumber","getCertData","replace","Buffer","isBuffer","toString","Error","password","String","p12Der","util","decode64","p12Asn1","fromDer","p12","pkcs12","pkcs12FromAsn1","certBagType","oids","certBag","getBags","bagType","cert"],"sources":["../../src/appleApi/p12Certificate.ts"],"sourcesContent":["import forge, { pki } from 'node-forge';\n\nexport function getP12CertFingerprint(\n  p12Buffer: Buffer | string,\n  passwordRaw: string | null\n): string {\n  const certData = getRawCertData(p12Buffer, passwordRaw);\n  const certAsn1 = forge.pki.certificateToAsn1(certData);\n  const certDer = forge.asn1.toDer(certAsn1).getBytes();\n  return forge.md.sha1.create().update(certDer).digest().toHex().toUpperCase();\n}\n\nexport function findP12CertSerialNumber(\n  p12Buffer: Buffer | string,\n  passwordRaw: string | null\n): string {\n  const { serialNumber } = getCertData(p12Buffer, passwordRaw);\n  return serialNumber;\n}\n\nexport function getCertData(\n  p12Buffer: Buffer | string,\n  passwordRaw: string | null\n): pki.Certificate {\n  const certData = getRawCertData(p12Buffer, passwordRaw);\n  return {\n    ...certData,\n    serialNumber: certData.serialNumber.replace(/^0+/, '').toUpperCase(),\n  };\n}\n\nfunction getRawCertData(p12Buffer: Buffer | string, passwordRaw: string | null): pki.Certificate {\n  if (Buffer.isBuffer(p12Buffer)) {\n    p12Buffer = p12Buffer.toString('base64');\n  } else if (typeof p12Buffer !== 'string') {\n    throw new Error('getCertData only takes strings and buffers.');\n  }\n\n  const password = String(passwordRaw || '');\n  const p12Der = forge.util.decode64(p12Buffer);\n  const p12Asn1 = forge.asn1.fromDer(p12Der);\n  const p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, password);\n  const certBagType = forge.pki.oids.certBag;\n  const certData = p12.getBags({ bagType: certBagType })?.[certBagType]?.[0]?.cert;\n  if (!certData) {\n    throw new Error(\"getRawCertData: couldn't find cert bag\");\n  }\n  return certData;\n}\n"],"mappings":";;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAwC;AAEjC,SAASA,qBAAqB,CACnCC,SAA0B,EAC1BC,WAA0B,EAClB;EACR,MAAMC,QAAQ,GAAGC,cAAc,CAACH,SAAS,EAAEC,WAAW,CAAC;EACvD,MAAMG,QAAQ,GAAGC,oBAAK,CAACC,GAAG,CAACC,iBAAiB,CAACL,QAAQ,CAAC;EACtD,MAAMM,OAAO,GAAGH,oBAAK,CAACI,IAAI,CAACC,KAAK,CAACN,QAAQ,CAAC,CAACO,QAAQ,EAAE;EACrD,OAAON,oBAAK,CAACO,EAAE,CAACC,IAAI,CAACC,MAAM,EAAE,CAACC,MAAM,CAACP,OAAO,CAAC,CAACQ,MAAM,EAAE,CAACC,KAAK,EAAE,CAACC,WAAW,EAAE;AAC9E;AAEO,SAASC,uBAAuB,CACrCnB,SAA0B,EAC1BC,WAA0B,EAClB;EACR,MAAM;IAAEmB;EAAa,CAAC,GAAGC,WAAW,CAACrB,SAAS,EAAEC,WAAW,CAAC;EAC5D,OAAOmB,YAAY;AACrB;AAEO,SAASC,WAAW,CACzBrB,SAA0B,EAC1BC,WAA0B,EACT;EACjB,MAAMC,QAAQ,GAAGC,cAAc,CAACH,SAAS,EAAEC,WAAW,CAAC;EACvD,OAAO;IACL,GAAGC,QAAQ;IACXkB,YAAY,EAAElB,QAAQ,CAACkB,YAAY,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACJ,WAAW;EACpE,CAAC;AACH;AAEA,SAASf,cAAc,CAACH,SAA0B,EAAEC,WAA0B,EAAmB;EAAA;EAC/F,IAAIsB,MAAM,CAACC,QAAQ,CAACxB,SAAS,CAAC,EAAE;IAC9BA,SAAS,GAAGA,SAAS,CAACyB,QAAQ,CAAC,QAAQ,CAAC;EAC1C,CAAC,MAAM,IAAI,OAAOzB,SAAS,KAAK,QAAQ,EAAE;IACxC,MAAM,IAAI0B,KAAK,CAAC,6CAA6C,CAAC;EAChE;EAEA,MAAMC,QAAQ,GAAGC,MAAM,CAAC3B,WAAW,IAAI,EAAE,CAAC;EAC1C,MAAM4B,MAAM,GAAGxB,oBAAK,CAACyB,IAAI,CAACC,QAAQ,CAAC/B,SAAS,CAAC;EAC7C,MAAMgC,OAAO,GAAG3B,oBAAK,CAACI,IAAI,CAACwB,OAAO,CAACJ,MAAM,CAAC;EAC1C,MAAMK,GAAG,GAAG7B,oBAAK,CAAC8B,MAAM,CAACC,cAAc,CAACJ,OAAO,EAAEL,QAAQ,CAAC;EAC1D,MAAMU,WAAW,GAAGhC,oBAAK,CAACC,GAAG,CAACgC,IAAI,CAACC,OAAO;EAC1C,MAAMrC,QAAQ,mBAAGgC,GAAG,CAACM,OAAO,CAAC;IAAEC,OAAO,EAAEJ;EAAY,CAAC,CAAC,0EAArC,aAAwCA,WAAW,CAAC,oFAApD,sBAAuD,CAAC,CAAC,2DAAzD,uBAA2DK,IAAI;EAChF,IAAI,CAACxC,QAAQ,EAAE;IACb,MAAM,IAAIwB,KAAK,CAAC,wCAAwC,CAAC;EAC3D;EACA,OAAOxB,QAAQ;AACjB"}