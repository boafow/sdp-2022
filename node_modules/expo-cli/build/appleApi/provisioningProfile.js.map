{"version":3,"file":"provisioningProfile.js","names":["ProfileClass","resolveProfileType","profileClass","isEnterprise","Adhoc","ProfileType","IOS_APP_ADHOC","IOS_APP_INHOUSE","IOS_APP_STORE","transformProfileAsync","cert","authCtx","provisioningProfileId","id","name","attributes","status","profileState","expires","Date","expirationDate","getTime","distributionMethod","profileType","provisioningProfile","profileContent","certificates","getCertificatesAsync","map","transformCertificate","teamId","team","teamName","addCertificateToProfileAsync","context","serialNumber","profileId","bundleIdentifier","getCertificateBySerialNumberAsync","profiles","getProfilesForBundleIdAsync","profile","find","CommandError","regenerateAsync","useExistingProvisioningProfileAsync","distCert","certIdTag","certId","spinner","ora","start","distCertSerialNumber","findP12CertSerialNumber","certP12","certPassword","getRequestContext","content","result","succeed","error","fail","listProvisioningProfilesAsync","General","inHouse","filter","Promise","all","createProvisioningProfileAsync","profileName","certificate","bundleIdItem","getBundleIdForIdentifierAsync","Profile","createAsync","bundleId","devices","revokeProvisioningProfileAsync","deleteAsync","ProvisioningProfileManager","constructor","ctx","useExisting","list","create","revoke"],"sources":["../../src/appleApi/provisioningProfile.ts"],"sourcesContent":["import { Profile, ProfileType, RequestContext } from '@expo/apple-utils';\n\nimport CommandError from '../CommandError';\nimport { ora } from '../utils/ora';\nimport { AppleCtx, getRequestContext } from './authenticate';\nimport { getBundleIdForIdentifierAsync, getProfilesForBundleIdAsync } from './bundleId';\nimport {\n  DistCert,\n  DistCertInfo,\n  getCertificateBySerialNumberAsync,\n  transformCertificate,\n} from './distributionCert';\nimport { findP12CertSerialNumber } from './p12Certificate';\n\nexport type ProvisioningProfileInfo = {\n  name: string;\n  status: string;\n  expires: number;\n  distributionMethod: string;\n  certificates: DistCertInfo[];\n} & ProvisioningProfile;\n\nexport type ProvisioningProfile = {\n  provisioningProfileId?: string;\n  provisioningProfile: string;\n  teamId: string;\n  teamName?: string;\n};\n\nexport enum ProfileClass {\n  Adhoc = 'ad_hoc',\n  General = 'general',\n}\n\nfunction resolveProfileType(profileClass: ProfileClass, isEnterprise?: boolean): ProfileType {\n  if (isEnterprise) {\n    return profileClass === ProfileClass.Adhoc\n      ? ProfileType.IOS_APP_ADHOC\n      : ProfileType.IOS_APP_INHOUSE;\n  } else {\n    return profileClass === ProfileClass.Adhoc\n      ? ProfileType.IOS_APP_ADHOC\n      : ProfileType.IOS_APP_STORE;\n  }\n}\n\nasync function transformProfileAsync(\n  cert: Profile,\n  authCtx: AppleCtx\n): Promise<ProvisioningProfileInfo> {\n  return {\n    provisioningProfileId: cert.id,\n    name: cert.attributes.name,\n    status: cert.attributes.profileState,\n    expires: new Date(cert.attributes.expirationDate).getTime() / 1000,\n    distributionMethod: cert.attributes.profileType,\n    // @ts-ignore -- this can be null when the profile has expired.\n    provisioningProfile: cert.attributes.profileContent,\n    certificates: (await cert.getCertificatesAsync()).map(transformCertificate),\n    teamId: authCtx.team.id,\n    teamName: authCtx.team.name,\n  };\n}\n\nasync function addCertificateToProfileAsync(\n  context: RequestContext,\n  {\n    serialNumber,\n    profileId,\n    bundleIdentifier,\n  }: {\n    serialNumber: string;\n    profileId: string;\n    bundleIdentifier: string;\n  }\n) {\n  const cert = await getCertificateBySerialNumberAsync(context, serialNumber);\n\n  const profiles = await getProfilesForBundleIdAsync(context, bundleIdentifier);\n  const profile = profiles.find(profile => profile.id === profileId);\n  if (!profile) {\n    throw new CommandError(\n      `Failed to find profile for bundle identifier \"${bundleIdentifier}\" with profile id \"${profileId}\"`\n    );\n  }\n\n  // Assign the new certificate\n  profile.attributes.certificates = [cert];\n  return await profile.regenerateAsync();\n}\n\nasync function useExistingProvisioningProfileAsync(\n  authCtx: AppleCtx,\n  bundleIdentifier: string,\n  provisioningProfile: ProvisioningProfile,\n  distCert: DistCert\n): Promise<ProvisioningProfile> {\n  if (!provisioningProfile.provisioningProfileId) {\n    throw new CommandError('Provisioning profile: cannot use existing profile, insufficient id');\n  }\n  const certIdTag = distCert.certId ? ` (${distCert.certId})` : '';\n\n  const spinner = ora(\n    `Updating provisioning profile (${provisioningProfile.provisioningProfileId}) with distribution certificate${certIdTag}`\n  ).start();\n  try {\n    if (!distCert.distCertSerialNumber) {\n      distCert.distCertSerialNumber = findP12CertSerialNumber(\n        distCert.certP12,\n        distCert.certPassword\n      );\n    }\n\n    const context = getRequestContext(authCtx);\n    const profile = await addCertificateToProfileAsync(context, {\n      serialNumber: distCert.distCertSerialNumber,\n      profileId: provisioningProfile.provisioningProfileId,\n      bundleIdentifier,\n    });\n    const content = profile.attributes.profileContent;\n    if (!content) {\n      // this should never happen because of the regen.\n      throw new CommandError(\n        `Provisioning profile \"${profile.attributes.name}\" (${profile.id}) is expired!`\n      );\n    }\n    const result = {\n      provisioningProfileId: profile.id,\n      provisioningProfile: content,\n      teamId: authCtx.team.id,\n      teamName: authCtx.team.name,\n    };\n    spinner.succeed(\n      `Updated provisioning profile (${profile.id}) with distribution certificate${certIdTag}`\n    );\n    return {\n      ...result,\n      teamId: authCtx.team.id,\n      teamName: authCtx.team.name,\n    };\n  } catch (error: any) {\n    spinner.fail(\n      `Failed to update provisioning profile (${provisioningProfile.provisioningProfileId}) with distribution certificate${certIdTag}`\n    );\n    throw error;\n  }\n}\n\nasync function listProvisioningProfilesAsync(\n  authCtx: AppleCtx,\n  bundleIdentifier: string,\n  profileClass: ProfileClass = ProfileClass.General\n): Promise<ProvisioningProfileInfo[]> {\n  const spinner = ora(`Fetching Apple provisioning profiles`).start();\n  try {\n    const context = getRequestContext(authCtx);\n    const profileType = resolveProfileType(profileClass, authCtx.team.inHouse);\n    const profiles = (await getProfilesForBundleIdAsync(context, bundleIdentifier)).filter(\n      profile => profile.attributes.profileType === profileType\n    );\n\n    const result = await Promise.all(\n      profiles.map(profile => transformProfileAsync(profile, authCtx))\n    );\n\n    spinner.succeed(`Fetched Apple provisioning profiles`);\n    return result;\n  } catch (error: any) {\n    spinner.fail(`Failed to fetch Apple provisioning profiles`);\n    throw error;\n  }\n}\n\nasync function createProvisioningProfileAsync(\n  authCtx: AppleCtx,\n  bundleIdentifier: string,\n  distCert: DistCert,\n  profileName: string,\n  profileClass: ProfileClass = ProfileClass.General\n): Promise<ProvisioningProfile> {\n  const spinner = ora(`Creating Apple provisioning profile`).start();\n  try {\n    if (!distCert.distCertSerialNumber) {\n      distCert.distCertSerialNumber = findP12CertSerialNumber(\n        distCert.certP12,\n        distCert.certPassword\n      );\n    }\n\n    const context = getRequestContext(authCtx);\n    const profileType = resolveProfileType(profileClass, authCtx.team.inHouse);\n\n    const certificate = await getCertificateBySerialNumberAsync(\n      context,\n      distCert.distCertSerialNumber\n    );\n\n    const bundleIdItem = await getBundleIdForIdentifierAsync(context, bundleIdentifier);\n\n    const profile = await Profile.createAsync(context, {\n      bundleId: bundleIdItem.id,\n      name: profileName,\n      certificates: [certificate.id],\n      devices: [],\n      profileType,\n    });\n\n    const result = await transformProfileAsync(profile, authCtx);\n\n    spinner.succeed('Created Apple provisioning profile');\n    return result;\n  } catch (error: any) {\n    spinner.fail('Failed to create Apple provisioning profile');\n    throw error;\n  }\n}\n\nasync function revokeProvisioningProfileAsync(\n  authCtx: AppleCtx,\n  bundleIdentifier: string,\n  profileClass: ProfileClass = ProfileClass.General\n): Promise<void> {\n  const spinner = ora(`Revoking Apple provisioning profile`).start();\n  try {\n    const context = getRequestContext(authCtx);\n\n    const profiles = await getProfilesForBundleIdAsync(context, bundleIdentifier);\n    const profileType = resolveProfileType(profileClass, authCtx.team.inHouse);\n    await Promise.all(\n      profiles\n        .filter(profile => profile.attributes.profileType === profileType)\n        .map(profile => Profile.deleteAsync(context, { id: profile.id }))\n    );\n    spinner.succeed('Revoked Apple provisioning profile');\n  } catch (error: any) {\n    spinner.fail('Failed to revoke Apple provisioning profile');\n    throw error;\n  }\n}\n\nexport class ProvisioningProfileManager {\n  constructor(public ctx: AppleCtx) {}\n\n  async useExisting<T extends DistCert>(\n    bundleIdentifier: string,\n    provisioningProfile: ProvisioningProfile,\n    distCert: T\n  ): Promise<ProvisioningProfile> {\n    return useExistingProvisioningProfileAsync(\n      this.ctx,\n      bundleIdentifier,\n      provisioningProfile,\n      distCert\n    );\n  }\n\n  async list(bundleIdentifier: string): Promise<ProvisioningProfileInfo[]> {\n    return listProvisioningProfilesAsync(this.ctx, bundleIdentifier);\n  }\n\n  async create<T extends DistCert>(\n    bundleIdentifier: string,\n    distCert: T,\n    profileName: string\n  ): Promise<ProvisioningProfile> {\n    return createProvisioningProfileAsync(this.ctx, bundleIdentifier, distCert, profileName);\n  }\n\n  async revoke(bundleIdentifier: string) {\n    return revokeProvisioningProfileAsync(this.ctx, bundleIdentifier);\n  }\n}\n"],"mappings":"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"}