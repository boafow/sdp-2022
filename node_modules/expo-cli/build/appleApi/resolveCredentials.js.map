{"version":3,"file":"resolveCredentials.js","names":["resolveCredentialsAsync","options","credentials","getAppleIdFromEnvironmentOrOptions","username","promptUsernameAsync","password","userCredentials","passedAppleId","process","env","EXPO_APPLE_ID","passedAppleIdPassword","EXPO_APPLE_PASSWORD","EXPO_APPLE_ID_PASSWORD","undefined","Log","error","CommandError","log","lastAppleId","getCachedUsernameAsync","promptAsync","type","name","message","validate","val","initial","cacheUsernameAsync","Keychain","EXPO_NO_KEYCHAIN","cachedPath","JsonFileCache","usernameCachePath","cacheAsync","promptPasswordAsync","cachedPassword","getCachedPasswordAsync","learnMore","wrapAnsi","chalk","bold","stdout","columns","cachePasswordAsync","fs","remove","cached","getCacheAsync","getKeychainServiceName","appleId","deletePasswordAsync","serviceName","success","getPasswordAsync","setPasswordAsync"],"sources":["../../src/appleApi/resolveCredentials.ts"],"sourcesContent":["import { Auth, JsonFileCache } from '@expo/apple-utils';\nimport chalk from 'chalk';\nimport * as fs from 'fs-extra';\nimport wrapAnsi from 'wrap-ansi';\n\nimport CommandError from '../CommandError';\nimport { learnMore } from '../commands/utils/TerminalLink';\nimport Log from '../log';\nimport promptAsync from '../utils/prompts';\nimport * as Keychain from './keychain';\n\n/**\n * Get the username and possibly the password from the environment variables or the supplied options.\n * Password is optional because it's only needed for authentication, but not for re-authentication.\n *\n * @param options\n */\nexport async function resolveCredentialsAsync(\n  options: Partial<Auth.UserCredentials>\n): Promise<Partial<Auth.UserCredentials>> {\n  const credentials = getAppleIdFromEnvironmentOrOptions(options);\n\n  if (!credentials.username) {\n    credentials.username = await promptUsernameAsync();\n  }\n\n  return credentials;\n}\n\nfunction getAppleIdFromEnvironmentOrOptions({\n  username,\n  password,\n  ...userCredentials\n}: Partial<Auth.UserCredentials>): Partial<Auth.UserCredentials> {\n  const passedAppleId = username || process.env.EXPO_APPLE_ID;\n  const passedAppleIdPassword = passedAppleId\n    ? password || process.env.EXPO_APPLE_PASSWORD || process.env.EXPO_APPLE_ID_PASSWORD\n    : undefined;\n\n  if (process.env.EXPO_APPLE_ID_PASSWORD) {\n    Log.error('EXPO_APPLE_ID_PASSWORD is deprecated, please use EXPO_APPLE_PASSWORD instead!');\n  }\n\n  // partial apple id params were set, assume user has intention of passing it in\n  if (process.env.EXPO_APPLE_ID && !passedAppleIdPassword) {\n    throw new CommandError(\n      'In order to provide your Apple ID credentials, you must set the --apple-id flag and set the EXPO_APPLE_PASSWORD environment variable.'\n    );\n  }\n  return {\n    ...userCredentials,\n    username: passedAppleId,\n    password: passedAppleIdPassword,\n  };\n}\n\nasync function promptUsernameAsync(): Promise<string> {\n  Log.log('\\u203A Log in to your Apple Developer account to continue');\n\n  // Get the email address that was last used and set it as\n  // the default value for quicker authentication.\n  const lastAppleId = await getCachedUsernameAsync();\n\n  const { username } = await promptAsync({\n    type: 'text',\n    name: 'username',\n    message: `Apple ID:`,\n    validate: (val: string) => val !== '',\n    initial: lastAppleId ?? undefined,\n  });\n\n  if (username && username !== lastAppleId) {\n    await cacheUsernameAsync(username);\n  }\n\n  return username;\n}\n\nasync function cacheUsernameAsync(username: string): Promise<void> {\n  // If a new email was used then store it as a suggestion for next time.\n  // This functionality is disabled using the keychain mechanism.\n  if (!Keychain.EXPO_NO_KEYCHAIN && username) {\n    const cachedPath = JsonFileCache.usernameCachePath();\n    await JsonFileCache.cacheAsync(cachedPath, { username });\n  }\n}\n\nexport async function promptPasswordAsync({\n  username,\n}: Pick<Auth.UserCredentials, 'username'>): Promise<string> {\n  const cachedPassword = await getCachedPasswordAsync({ username });\n\n  if (cachedPassword) {\n    Log.log(`\\u203A Using password for ${username} from your local Keychain`);\n    Log.log(`  ${learnMore('https://docs.expo.dev/distribution/security#keychain')}`);\n    return cachedPassword;\n  }\n\n  // https://docs.expo.dev/distribution/security/#apple-developer-account-credentials\n  Log.log(\n    wrapAnsi(\n      chalk.bold(\n        `\\u203A The password is only used to authenticate with Apple and never stored on EAS servers`\n      ),\n      process.stdout.columns || 80\n    )\n  );\n  Log.log(`  ${learnMore('https://bit.ly/2VtGWhU')}`);\n\n  const { password } = await promptAsync({\n    type: 'password',\n    name: 'password',\n    message: () => `Password (for ${username}):`,\n    validate: (val: string) => val !== '',\n  });\n\n  // TODO: Save only after the auth completes successfully.\n  await cachePasswordAsync({ username, password });\n  return password;\n}\n\nasync function getCachedUsernameAsync(): Promise<string | null> {\n  if (Keychain.EXPO_NO_KEYCHAIN) {\n    // Clear last used apple ID.\n    await fs.remove(JsonFileCache.usernameCachePath());\n    return null;\n  }\n  const cached = await JsonFileCache.getCacheAsync(JsonFileCache.usernameCachePath());\n  const lastAppleId = cached?.username ?? null;\n  return typeof lastAppleId === 'string' ? lastAppleId : null;\n}\n\n/**\n * Returns the same prefix used by Fastlane in order to potentially share access between services.\n * [Cite. Fastlane](https://github.com/fastlane/fastlane/blob/f831062fa6f4b216b8ee38949adfe28fc11a0a8e/credentials_manager/lib/credentials_manager/account_manager.rb#L8).\n *\n * @param appleId email address\n */\nfunction getKeychainServiceName(appleId: string): string {\n  return `deliver.${appleId}`;\n}\n\nexport async function deletePasswordAsync({\n  username,\n}: Pick<Auth.UserCredentials, 'username'>): Promise<boolean> {\n  const serviceName = getKeychainServiceName(username);\n  const success = await Keychain.deletePasswordAsync({ username, serviceName });\n  if (success) {\n    Log.log('\\u203A Removed Apple ID password from the native Keychain');\n  }\n  return success;\n}\n\nasync function getCachedPasswordAsync({\n  username,\n}: Pick<Auth.UserCredentials, 'username'>): Promise<string | null> {\n  // If the user opts out, delete the password.\n  if (Keychain.EXPO_NO_KEYCHAIN) {\n    await deletePasswordAsync({ username });\n    return null;\n  }\n\n  const serviceName = getKeychainServiceName(username);\n  return Keychain.getPasswordAsync({ username, serviceName });\n}\n\nasync function cachePasswordAsync({ username, password }: Auth.UserCredentials): Promise<boolean> {\n  if (Keychain.EXPO_NO_KEYCHAIN) {\n    Log.log('\\u203A Skip storing Apple ID password in the local Keychain.');\n    return false;\n  }\n\n  Log.log(`\\u203A Saving Apple ID password to the local Keychain`);\n  Log.log(`  ${learnMore('https://docs.expo.dev/distribution/security#keychain')}`);\n  const serviceName = getKeychainServiceName(username);\n  return Keychain.setPasswordAsync({ username, password, serviceName });\n}\n"],"mappings":"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"}