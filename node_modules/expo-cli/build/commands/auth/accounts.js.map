{"version":3,"file":"accounts.js","names":["UserManager","initialize","UserSecondFactorDeviceMethod","loginOrRegisterAsync","Log","warn","process","env","EXPO_CLI_USERNAME","EXPO_CLI_PASSWORD","login","username","password","program","nonInteractive","CommandError","name","question","type","message","choices","title","value","action","promptNew","openRegistrationInBrowser","newLine","log","chalk","bold","SilentError","loginOrRegisterIfLoggedOutAsync","user","getCurrentUserOnlyAsync","options","getCurrentUserAsync","silent","accessToken","parent","confirmAsync","green","_usernamePasswordAuth","otp","_promptForOTPAsync","cancelBehavior","enterMessage","otpQuestion","_promptForBackupOTPAsync","secondFactorDevices","nonPrimarySecondFactorDevices","filter","device","is_primary","length","hasAuthenticatorSecondFactorDevice","find","method","AUTHENTICATOR","smsNonPrimarySecondFactorDevices","SMS","authenticatorChoiceSentinel","cancelChoiceSentinel","deviceChoices","map","idx","sms_phone_number","push","selectedValue","selectAsync","apiAnonymous","ApiV2","clientForUser","postAsync","secondFactorDeviceID","id","_retryUsernamePasswordAuthWithOTPAsync","metadata","smsAutomaticallySent","assert","undefined","primaryDevice","nested","loginAsync","questions","format","val","trim","validate","nonEmptyInput","answers","data","e","ApiV2Error","code","Error","REGISTRATION_URL","spinner","ora","start","opened","openBrowserAsync","succeed","fail"],"sources":["../../../src/commands/auth/accounts.ts"],"sourcesContent":["import assert from 'assert';\nimport openBrowserAsync from 'better-opn';\nimport chalk from 'chalk';\nimport program from 'commander';\nimport { ApiV2, User, UserManager } from 'xdl';\nimport { ApiV2Error } from 'xdl/build/ApiV2';\n\nimport CommandError, { SilentError } from '../../CommandError';\nimport Log from '../../log';\nimport { ora } from '../../utils/ora';\nimport promptNew, { confirmAsync, Question as NewQuestion, selectAsync } from '../../utils/prompts';\nimport { nonEmptyInput } from '../../utils/validators';\n\nUserManager.initialize();\n\nexport type CommandOptions = {\n  username?: string;\n  password?: string;\n  otp?: string;\n  parent?: {\n    nonInteractive: boolean;\n  };\n};\n\nexport enum UserSecondFactorDeviceMethod {\n  AUTHENTICATOR = 'authenticator',\n  SMS = 'sms',\n}\n\nexport type SecondFactorDevice = {\n  id: string;\n  method: UserSecondFactorDeviceMethod;\n  sms_phone_number: string | null;\n  is_primary: boolean;\n};\n\nexport async function loginOrRegisterAsync(): Promise<User> {\n  Log.warn('An Expo user account is required to proceed.');\n\n  // Always try to auto-login when these variables are set, even in non-interactive mode\n  if (process.env.EXPO_CLI_USERNAME && process.env.EXPO_CLI_PASSWORD) {\n    return login({\n      username: process.env.EXPO_CLI_USERNAME,\n      password: process.env.EXPO_CLI_PASSWORD,\n    });\n  }\n\n  if (program.nonInteractive) {\n    throw new CommandError(\n      'NOT_LOGGED_IN',\n      `Not logged in. Use \\`${program.name()} login -u username -p password\\` to log in.`\n    );\n  }\n\n  const question: NewQuestion = {\n    type: 'select',\n    name: 'action',\n    message: 'How would you like to authenticate?',\n    choices: [\n      {\n        title: 'Make a new Expo account',\n        value: 'register',\n      },\n      {\n        title: 'Log in with an existing Expo account',\n        value: 'existingUser',\n      },\n      {\n        title: 'Cancel',\n        value: 'cancel',\n      },\n    ],\n  };\n\n  const { action } = await promptNew(question);\n\n  if (action === 'register') {\n    openRegistrationInBrowser();\n    Log.newLine();\n    Log.log(\n      `Log in with ${chalk.bold(\n        'expo login'\n      )} after you have created your account through the website.`\n    );\n    throw new SilentError();\n  } else if (action === 'existingUser') {\n    return login({});\n  } else {\n    throw new CommandError('BAD_CHOICE', 'Not logged in.');\n  }\n}\n\nexport async function loginOrRegisterIfLoggedOutAsync(): Promise<User> {\n  const user = await UserManager.getCurrentUserOnlyAsync();\n  if (user) {\n    return user;\n  }\n  return await loginOrRegisterAsync();\n}\n\nexport async function login(options: CommandOptions): Promise<User> {\n  const user = await UserManager.getCurrentUserAsync({ silent: true });\n  if (user?.accessToken) {\n    throw new CommandError(\n      'ACCESS_TOKEN_ERROR',\n      'Please remove the EXPO_TOKEN environment var to login with a different user.'\n    );\n  }\n\n  const nonInteractive = options.parent && options.parent.nonInteractive;\n  if (!nonInteractive) {\n    if (user) {\n      const action = await confirmAsync({\n        message: `You are already logged in as ${chalk.green(user.username)}. Log in as new user?`,\n      });\n      if (!action) {\n        // If user chooses to stay logged in, return\n        return user as User;\n      }\n    }\n    return _usernamePasswordAuth(options.username, options.password, options.otp);\n  } else if (options.username && options.password) {\n    return _usernamePasswordAuth(options.username, options.password, options.otp);\n  } else if (options.username && process.env.EXPO_CLI_PASSWORD) {\n    return _usernamePasswordAuth(options.username, process.env.EXPO_CLI_PASSWORD, options.otp);\n  } else {\n    throw new CommandError(\n      'NON_INTERACTIVE',\n      \"Username and password not provided in non-interactive mode. Set the EXPO_CLI_PASSWORD environment variable if you don't want to pass in passwords through the command line.\"\n    );\n  }\n}\n\n/**\n * Prompt for an OTP with the option to cancel the question by answering empty (pressing return key).\n */\nasync function _promptForOTPAsync(cancelBehavior: 'cancel' | 'menu'): Promise<string | null> {\n  const enterMessage =\n    cancelBehavior === 'cancel'\n      ? `press ${chalk.bold('Enter')} to cancel`\n      : `press ${chalk.bold('Enter')} for more options`;\n  const otpQuestion: NewQuestion = {\n    type: 'text',\n    name: 'otp',\n    message: `One-time password or backup code (${enterMessage}):`,\n  };\n\n  const { otp } = await promptNew(otpQuestion);\n  if (!otp) {\n    return null;\n  }\n\n  return otp;\n}\n\n/**\n * Prompt for user to choose a backup OTP method. If selected method is SMS, a request\n * for a new OTP will be sent to that method. Then, prompt for the OTP, and retry the user login.\n */\nasync function _promptForBackupOTPAsync(\n  username: string,\n  password: string,\n  secondFactorDevices: SecondFactorDevice[]\n): Promise<string | null> {\n  const nonPrimarySecondFactorDevices = secondFactorDevices.filter(device => !device.is_primary);\n\n  if (nonPrimarySecondFactorDevices.length === 0) {\n    throw new CommandError(\n      'LOGIN_CANCELLED',\n      'No other second-factor devices set up. Ensure you have set up and certified a backup device.'\n    );\n  }\n\n  const hasAuthenticatorSecondFactorDevice = nonPrimarySecondFactorDevices.find(\n    device => device.method === UserSecondFactorDeviceMethod.AUTHENTICATOR\n  );\n\n  const smsNonPrimarySecondFactorDevices = nonPrimarySecondFactorDevices.filter(\n    device => device.method === UserSecondFactorDeviceMethod.SMS\n  );\n\n  const authenticatorChoiceSentinel = -1;\n  const cancelChoiceSentinel = -2;\n\n  const deviceChoices = smsNonPrimarySecondFactorDevices.map((device, idx) => ({\n    title: device.sms_phone_number!,\n    value: idx,\n  }));\n\n  if (hasAuthenticatorSecondFactorDevice) {\n    deviceChoices.push({\n      title: 'Authenticator',\n      value: authenticatorChoiceSentinel,\n    });\n  }\n\n  deviceChoices.push({\n    title: 'Cancel',\n    value: cancelChoiceSentinel,\n  });\n\n  const question = {\n    message: 'Select a second-factor device:',\n    choices: deviceChoices,\n  };\n\n  const selectedValue = await selectAsync(question);\n  if (selectedValue === cancelChoiceSentinel) {\n    return null;\n  } else if (selectedValue === authenticatorChoiceSentinel) {\n    return await _promptForOTPAsync('cancel');\n  }\n\n  const device = smsNonPrimarySecondFactorDevices[selectedValue];\n\n  const apiAnonymous = ApiV2.clientForUser();\n  await apiAnonymous.postAsync('auth/send-sms-otp', {\n    username,\n    password,\n    secondFactorDeviceID: device.id,\n  });\n\n  return await _promptForOTPAsync('cancel');\n}\n\n/**\n * Handle the special case error indicating that a second-factor is required for\n * authentication.\n *\n * There are three cases we need to handle:\n * 1. User's primary second-factor device was SMS, OTP was automatically sent by the server to that\n *    device already. In this case we should just prompt for the SMS OTP (or backup code), which the\n *    user should be receiving shortly. We should give the user a way to cancel and the prompt and move\n *    to case 3 below.\n * 2. User's primary second-factor device is authenticator. In this case we should prompt for authenticator\n *    OTP (or backup code) and also give the user a way to cancel and move to case 3 below.\n * 3. User doesn't have a primary device or doesn't have access to their primary device. In this case\n *    we should show a picker of the SMS devices that they can have an OTP code sent to, and when\n *    the user picks one we show a prompt() for the sent OTP.\n */\nexport async function _retryUsernamePasswordAuthWithOTPAsync(\n  username: string,\n  password: string,\n  metadata: {\n    secondFactorDevices?: SecondFactorDevice[];\n    smsAutomaticallySent?: boolean;\n  }\n): Promise<User> {\n  const { secondFactorDevices, smsAutomaticallySent } = metadata;\n  assert(\n    secondFactorDevices !== undefined && smsAutomaticallySent !== undefined,\n    `Malformed OTP error metadata: ${metadata}`\n  );\n\n  const primaryDevice = secondFactorDevices.find(device => device.is_primary);\n  let otp: string | null = null;\n\n  if (smsAutomaticallySent) {\n    assert(primaryDevice, 'OTP should only automatically be sent when there is a primary device');\n    Log.nested(\n      `One-time password was sent to the phone number ending in ${primaryDevice.sms_phone_number}.`\n    );\n    otp = await _promptForOTPAsync('menu');\n  }\n\n  if (primaryDevice?.method === UserSecondFactorDeviceMethod.AUTHENTICATOR) {\n    Log.nested('One-time password from authenticator required.');\n    otp = await _promptForOTPAsync('menu');\n  }\n\n  // user bailed on case 1 or 2, wants to move to case 3\n  if (!otp) {\n    otp = await _promptForBackupOTPAsync(username, password, secondFactorDevices);\n  }\n\n  if (!otp) {\n    throw new CommandError('LOGIN_CANCELLED', 'Cancelled login');\n  }\n\n  return await UserManager.loginAsync('user-pass', {\n    username,\n    password,\n    otp,\n  });\n}\n\nasync function _usernamePasswordAuth(\n  username?: string,\n  password?: string,\n  otp?: string\n): Promise<User> {\n  const questions: NewQuestion[] = [];\n  if (!username) {\n    questions.push({\n      type: 'text',\n      name: 'username',\n      message: 'Username/Email Address:',\n      format: val => val.trim(),\n      validate: nonEmptyInput,\n    });\n  }\n\n  if (!password) {\n    questions.push({\n      type: 'password',\n      name: 'password',\n      message: 'Password:',\n      format: val => val.trim(),\n      validate: nonEmptyInput,\n    });\n  }\n\n  const answers = await promptNew(questions);\n\n  const data = {\n    username: username || answers.username,\n    password: password || answers.password,\n    otp: otp || answers.otp,\n  };\n\n  let user: User;\n  try {\n    user = await UserManager.loginAsync('user-pass', data);\n  } catch (e: any) {\n    if (e instanceof ApiV2Error && e.code === 'ONE_TIME_PASSWORD_REQUIRED') {\n      user = await _retryUsernamePasswordAuthWithOTPAsync(\n        data.username,\n        data.password,\n        e.metadata as any\n      );\n    } else {\n      throw e;\n    }\n  }\n\n  if (user) {\n    Log.log(`\\nSuccess. You are now logged in as ${chalk.green(user.username)}.`);\n    return user;\n  } else {\n    throw new Error('Unexpected Error: No user returned from the API');\n  }\n}\n\nexport const REGISTRATION_URL = `https://expo.dev/signup`;\n\nexport async function openRegistrationInBrowser() {\n  const spinner = ora(`Opening ${REGISTRATION_URL}...`).start();\n  const opened = await openBrowserAsync(REGISTRATION_URL);\n\n  if (opened) {\n    spinner.succeed(`Opened ${REGISTRATION_URL} in your web browser.`);\n  } else {\n    spinner.fail(\n      `Unable to open a web browser. Please open your browser and navigate to ${REGISTRATION_URL}.`\n    );\n  }\n}\n"],"mappings":"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"}