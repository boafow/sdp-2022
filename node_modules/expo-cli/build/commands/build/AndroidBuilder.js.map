{"version":3,"file":"AndroidBuilder.js","names":["ANDROID","PLATFORMS","AndroidBuilder","BaseBuilder","run","options","type","utils","askBuildType","apk","Android","checkSplashScreenImages","projectDir","checkForBuildInProgress","collectAndValidateCredentials","publishedExpIds","publicUrl","undefined","ensureReleaseExists","checkStatusBeforeBuild","build","checkProjectConfig","checkIfSdkIsSupported","manifest","sdkVersion","getOrPromptForPackage","updateProjectConfig","platform","nonInteractive","parent","skipCredentialsCheck","ctx","Context","init","experienceName","projectOwner","slug","clearCredentials","BuildError","runCredentialsManager","RemoveKeystore","paramKeystore","getKeystoreFromParams","useKeystore","keystore","skipKeystoreValidation","SetupAndroidKeystore","allowMissingKeystore"],"sources":["../../../src/commands/build/AndroidBuilder.ts"],"sourcesContent":["import { Android } from 'xdl';\n\nimport { Context } from '../../credentials';\nimport { runCredentialsManager } from '../../credentials/route';\nimport {\n  getKeystoreFromParams,\n  RemoveKeystore,\n  useKeystore,\n} from '../../credentials/views/AndroidKeystore';\nimport { SetupAndroidKeystore } from '../../credentials/views/SetupAndroidKeystore';\nimport { getOrPromptForPackage } from '../utils/getOrPromptApplicationId';\nimport BaseBuilder from './BaseBuilder';\nimport BuildError from './BuildError';\nimport { Platform, PLATFORMS } from './constants';\nimport * as utils from './utils';\n\nconst { ANDROID } = PLATFORMS;\n\nexport default class AndroidBuilder extends BaseBuilder {\n  async run(): Promise<void> {\n    // This gets run after all other validation to prevent users from having to answer this question multiple times.\n    this.options.type = await utils.askBuildType(this.options.type!, {\n      apk: 'Build a package to deploy to the store or install directly on Android devices',\n      'app-bundle': 'Build an optimized bundle for the store',\n    });\n\n    // Check SplashScreen images sizes\n    await Android.checkSplashScreenImages(this.projectDir);\n\n    // Check the status of any current builds\n    await this.checkForBuildInProgress();\n    // Check for existing credentials, collect any missing credentials, and validate them\n    await this.collectAndValidateCredentials();\n    // Publish the current experience, if necessary\n    const publishedExpIds = this.options.publicUrl ? undefined : await this.ensureReleaseExists();\n\n    if (!this.options.publicUrl) {\n      await this.checkStatusBeforeBuild();\n    }\n\n    // Initiate a build\n    await this.build(publishedExpIds);\n  }\n\n  async checkProjectConfig(): Promise<void> {\n    // Run this first because the error messages are related\n    // to ExpoKit which is harder to change than the bundle ID.\n    await super.checkProjectConfig();\n\n    await utils.checkIfSdkIsSupported(this.manifest.sdkVersion!, ANDROID);\n\n    // Check the android package name\n    await getOrPromptForPackage(this.projectDir);\n\n    this.updateProjectConfig();\n  }\n\n  platform(): Platform {\n    return ANDROID;\n  }\n\n  async collectAndValidateCredentials(): Promise<void> {\n    const nonInteractive = this.options.parent?.nonInteractive;\n    const skipCredentialsCheck = this.options.skipCredentialsCheck === true;\n\n    const ctx = new Context();\n    await ctx.init(this.projectDir, { nonInteractive });\n\n    const experienceName = `@${ctx.projectOwner}/${ctx.manifest.slug}`;\n\n    if (this.options.clearCredentials) {\n      if (nonInteractive) {\n        throw new BuildError(\n          'Clearing your Android build credentials from our build servers is a PERMANENT and IRREVERSIBLE action, it\\'s not supported when combined with the \"--non-interactive\" option'\n        );\n      }\n      await runCredentialsManager(ctx, new RemoveKeystore(experienceName));\n    }\n\n    const paramKeystore = await getKeystoreFromParams(this.options);\n    if (paramKeystore) {\n      await useKeystore(ctx, {\n        experienceName,\n        keystore: paramKeystore,\n        skipKeystoreValidation: skipCredentialsCheck,\n      });\n    } else {\n      await runCredentialsManager(\n        ctx,\n        new SetupAndroidKeystore(experienceName, {\n          nonInteractive,\n          allowMissingKeystore: true,\n          skipKeystoreValidation: skipCredentialsCheck,\n        })\n      );\n    }\n  }\n}\n"],"mappings":"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"}