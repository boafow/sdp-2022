{"version":3,"file":"BaseBuilder.js","names":["secondsToMilliseconds","seconds","BaseBuilder","getUserAsync","UserManager","ensureLoggedInAsync","constructor","projectDir","options","projectConfig","getConfig","manifest","exp","updateProjectConfig","command","prepareProjectInfo","run","e","BuildError","Log","error","message","process","exit","Error","commandCheckStatus","checkStatus","checkProjectConfig","getProjectOwner","isDetached","platform","oldestSupportedMajorVersion","Versions","oldestSupportedMajorVersionAsync","semver","major","sdkVersion","version","newestReleasedSdkVersionAsync","warn","chalk","bold","checkForBuildInProgress","log","buildStatus","getBuildStatusAsync","current","releaseChannel","publicUrl","jobs","length","err","logBuildStatuses","canPurchasePriorityBuilds","numberOfRemainingPriorityBuilds","hasUnlimitedPriorityBuilds","checkStatusBeforeBuild","reuseStatus","findReusableBuildAsync","slug","owner","canReuse","underline","downloadUrl","newLine","username","getCurrentUsernameAsync","forEach","job","i","packageExtension","UrlUtils","constructBuildLogsUrl","buildId","id","projectSlug","undefined","hasPriorityBuilds","shouldShowUpgradeInfo","priority","status","constructTurtleStatusUrl","artifacts","url","ensureReleaseExists","publish","ids","publishAction","duringBuild","release","getLatestReleaseAsync","channel","publicationId","publishedTime","wait","interval","spinner","ora","start","result","filter","succeed","text","fail","sleep","build","expIds","bundleIdentifier","ios","opts","PLATFORMS","IOS","type","ANDROID","startBuildAsync","user","getCurrentUserAsync","kind","waitOpts","completedJob","artifactUrl","artifactId","constructArtifactUrl","addNewLineIfNone","green","ALL"],"sources":["../../../src/commands/build/BaseBuilder.ts"],"sourcesContent":["import { ExpoConfig, getConfig, ProjectConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport semver from 'semver';\nimport { RobotUser, User, UserManager, Versions } from 'xdl';\n\nimport Log from '../../log';\nimport { actionAsync as publishAction } from '../publish/publishAsync';\nimport { sleep } from '../utils/promise';\nimport * as UrlUtils from '../utils/url';\nimport { BuilderOptions } from './BaseBuilder.types';\nimport BuildError from './BuildError';\nimport { Platform, PLATFORMS } from './constants';\nimport { findReusableBuildAsync } from './findReusableBuildAsync';\nimport { BuildJobFields, getBuildStatusAsync } from './getBuildStatusAsync';\nimport { getLatestReleaseAsync } from './getLatestReleaseAsync';\nimport { startBuildAsync } from './startBuildAsync';\n\nconst secondsToMilliseconds = (seconds: number): number => seconds * 1000;\nexport default class BaseBuilder {\n  protected projectConfig: ProjectConfig;\n  manifest: ExpoConfig;\n\n  async getUserAsync(): Promise<User | RobotUser> {\n    return await UserManager.ensureLoggedInAsync();\n  }\n\n  constructor(public projectDir: string, public options: BuilderOptions = {}) {\n    this.projectConfig = getConfig(this.projectDir);\n    this.manifest = this.projectConfig.exp;\n  }\n\n  protected updateProjectConfig() {\n    // Update the project config\n    this.projectConfig = getConfig(this.projectDir);\n    this.manifest = this.projectConfig.exp;\n  }\n\n  async command() {\n    try {\n      await this.prepareProjectInfo();\n      await this.run();\n    } catch (e: any) {\n      if (!(e instanceof BuildError)) {\n        throw e;\n      } else {\n        Log.error(e.message);\n        process.exit(1);\n      }\n    }\n  }\n\n  async run(): Promise<void> {\n    throw new Error('`run()` should be overridden');\n  }\n\n  async commandCheckStatus() {\n    try {\n      await this.prepareProjectInfo();\n      await this.checkStatus();\n    } catch (e: any) {\n      if (!(e instanceof BuildError)) {\n        throw e;\n      } else {\n        Log.error(e.message);\n        process.exit(1);\n      }\n    }\n  }\n\n  async prepareProjectInfo(): Promise<void> {\n    await this.checkProjectConfig();\n    // note: this validates if a robot user is used without \"owner\" in the manifest\n    // without this check, build/status returns \"robots not allowed\".\n    UserManager.getProjectOwner(\n      // TODO: Move this since it can add delay\n      await this.getUserAsync(),\n      this.projectConfig.exp\n    );\n  }\n\n  async checkProjectConfig(): Promise<void> {\n    if (this.manifest.isDetached) {\n      Log.error(`'expo build:${this.platform()}' is not supported for detached projects.`);\n      process.exit(1);\n    }\n\n    // Warn user if building a project using the next deprecated SDK version\n    const oldestSupportedMajorVersion = await Versions.oldestSupportedMajorVersionAsync();\n    if (semver.major(this.manifest.sdkVersion!) === oldestSupportedMajorVersion) {\n      const { version } = await Versions.newestReleasedSdkVersionAsync();\n      Log.warn(\n        `\\nSDK${oldestSupportedMajorVersion} will be ${chalk.bold(\n          'deprecated'\n        )} next! We recommend upgrading versions, ideally to the latest (SDK${semver.major(\n          version\n        )}), so you can continue to build new binaries of your app and develop in Expo Go.\\n`\n      );\n    }\n  }\n\n  async checkForBuildInProgress() {\n    Log.log('Checking if there is a build in progress...\\n');\n    const buildStatus = await getBuildStatusAsync(this.projectDir, {\n      platform: this.platform(),\n      current: true,\n      releaseChannel: this.options.releaseChannel,\n      publicUrl: this.options.publicUrl,\n      sdkVersion: this.manifest.sdkVersion,\n    } as any);\n\n    if (buildStatus.jobs && buildStatus.jobs.length > 0) {\n      throw new BuildError('Cannot start a new build, as there is already an in-progress build.');\n    }\n  }\n\n  async checkStatus(platform: 'all' | 'ios' | 'android' = 'all'): Promise<void> {\n    Log.log('Fetching build history...\\n');\n\n    const buildStatus = await getBuildStatusAsync(this.projectDir, {\n      platform,\n      current: false,\n      releaseChannel: this.options.releaseChannel,\n    });\n\n    if ('err' in buildStatus && buildStatus.err) {\n      throw new Error('Error getting current build status for this project.');\n    }\n\n    if (!(buildStatus.jobs && buildStatus.jobs.length)) {\n      Log.log('No currently active or previous builds for this project.');\n      return;\n    }\n\n    await this.logBuildStatuses({\n      jobs: buildStatus.jobs,\n      canPurchasePriorityBuilds: buildStatus.canPurchasePriorityBuilds,\n      numberOfRemainingPriorityBuilds: buildStatus.numberOfRemainingPriorityBuilds,\n      hasUnlimitedPriorityBuilds: buildStatus.hasUnlimitedPriorityBuilds,\n    });\n  }\n\n  async checkStatusBeforeBuild(): Promise<void> {\n    Log.log('Checking if this build already exists...\\n');\n\n    const reuseStatus = await findReusableBuildAsync(\n      this.options.releaseChannel!,\n      this.platform(),\n      this.manifest.sdkVersion!,\n      this.manifest.slug!,\n      this.manifest.owner\n    );\n    if (reuseStatus.canReuse) {\n      Log.warn(`Did you know that Expo provides over-the-air updates?\nPlease see the docs (${chalk.underline(\n        'https://docs.expo.dev/guides/configuring-ota-updates/'\n      )}) and check if you can use them instead of building your app binaries again.`);\n\n      Log.warn(\n        `There were no new changes from the last build, you can download that build from here: ${chalk.underline(\n          reuseStatus.downloadUrl!\n        )}`\n      );\n      Log.newLine();\n    }\n  }\n\n  async logBuildStatuses(buildStatus: {\n    jobs: BuildJobFields[];\n    canPurchasePriorityBuilds?: boolean;\n    numberOfRemainingPriorityBuilds?: number;\n    hasUnlimitedPriorityBuilds?: boolean;\n  }) {\n    Log.log('=================');\n    Log.log(' Builds Statuses ');\n    Log.log('=================\\n');\n\n    const username = this.manifest.owner\n      ? this.manifest.owner\n      : await UserManager.getCurrentUsernameAsync();\n\n    buildStatus.jobs.forEach((job, i) => {\n      let platform, packageExtension;\n      if (job.platform === 'ios') {\n        platform = 'iOS';\n        packageExtension = 'IPA';\n      } else {\n        platform = 'Android';\n        packageExtension = 'APK';\n      }\n\n      Log.log(\n        `### ${i} | ${platform} | ${UrlUtils.constructBuildLogsUrl({\n          buildId: job.id,\n          projectSlug: this.manifest.slug,\n          username: username ?? undefined,\n        })} ###`\n      );\n\n      const hasPriorityBuilds =\n        (buildStatus.numberOfRemainingPriorityBuilds ?? 0) > 0 ||\n        buildStatus.hasUnlimitedPriorityBuilds;\n      const shouldShowUpgradeInfo =\n        !hasPriorityBuilds &&\n        i === 0 &&\n        job.priority === 'normal' &&\n        buildStatus.canPurchasePriorityBuilds;\n      let status;\n      switch (job.status) {\n        case 'pending':\n        case 'sent-to-queue':\n          status = `Build waiting in queue...\\nQueue length: ${chalk.underline(\n            UrlUtils.constructTurtleStatusUrl()\n          )}`;\n          if (shouldShowUpgradeInfo) {\n            status += `\\nWant to wait less? Get priority builds at ${chalk.underline(\n              'https://expo.dev/settings/billing'\n            )}.`;\n          }\n          break;\n        case 'started':\n          status = 'Build started...';\n          break;\n        case 'in-progress':\n          status = 'Build in progress...';\n          if (shouldShowUpgradeInfo) {\n            status += `\\nWant to wait less? Get priority builds at ${chalk.underline(\n              'https://expo.dev/settings/billing'\n            )}.`;\n          }\n          break;\n        case 'finished':\n          status = 'Build finished.';\n          if (shouldShowUpgradeInfo) {\n            status += `\\nLooks like this build could have been faster.\\nRead more about priority builds at ${chalk.underline(\n              'https://expo.dev/settings/billing'\n            )}.`;\n          }\n          break;\n        case 'errored':\n          status = 'There was an error with this build.';\n          if (job.id) {\n            status += `\n\nWhen requesting support, please provide this build ID:\n\n${job.id}\n`;\n          }\n          break;\n        default:\n          status = '';\n          break;\n      }\n\n      Log.log(status);\n      if (job.status === 'finished') {\n        if (job.artifacts) {\n          Log.log(`${packageExtension}: ${job.artifacts.url}`);\n        } else {\n          Log.log(`Problem getting ${packageExtension} URL. Please try to build again.`);\n        }\n      }\n      Log.log();\n    });\n  }\n\n  async ensureReleaseExists() {\n    if (this.options.publish) {\n      const { ids, url, err } = await publishAction(this.projectDir, {\n        ...this.options,\n        duringBuild: true,\n      });\n      if (err) {\n        throw new BuildError(`No url was returned from publish. Please try again.\\n${err}`);\n      } else if (!url || url === '') {\n        throw new BuildError('No url was returned from publish. Please try again.');\n      }\n      return ids;\n    } else {\n      Log.log('Looking for releases...');\n      const release = await getLatestReleaseAsync(this.projectDir, {\n        releaseChannel: this.options.releaseChannel!,\n        platform: this.platform(),\n        owner: this.manifest.owner,\n      });\n      if (!release) {\n        throw new BuildError('No releases found. Please create one using `expo publish` first.');\n      }\n      Log.log(\n        `Using existing release on channel \"${release.channel}\":\\n` +\n          `publicationId: ${release.publicationId}\\n  publishedTime: ${release.publishedTime}`\n      );\n      return [release.publicationId];\n    }\n  }\n\n  async wait(\n    buildId: string,\n    { interval = 30, publicUrl }: { interval?: number; publicUrl?: string } = {}\n  ): Promise<any> {\n    Log.log(\n      `Waiting for build to complete.\\nYou can press Ctrl+C to exit. It won't cancel the build, you'll be able to monitor it at the printed URL.`\n    );\n    const spinner = ora().start();\n    let i = 0;\n    while (true) {\n      i++;\n      const result = await getBuildStatusAsync(this.projectDir, {\n        current: false,\n        ...(publicUrl ? { publicUrl } : {}),\n      });\n\n      const jobs = result.jobs?.filter((job: BuildJobFields) => job.id === buildId);\n      const job = jobs ? jobs[0] : null;\n      if (job) {\n        switch (job.status) {\n          case 'finished':\n            spinner.succeed('Build finished.');\n            return job;\n          case 'pending':\n          case 'sent-to-queue':\n            spinner.text = 'Build queued...';\n            break;\n          case 'started':\n          case 'in-progress':\n            spinner.text = 'Build in progress...';\n            break;\n          case 'errored':\n            spinner.fail('Build failed.');\n            throw new BuildError(`Standalone build failed!`);\n          default:\n            spinner.warn('Unknown status.');\n            throw new BuildError(`Unknown status: ${job.status} - aborting!`);\n        }\n      } else if (i > 5) {\n        spinner.warn('Unknown status.');\n        throw new BuildError(`Failed to locate build job for id \"${buildId}\"`);\n      }\n      await sleep(secondsToMilliseconds(interval));\n    }\n  }\n\n  async build(expIds?: string[]) {\n    const { publicUrl } = this.options;\n    const platform = this.platform();\n    const bundleIdentifier = this.manifest.ios?.bundleIdentifier;\n\n    let opts: Record<string, any> = {\n      expIds,\n      platform,\n      releaseChannel: this.options.releaseChannel,\n      ...(publicUrl ? { publicUrl } : {}),\n    };\n\n    if (platform === PLATFORMS.IOS) {\n      opts = {\n        ...opts,\n        type: this.options.type,\n        bundleIdentifier,\n      };\n    } else if (platform === PLATFORMS.ANDROID) {\n      opts = {\n        ...opts,\n        type: this.options.type,\n      };\n    }\n\n    // call out to build api here with url\n    const result = await startBuildAsync(this.projectDir, opts);\n\n    const { id: buildId, priority, canPurchasePriorityBuilds } = result;\n\n    Log.log('Build started, it may take a few minutes to complete.');\n    Log.log(\n      `You can check the queue length at ${chalk.underline(UrlUtils.constructTurtleStatusUrl())}\\n`\n    );\n    if (priority === 'normal' && canPurchasePriorityBuilds) {\n      Log.log(\n        'You can make this faster. 🐢\\nGet priority builds at: https://expo.dev/settings/billing\\n'\n      );\n    }\n\n    const user = await UserManager.getCurrentUserAsync();\n\n    if (buildId) {\n      const url = UrlUtils.constructBuildLogsUrl({\n        buildId,\n        projectSlug: this.manifest.slug,\n        username: this.manifest.owner || (user?.kind === 'user' ? user.username : undefined),\n      });\n\n      Log.log(`You can monitor the build at\\n\\n ${chalk.underline(url)}\\n`);\n    }\n\n    if (this.options.wait) {\n      const waitOpts = publicUrl ? { publicUrl } : {};\n      const completedJob = await this.wait(buildId, waitOpts);\n      const artifactUrl = completedJob.artifactId\n        ? UrlUtils.constructArtifactUrl(completedJob.artifactId)\n        : completedJob.artifacts.url;\n      Log.addNewLineIfNone();\n      Log.log(\n        `${chalk.green('Successfully built standalone app:')} ${chalk.underline(artifactUrl)}`\n      );\n    } else {\n      Log.log('Alternatively, run `expo build:status` to monitor it from the command line.');\n    }\n  }\n\n  platform(): Platform {\n    return PLATFORMS.ALL;\n  }\n}\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpD,MAAMA,qBAAqB,GAAIC,OAAe,IAAaA,OAAO,GAAG,IAAI;AAC1D,MAAMC,WAAW,CAAC;EAI/B,MAAMC,YAAY,GAA8B;IAC9C,OAAO,MAAMC,kBAAW,CAACC,mBAAmB,EAAE;EAChD;EAEAC,WAAW,CAAQC,UAAkB,EAASC,OAAuB,GAAG,CAAC,CAAC,EAAE;IAAA,KAAzDD,UAAkB,GAAlBA,UAAkB;IAAA,KAASC,OAAuB,GAAvBA,OAAuB;IAAA;IAAA;IACnE,IAAI,CAACC,aAAa,GAAG,IAAAC,mBAAS,EAAC,IAAI,CAACH,UAAU,CAAC;IAC/C,IAAI,CAACI,QAAQ,GAAG,IAAI,CAACF,aAAa,CAACG,GAAG;EACxC;EAEUC,mBAAmB,GAAG;IAC9B;IACA,IAAI,CAACJ,aAAa,GAAG,IAAAC,mBAAS,EAAC,IAAI,CAACH,UAAU,CAAC;IAC/C,IAAI,CAACI,QAAQ,GAAG,IAAI,CAACF,aAAa,CAACG,GAAG;EACxC;EAEA,MAAME,OAAO,GAAG;IACd,IAAI;MACF,MAAM,IAAI,CAACC,kBAAkB,EAAE;MAC/B,MAAM,IAAI,CAACC,GAAG,EAAE;IAClB,CAAC,CAAC,OAAOC,CAAM,EAAE;MACf,IAAI,EAAEA,CAAC,YAAYC,qBAAU,CAAC,EAAE;QAC9B,MAAMD,CAAC;MACT,CAAC,MAAM;QACLE,cAAG,CAACC,KAAK,CAACH,CAAC,CAACI,OAAO,CAAC;QACpBC,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;MACjB;IACF;EACF;EAEA,MAAMP,GAAG,GAAkB;IACzB,MAAM,IAAIQ,KAAK,CAAC,8BAA8B,CAAC;EACjD;EAEA,MAAMC,kBAAkB,GAAG;IACzB,IAAI;MACF,MAAM,IAAI,CAACV,kBAAkB,EAAE;MAC/B,MAAM,IAAI,CAACW,WAAW,EAAE;IAC1B,CAAC,CAAC,OAAOT,CAAM,EAAE;MACf,IAAI,EAAEA,CAAC,YAAYC,qBAAU,CAAC,EAAE;QAC9B,MAAMD,CAAC;MACT,CAAC,MAAM;QACLE,cAAG,CAACC,KAAK,CAACH,CAAC,CAACI,OAAO,CAAC;QACpBC,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;MACjB;IACF;EACF;EAEA,MAAMR,kBAAkB,GAAkB;IACxC,MAAM,IAAI,CAACY,kBAAkB,EAAE;IAC/B;IACA;IACAvB,kBAAW,CAACwB,eAAe;IACzB;IACA,MAAM,IAAI,CAACzB,YAAY,EAAE,EACzB,IAAI,CAACM,aAAa,CAACG,GAAG,CACvB;EACH;EAEA,MAAMe,kBAAkB,GAAkB;IACxC,IAAI,IAAI,CAAChB,QAAQ,CAACkB,UAAU,EAAE;MAC5BV,cAAG,CAACC,KAAK,CAAE,eAAc,IAAI,CAACU,QAAQ,EAAG,2CAA0C,CAAC;MACpFR,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;IACjB;;IAEA;IACA,MAAMQ,2BAA2B,GAAG,MAAMC,eAAQ,CAACC,gCAAgC,EAAE;IACrF,IAAIC,iBAAM,CAACC,KAAK,CAAC,IAAI,CAACxB,QAAQ,CAACyB,UAAU,CAAE,KAAKL,2BAA2B,EAAE;MAC3E,MAAM;QAAEM;MAAQ,CAAC,GAAG,MAAML,eAAQ,CAACM,6BAA6B,EAAE;MAClEnB,cAAG,CAACoB,IAAI,CACL,QAAOR,2BAA4B,YAAWS,gBAAK,CAACC,IAAI,CACvD,YAAY,CACZ,qEAAoEP,iBAAM,CAACC,KAAK,CAChFE,OAAO,CACP,oFAAmF,CACtF;IACH;EACF;EAEA,MAAMK,uBAAuB,GAAG;IAC9BvB,cAAG,CAACwB,GAAG,CAAC,+CAA+C,CAAC;IACxD,MAAMC,WAAW,GAAG,MAAM,IAAAC,0CAAmB,EAAC,IAAI,CAACtC,UAAU,EAAE;MAC7DuB,QAAQ,EAAE,IAAI,CAACA,QAAQ,EAAE;MACzBgB,OAAO,EAAE,IAAI;MACbC,cAAc,EAAE,IAAI,CAACvC,OAAO,CAACuC,cAAc;MAC3CC,SAAS,EAAE,IAAI,CAACxC,OAAO,CAACwC,SAAS;MACjCZ,UAAU,EAAE,IAAI,CAACzB,QAAQ,CAACyB;IAC5B,CAAC,CAAQ;IAET,IAAIQ,WAAW,CAACK,IAAI,IAAIL,WAAW,CAACK,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;MACnD,MAAM,KAAIhC,qBAAU,EAAC,qEAAqE,CAAC;IAC7F;EACF;EAEA,MAAMQ,WAAW,CAACI,QAAmC,GAAG,KAAK,EAAiB;IAC5EX,cAAG,CAACwB,GAAG,CAAC,6BAA6B,CAAC;IAEtC,MAAMC,WAAW,GAAG,MAAM,IAAAC,0CAAmB,EAAC,IAAI,CAACtC,UAAU,EAAE;MAC7DuB,QAAQ;MACRgB,OAAO,EAAE,KAAK;MACdC,cAAc,EAAE,IAAI,CAACvC,OAAO,CAACuC;IAC/B,CAAC,CAAC;IAEF,IAAI,KAAK,IAAIH,WAAW,IAAIA,WAAW,CAACO,GAAG,EAAE;MAC3C,MAAM,IAAI3B,KAAK,CAAC,sDAAsD,CAAC;IACzE;IAEA,IAAI,EAAEoB,WAAW,CAACK,IAAI,IAAIL,WAAW,CAACK,IAAI,CAACC,MAAM,CAAC,EAAE;MAClD/B,cAAG,CAACwB,GAAG,CAAC,0DAA0D,CAAC;MACnE;IACF;IAEA,MAAM,IAAI,CAACS,gBAAgB,CAAC;MAC1BH,IAAI,EAAEL,WAAW,CAACK,IAAI;MACtBI,yBAAyB,EAAET,WAAW,CAACS,yBAAyB;MAChEC,+BAA+B,EAAEV,WAAW,CAACU,+BAA+B;MAC5EC,0BAA0B,EAAEX,WAAW,CAACW;IAC1C,CAAC,CAAC;EACJ;EAEA,MAAMC,sBAAsB,GAAkB;IAC5CrC,cAAG,CAACwB,GAAG,CAAC,4CAA4C,CAAC;IAErD,MAAMc,WAAW,GAAG,MAAM,IAAAC,gDAAsB,EAC9C,IAAI,CAAClD,OAAO,CAACuC,cAAc,EAC3B,IAAI,CAACjB,QAAQ,EAAE,EACf,IAAI,CAACnB,QAAQ,CAACyB,UAAU,EACxB,IAAI,CAACzB,QAAQ,CAACgD,IAAI,EAClB,IAAI,CAAChD,QAAQ,CAACiD,KAAK,CACpB;IACD,IAAIH,WAAW,CAACI,QAAQ,EAAE;MACxB1C,cAAG,CAACoB,IAAI,CAAE;AAChB,uBAAuBC,gBAAK,CAACsB,SAAS,CAC9B,uDAAuD,CACvD,8EAA6E,CAAC;MAEhF3C,cAAG,CAACoB,IAAI,CACL,yFAAwFC,gBAAK,CAACsB,SAAS,CACtGL,WAAW,CAACM,WAAW,CACvB,EAAC,CACJ;MACD5C,cAAG,CAAC6C,OAAO,EAAE;IACf;EACF;EAEA,MAAMZ,gBAAgB,CAACR,WAKtB,EAAE;IACDzB,cAAG,CAACwB,GAAG,CAAC,mBAAmB,CAAC;IAC5BxB,cAAG,CAACwB,GAAG,CAAC,mBAAmB,CAAC;IAC5BxB,cAAG,CAACwB,GAAG,CAAC,qBAAqB,CAAC;IAE9B,MAAMsB,QAAQ,GAAG,IAAI,CAACtD,QAAQ,CAACiD,KAAK,GAChC,IAAI,CAACjD,QAAQ,CAACiD,KAAK,GACnB,MAAMxD,kBAAW,CAAC8D,uBAAuB,EAAE;IAE/CtB,WAAW,CAACK,IAAI,CAACkB,OAAO,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MAAA;MACnC,IAAIvC,QAAQ,EAAEwC,gBAAgB;MAC9B,IAAIF,GAAG,CAACtC,QAAQ,KAAK,KAAK,EAAE;QAC1BA,QAAQ,GAAG,KAAK;QAChBwC,gBAAgB,GAAG,KAAK;MAC1B,CAAC,MAAM;QACLxC,QAAQ,GAAG,SAAS;QACpBwC,gBAAgB,GAAG,KAAK;MAC1B;MAEAnD,cAAG,CAACwB,GAAG,CACJ,OAAM0B,CAAE,MAAKvC,QAAS,MAAKyC,QAAQ,GAACC,qBAAqB,CAAC;QACzDC,OAAO,EAAEL,GAAG,CAACM,EAAE;QACfC,WAAW,EAAE,IAAI,CAAChE,QAAQ,CAACgD,IAAI;QAC/BM,QAAQ,EAAEA,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAIW;MACxB,CAAC,CAAE,MAAK,CACT;MAED,MAAMC,iBAAiB,GACrB,0BAACjC,WAAW,CAACU,+BAA+B,yEAAI,CAAC,IAAI,CAAC,IACtDV,WAAW,CAACW,0BAA0B;MACxC,MAAMuB,qBAAqB,GACzB,CAACD,iBAAiB,IAClBR,CAAC,KAAK,CAAC,IACPD,GAAG,CAACW,QAAQ,KAAK,QAAQ,IACzBnC,WAAW,CAACS,yBAAyB;MACvC,IAAI2B,MAAM;MACV,QAAQZ,GAAG,CAACY,MAAM;QAChB,KAAK,SAAS;QACd,KAAK,eAAe;UAClBA,MAAM,GAAI,4CAA2CxC,gBAAK,CAACsB,SAAS,CAClES,QAAQ,GAACU,wBAAwB,EAAE,CACnC,EAAC;UACH,IAAIH,qBAAqB,EAAE;YACzBE,MAAM,IAAK,+CAA8CxC,gBAAK,CAACsB,SAAS,CACtE,mCAAmC,CACnC,GAAE;UACN;UACA;QACF,KAAK,SAAS;UACZkB,MAAM,GAAG,kBAAkB;UAC3B;QACF,KAAK,aAAa;UAChBA,MAAM,GAAG,sBAAsB;UAC/B,IAAIF,qBAAqB,EAAE;YACzBE,MAAM,IAAK,+CAA8CxC,gBAAK,CAACsB,SAAS,CACtE,mCAAmC,CACnC,GAAE;UACN;UACA;QACF,KAAK,UAAU;UACbkB,MAAM,GAAG,iBAAiB;UAC1B,IAAIF,qBAAqB,EAAE;YACzBE,MAAM,IAAK,uFAAsFxC,gBAAK,CAACsB,SAAS,CAC9G,mCAAmC,CACnC,GAAE;UACN;UACA;QACF,KAAK,SAAS;UACZkB,MAAM,GAAG,qCAAqC;UAC9C,IAAIZ,GAAG,CAACM,EAAE,EAAE;YACVM,MAAM,IAAK;AACvB;AACA;AACA;AACA,EAAEZ,GAAG,CAACM,EAAG;AACT,CAAC;UACS;UACA;QACF;UACEM,MAAM,GAAG,EAAE;UACX;MAAM;MAGV7D,cAAG,CAACwB,GAAG,CAACqC,MAAM,CAAC;MACf,IAAIZ,GAAG,CAACY,MAAM,KAAK,UAAU,EAAE;QAC7B,IAAIZ,GAAG,CAACc,SAAS,EAAE;UACjB/D,cAAG,CAACwB,GAAG,CAAE,GAAE2B,gBAAiB,KAAIF,GAAG,CAACc,SAAS,CAACC,GAAI,EAAC,CAAC;QACtD,CAAC,MAAM;UACLhE,cAAG,CAACwB,GAAG,CAAE,mBAAkB2B,gBAAiB,kCAAiC,CAAC;QAChF;MACF;MACAnD,cAAG,CAACwB,GAAG,EAAE;IACX,CAAC,CAAC;EACJ;EAEA,MAAMyC,mBAAmB,GAAG;IAC1B,IAAI,IAAI,CAAC5E,OAAO,CAAC6E,OAAO,EAAE;MACxB,MAAM;QAAEC,GAAG;QAAEH,GAAG;QAAEhC;MAAI,CAAC,GAAG,MAAM,IAAAoC,2BAAa,EAAC,IAAI,CAAChF,UAAU,EAAE;QAC7D,GAAG,IAAI,CAACC,OAAO;QACfgF,WAAW,EAAE;MACf,CAAC,CAAC;MACF,IAAIrC,GAAG,EAAE;QACP,MAAM,KAAIjC,qBAAU,EAAE,wDAAuDiC,GAAI,EAAC,CAAC;MACrF,CAAC,MAAM,IAAI,CAACgC,GAAG,IAAIA,GAAG,KAAK,EAAE,EAAE;QAC7B,MAAM,KAAIjE,qBAAU,EAAC,qDAAqD,CAAC;MAC7E;MACA,OAAOoE,GAAG;IACZ,CAAC,MAAM;MACLnE,cAAG,CAACwB,GAAG,CAAC,yBAAyB,CAAC;MAClC,MAAM8C,OAAO,GAAG,MAAM,IAAAC,8CAAqB,EAAC,IAAI,CAACnF,UAAU,EAAE;QAC3DwC,cAAc,EAAE,IAAI,CAACvC,OAAO,CAACuC,cAAe;QAC5CjB,QAAQ,EAAE,IAAI,CAACA,QAAQ,EAAE;QACzB8B,KAAK,EAAE,IAAI,CAACjD,QAAQ,CAACiD;MACvB,CAAC,CAAC;MACF,IAAI,CAAC6B,OAAO,EAAE;QACZ,MAAM,KAAIvE,qBAAU,EAAC,kEAAkE,CAAC;MAC1F;MACAC,cAAG,CAACwB,GAAG,CACJ,sCAAqC8C,OAAO,CAACE,OAAQ,MAAK,GACxD,kBAAiBF,OAAO,CAACG,aAAc,sBAAqBH,OAAO,CAACI,aAAc,EAAC,CACvF;MACD,OAAO,CAACJ,OAAO,CAACG,aAAa,CAAC;IAChC;EACF;EAEA,MAAME,IAAI,CACRrB,OAAe,EACf;IAAEsB,QAAQ,GAAG,EAAE;IAAE/C;EAAqD,CAAC,GAAG,CAAC,CAAC,EAC9D;IACd7B,cAAG,CAACwB,GAAG,CACJ,2IAA0I,CAC5I;IACD,MAAMqD,OAAO,GAAG,IAAAC,cAAG,GAAE,CAACC,KAAK,EAAE;IAC7B,IAAI7B,CAAC,GAAG,CAAC;IACT,OAAO,IAAI,EAAE;MAAA;MACXA,CAAC,EAAE;MACH,MAAM8B,MAAM,GAAG,MAAM,IAAAtD,0CAAmB,EAAC,IAAI,CAACtC,UAAU,EAAE;QACxDuC,OAAO,EAAE,KAAK;QACd,IAAIE,SAAS,GAAG;UAAEA;QAAU,CAAC,GAAG,CAAC,CAAC;MACpC,CAAC,CAAC;MAEF,MAAMC,IAAI,mBAAGkD,MAAM,CAAClD,IAAI,iDAAX,aAAamD,MAAM,CAAEhC,GAAmB,IAAKA,GAAG,CAACM,EAAE,KAAKD,OAAO,CAAC;MAC7E,MAAML,GAAG,GAAGnB,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;MACjC,IAAImB,GAAG,EAAE;QACP,QAAQA,GAAG,CAACY,MAAM;UAChB,KAAK,UAAU;YACbgB,OAAO,CAACK,OAAO,CAAC,iBAAiB,CAAC;YAClC,OAAOjC,GAAG;UACZ,KAAK,SAAS;UACd,KAAK,eAAe;YAClB4B,OAAO,CAACM,IAAI,GAAG,iBAAiB;YAChC;UACF,KAAK,SAAS;UACd,KAAK,aAAa;YAChBN,OAAO,CAACM,IAAI,GAAG,sBAAsB;YACrC;UACF,KAAK,SAAS;YACZN,OAAO,CAACO,IAAI,CAAC,eAAe,CAAC;YAC7B,MAAM,KAAIrF,qBAAU,EAAE,0BAAyB,CAAC;UAClD;YACE8E,OAAO,CAACzD,IAAI,CAAC,iBAAiB,CAAC;YAC/B,MAAM,KAAIrB,qBAAU,EAAE,mBAAkBkD,GAAG,CAACY,MAAO,cAAa,CAAC;QAAC;MAExE,CAAC,MAAM,IAAIX,CAAC,GAAG,CAAC,EAAE;QAChB2B,OAAO,CAACzD,IAAI,CAAC,iBAAiB,CAAC;QAC/B,MAAM,KAAIrB,qBAAU,EAAE,sCAAqCuD,OAAQ,GAAE,CAAC;MACxE;MACA,MAAM,IAAA+B,gBAAK,EAACxG,qBAAqB,CAAC+F,QAAQ,CAAC,CAAC;IAC9C;EACF;EAEA,MAAMU,KAAK,CAACC,MAAiB,EAAE;IAAA;IAC7B,MAAM;MAAE1D;IAAU,CAAC,GAAG,IAAI,CAACxC,OAAO;IAClC,MAAMsB,QAAQ,GAAG,IAAI,CAACA,QAAQ,EAAE;IAChC,MAAM6E,gBAAgB,yBAAG,IAAI,CAAChG,QAAQ,CAACiG,GAAG,uDAAjB,mBAAmBD,gBAAgB;IAE5D,IAAIE,IAAyB,GAAG;MAC9BH,MAAM;MACN5E,QAAQ;MACRiB,cAAc,EAAE,IAAI,CAACvC,OAAO,CAACuC,cAAc;MAC3C,IAAIC,SAAS,GAAG;QAAEA;MAAU,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC;IAED,IAAIlB,QAAQ,KAAKgF,sBAAS,CAACC,GAAG,EAAE;MAC9BF,IAAI,GAAG;QACL,GAAGA,IAAI;QACPG,IAAI,EAAE,IAAI,CAACxG,OAAO,CAACwG,IAAI;QACvBL;MACF,CAAC;IACH,CAAC,MAAM,IAAI7E,QAAQ,KAAKgF,sBAAS,CAACG,OAAO,EAAE;MACzCJ,IAAI,GAAG;QACL,GAAGA,IAAI;QACPG,IAAI,EAAE,IAAI,CAACxG,OAAO,CAACwG;MACrB,CAAC;IACH;;IAEA;IACA,MAAMb,MAAM,GAAG,MAAM,IAAAe,kCAAe,EAAC,IAAI,CAAC3G,UAAU,EAAEsG,IAAI,CAAC;IAE3D,MAAM;MAAEnC,EAAE,EAAED,OAAO;MAAEM,QAAQ;MAAE1B;IAA0B,CAAC,GAAG8C,MAAM;IAEnEhF,cAAG,CAACwB,GAAG,CAAC,uDAAuD,CAAC;IAChExB,cAAG,CAACwB,GAAG,CACJ,qCAAoCH,gBAAK,CAACsB,SAAS,CAACS,QAAQ,GAACU,wBAAwB,EAAE,CAAE,IAAG,CAC9F;IACD,IAAIF,QAAQ,KAAK,QAAQ,IAAI1B,yBAAyB,EAAE;MACtDlC,cAAG,CAACwB,GAAG,CACL,2FAA2F,CAC5F;IACH;IAEA,MAAMwE,IAAI,GAAG,MAAM/G,kBAAW,CAACgH,mBAAmB,EAAE;IAEpD,IAAI3C,OAAO,EAAE;MACX,MAAMU,GAAG,GAAGZ,QAAQ,GAACC,qBAAqB,CAAC;QACzCC,OAAO;QACPE,WAAW,EAAE,IAAI,CAAChE,QAAQ,CAACgD,IAAI;QAC/BM,QAAQ,EAAE,IAAI,CAACtD,QAAQ,CAACiD,KAAK,KAAK,CAAAuD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,IAAI,MAAK,MAAM,GAAGF,IAAI,CAAClD,QAAQ,GAAGW,SAAS;MACrF,CAAC,CAAC;MAEFzD,cAAG,CAACwB,GAAG,CAAE,oCAAmCH,gBAAK,CAACsB,SAAS,CAACqB,GAAG,CAAE,IAAG,CAAC;IACvE;IAEA,IAAI,IAAI,CAAC3E,OAAO,CAACsF,IAAI,EAAE;MACrB,MAAMwB,QAAQ,GAAGtE,SAAS,GAAG;QAAEA;MAAU,CAAC,GAAG,CAAC,CAAC;MAC/C,MAAMuE,YAAY,GAAG,MAAM,IAAI,CAACzB,IAAI,CAACrB,OAAO,EAAE6C,QAAQ,CAAC;MACvD,MAAME,WAAW,GAAGD,YAAY,CAACE,UAAU,GACvClD,QAAQ,GAACmD,oBAAoB,CAACH,YAAY,CAACE,UAAU,CAAC,GACtDF,YAAY,CAACrC,SAAS,CAACC,GAAG;MAC9BhE,cAAG,CAACwG,gBAAgB,EAAE;MACtBxG,cAAG,CAACwB,GAAG,CACJ,GAAEH,gBAAK,CAACoF,KAAK,CAAC,oCAAoC,CAAE,IAAGpF,gBAAK,CAACsB,SAAS,CAAC0D,WAAW,CAAE,EAAC,CACvF;IACH,CAAC,MAAM;MACLrG,cAAG,CAACwB,GAAG,CAAC,6EAA6E,CAAC;IACxF;EACF;EAEAb,QAAQ,GAAa;IACnB,OAAOgF,sBAAS,CAACe,GAAG;EACtB;AACF;AAAC"}