{"version":3,"file":"Github.js","names":["isUrlOk","url","res","fetch","status","getRepoInfo","examplePath","username","name","t","_branch","file","pathname","split","filePath","replace","join","undefined","infoResponse","info","json","branch","RegExp","hasRepo","contentsUrl","packagePath","resolveTemplateArgAsync","tempDir","oraInstance","appName","template","templatePath","repoInfo","repoUrl","URL","error","code","fail","path","resolve","fs","existsSync","CommandError","extractLocalNpmTarballAsync","cwd","origin","chalk","red","AbortCommandError","found","text","bold","cyan","downloadAndExtractRepoAsync","root","projectName","basename","strip","length","Log","debug","extractNpmTarballFromUrlAsync","fileList"],"sources":["../../../src/commands/eject/Github.ts"],"sourcesContent":["import chalk from 'chalk';\nimport * as fs from 'fs-extra';\nimport fetch from 'node-fetch';\nimport { Ora } from 'ora';\nimport path from 'path';\n\nimport CommandError, { AbortCommandError } from '../../CommandError';\nimport Log from '../../log';\nimport { extractLocalNpmTarballAsync, extractNpmTarballFromUrlAsync } from '../utils/npm';\n\ntype RepoInfo = {\n  username: string;\n  name: string;\n  branch: string;\n  filePath: string;\n};\n\nasync function isUrlOk(url: string): Promise<boolean> {\n  try {\n    const res = await fetch(url);\n    return res.status === 200;\n  } catch {\n    return false;\n  }\n}\n\nasync function getRepoInfo(url: any, examplePath?: string): Promise<RepoInfo | undefined> {\n  const [, username, name, t, _branch, ...file] = url.pathname.split('/');\n  const filePath = examplePath ? examplePath.replace(/^\\//, '') : file.join('/');\n\n  // Support repos whose entire purpose is to be an example, e.g.\n  // https://github.com/:username/:my-cool-example-repo-name.\n  if (t === undefined) {\n    const infoResponse = await fetch(`https://api.github.com/repos/${username}/${name}`);\n    if (infoResponse.status !== 200) {\n      return;\n    }\n    const info = await infoResponse.json();\n    return { username, name, branch: info['default_branch'], filePath };\n  }\n\n  // If examplePath is available, the branch name takes the entire path\n  const branch = examplePath\n    ? `${_branch}/${file.join('/')}`.replace(new RegExp(`/${filePath}|/$`), '')\n    : _branch;\n\n  if (username && name && branch && t === 'tree') {\n    return { username, name, branch, filePath };\n  }\n  return undefined;\n}\n\nfunction hasRepo({ username, name, branch, filePath }: RepoInfo) {\n  const contentsUrl = `https://api.github.com/repos/${username}/${name}/contents`;\n  const packagePath = `${filePath ? `/${filePath}` : ''}/package.json`;\n\n  return isUrlOk(contentsUrl + packagePath + `?ref=${branch}`);\n}\n\nexport async function resolveTemplateArgAsync(\n  tempDir: string,\n  oraInstance: Ora,\n  appName: string,\n  template: string,\n  templatePath?: string\n) {\n  let repoInfo: RepoInfo | undefined;\n\n  if (template) {\n    // @ts-ignore\n    let repoUrl: URL | undefined;\n\n    try {\n      // @ts-ignore\n      repoUrl = new URL(template);\n    } catch (error: any) {\n      if (error.code !== 'ERR_INVALID_URL') {\n        oraInstance.fail(error);\n        throw error;\n      }\n    }\n\n    if (!repoUrl) {\n      const templatePath = path.resolve(template);\n      if (!fs.existsSync(templatePath)) {\n        throw new CommandError(`template file does not exist: ${templatePath}`);\n      }\n\n      await extractLocalNpmTarballAsync(templatePath, { cwd: tempDir, name: appName });\n      return tempDir;\n    }\n\n    if (repoUrl.origin !== 'https://github.com') {\n      oraInstance.fail(\n        `Invalid URL: ${chalk.red(\n          `\"${template}\"`\n        )}. Only GitHub repositories are supported. Please use a GitHub URL and try again.`\n      );\n      throw new AbortCommandError();\n    }\n\n    repoInfo = await getRepoInfo(repoUrl, templatePath);\n\n    if (!repoInfo) {\n      oraInstance.fail(\n        `Found invalid GitHub URL: ${chalk.red(`\"${template}\"`)}. Please fix the URL and try again.`\n      );\n      throw new AbortCommandError();\n    }\n\n    const found = await hasRepo(repoInfo);\n\n    if (!found) {\n      oraInstance.fail(\n        `Could not locate the repository for ${chalk.red(\n          `\"${template}\"`\n        )}. Please check that the repository exists and try again.`\n      );\n      throw new AbortCommandError();\n    }\n  }\n\n  if (repoInfo) {\n    oraInstance.text = chalk.bold(\n      `Downloading files from repo ${chalk.cyan(template)}. This might take a moment.`\n    );\n\n    await downloadAndExtractRepoAsync(tempDir, repoInfo);\n  }\n\n  return true;\n}\n\nfunction downloadAndExtractRepoAsync(\n  root: string,\n  { username, name, branch, filePath }: RepoInfo\n): Promise<void> {\n  const projectName = path.basename(root);\n\n  const strip = filePath ? filePath.split('/').length + 1 : 1;\n\n  const url = `https://codeload.github.com/${username}/${name}/tar.gz/${branch}`;\n  Log.debug('Downloading tarball from:', url);\n  return extractNpmTarballFromUrlAsync(url, {\n    cwd: root,\n    name: projectName,\n    strip,\n    fileList: [`${name}-${branch}${filePath ? `/${filePath}` : ''}`],\n  });\n}\n"],"mappings":"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"}