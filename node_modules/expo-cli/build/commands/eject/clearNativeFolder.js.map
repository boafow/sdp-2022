{"version":3,"file":"clearNativeFolder.js","names":["directoryExistsAsync","file","fs","stat","catch","isDirectory","clearNativeFolder","projectRoot","folders","step","logNewSection","join","Promise","all","map","folderName","remove","path","succeed","error","fail","message","hasRequiredAndroidFilesAsync","AndroidConfig","Paths","getAppBuildGradleAsync","getProjectBuildGradleAsync","getAndroidManifestAsync","getMainApplicationAsync","isAndroidProjectValidAsync","hasRequiredIOSFilesAsync","IOSConfig","getAppDelegate","getAllXcodeProjectPaths","getAllInfoPlistPaths","getAllPBXProjectPaths","isIOSProjectValidAsync","promptToClearMalformedNativeProjectsAsync","checkPlatforms","isAndroidValid","isIOSValid","includes","resolve","platforms","filter","Boolean","displayPlatforms","platform","chalk","cyan","length","isNonInteractive","confirmAsync","initial","Log","warn"],"sources":["../../../src/commands/eject/clearNativeFolder.ts"],"sourcesContent":["import { AndroidConfig, IOSConfig } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\n\nimport Log from '../../log';\nimport { logNewSection } from '../../utils/ora';\nimport { confirmAsync } from '../../utils/prompts';\nimport { isNonInteractive } from '../utils/environment';\n\nexport async function directoryExistsAsync(file: string): Promise<boolean> {\n  return (await fs.stat(file).catch(() => null))?.isDirectory() ?? false;\n}\n\nexport async function clearNativeFolder(projectRoot: string, folders: string[]) {\n  const step = logNewSection(`Clearing ${folders.join(', ')}`);\n  try {\n    await Promise.all(folders.map(folderName => fs.remove(path.join(projectRoot, folderName))));\n    step.succeed(`Cleared ${folders.join(', ')} code`);\n  } catch (error: any) {\n    step.fail(`Failed to delete ${folders.join(', ')} code: ${error.message}`);\n    throw error;\n  }\n}\n\nexport async function hasRequiredAndroidFilesAsync(projectRoot: string) {\n  try {\n    await Promise.all([\n      AndroidConfig.Paths.getAppBuildGradleAsync(projectRoot),\n      AndroidConfig.Paths.getProjectBuildGradleAsync(projectRoot),\n      AndroidConfig.Paths.getAndroidManifestAsync(projectRoot),\n      AndroidConfig.Paths.getMainApplicationAsync(projectRoot),\n    ]);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nasync function isAndroidProjectValidAsync(projectRoot: string) {\n  // Only perform the check if the native folder is present.\n  if (!(await directoryExistsAsync(path.join(projectRoot, 'android')))) {\n    return true;\n  }\n  return hasRequiredAndroidFilesAsync(projectRoot);\n}\n\nexport async function hasRequiredIOSFilesAsync(projectRoot: string) {\n  try {\n    // If any of the following required files are missing, then the project is malformed.\n    await Promise.all([\n      IOSConfig.Paths.getAppDelegate(projectRoot),\n      IOSConfig.Paths.getAllXcodeProjectPaths(projectRoot),\n      IOSConfig.Paths.getAllInfoPlistPaths(projectRoot),\n      IOSConfig.Paths.getAllPBXProjectPaths(projectRoot),\n    ]);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nasync function isIOSProjectValidAsync(projectRoot: string) {\n  // Only perform the check if the native folder is present.\n  if (!(await directoryExistsAsync(path.join(projectRoot, 'ios')))) {\n    return true;\n  }\n  return hasRequiredIOSFilesAsync(projectRoot);\n}\n\nexport async function promptToClearMalformedNativeProjectsAsync(\n  projectRoot: string,\n  checkPlatforms: string[]\n) {\n  const [isAndroidValid, isIOSValid] = await Promise.all([\n    checkPlatforms.includes('android')\n      ? isAndroidProjectValidAsync(projectRoot)\n      : Promise.resolve(true),\n    checkPlatforms.includes('ios') ? isIOSProjectValidAsync(projectRoot) : Promise.resolve(true),\n  ]);\n\n  if (isAndroidValid && isIOSValid) {\n    return;\n  }\n\n  const platforms = [!isAndroidValid && 'android', !isIOSValid && 'ios'].filter(\n    Boolean\n  ) as string[];\n\n  const displayPlatforms = platforms.map(platform => chalk.cyan(platform));\n  // Prompt which platforms to reset.\n  const message =\n    platforms.length > 1\n      ? `The ${displayPlatforms[0]} and ${displayPlatforms[1]} projects are malformed`\n      : `The ${displayPlatforms[0]} project is malformed`;\n\n  if (\n    // If the process is non-interactive, default to clearing the malformed native project.\n    // This would only happen on re-running eject.\n    isNonInteractive() ||\n    // Prompt to clear the native folders.\n    (await confirmAsync({\n      message: `${message}, would you like to clear the project files and reinitialize them?`,\n      initial: true,\n    }))\n  ) {\n    if (isNonInteractive()) {\n      Log.warn(`${message}, project files will be cleared and reinitialized.`);\n    }\n    await clearNativeFolder(projectRoot, platforms);\n  } else {\n    // Warn the user that the process may fail.\n    Log.warn('Continuing with malformed native projects');\n  }\n}\n"],"mappings":";;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAwD;AAAA;AAAA;AAEjD,eAAeA,oBAAoB,CAACC,IAAY,EAAoB;EAAA;EACzE,wDAAQ,MAAMC,EAAE,GAACC,IAAI,CAACF,IAAI,CAAC,CAACG,KAAK,CAAC,MAAM,IAAI,CAAC,yDAAtC,qBAAyCC,WAAW,EAAE,yEAAI,KAAK;AACxE;AAEO,eAAeC,iBAAiB,CAACC,WAAmB,EAAEC,OAAiB,EAAE;EAC9E,MAAMC,IAAI,GAAG,IAAAC,oBAAa,EAAE,YAAWF,OAAO,CAACG,IAAI,CAAC,IAAI,CAAE,EAAC,CAAC;EAC5D,IAAI;IACF,MAAMC,OAAO,CAACC,GAAG,CAACL,OAAO,CAACM,GAAG,CAACC,UAAU,IAAIb,EAAE,GAACc,MAAM,CAACC,IAAI,GAACN,IAAI,CAACJ,WAAW,EAAEQ,UAAU,CAAC,CAAC,CAAC,CAAC;IAC3FN,IAAI,CAACS,OAAO,CAAE,WAAUV,OAAO,CAACG,IAAI,CAAC,IAAI,CAAE,OAAM,CAAC;EACpD,CAAC,CAAC,OAAOQ,KAAU,EAAE;IACnBV,IAAI,CAACW,IAAI,CAAE,oBAAmBZ,OAAO,CAACG,IAAI,CAAC,IAAI,CAAE,UAASQ,KAAK,CAACE,OAAQ,EAAC,CAAC;IAC1E,MAAMF,KAAK;EACb;AACF;AAEO,eAAeG,4BAA4B,CAACf,WAAmB,EAAE;EACtE,IAAI;IACF,MAAMK,OAAO,CAACC,GAAG,CAAC,CAChBU,8BAAa,CAACC,KAAK,CAACC,sBAAsB,CAAClB,WAAW,CAAC,EACvDgB,8BAAa,CAACC,KAAK,CAACE,0BAA0B,CAACnB,WAAW,CAAC,EAC3DgB,8BAAa,CAACC,KAAK,CAACG,uBAAuB,CAACpB,WAAW,CAAC,EACxDgB,8BAAa,CAACC,KAAK,CAACI,uBAAuB,CAACrB,WAAW,CAAC,CACzD,CAAC;IACF,OAAO,IAAI;EACb,CAAC,CAAC,MAAM;IACN,OAAO,KAAK;EACd;AACF;AAEA,eAAesB,0BAA0B,CAACtB,WAAmB,EAAE;EAC7D;EACA,IAAI,EAAE,MAAMP,oBAAoB,CAACiB,IAAI,GAACN,IAAI,CAACJ,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE;IACpE,OAAO,IAAI;EACb;EACA,OAAOe,4BAA4B,CAACf,WAAW,CAAC;AAClD;AAEO,eAAeuB,wBAAwB,CAACvB,WAAmB,EAAE;EAClE,IAAI;IACF;IACA,MAAMK,OAAO,CAACC,GAAG,CAAC,CAChBkB,0BAAS,CAACP,KAAK,CAACQ,cAAc,CAACzB,WAAW,CAAC,EAC3CwB,0BAAS,CAACP,KAAK,CAACS,uBAAuB,CAAC1B,WAAW,CAAC,EACpDwB,0BAAS,CAACP,KAAK,CAACU,oBAAoB,CAAC3B,WAAW,CAAC,EACjDwB,0BAAS,CAACP,KAAK,CAACW,qBAAqB,CAAC5B,WAAW,CAAC,CACnD,CAAC;IACF,OAAO,IAAI;EACb,CAAC,CAAC,MAAM;IACN,OAAO,KAAK;EACd;AACF;AAEA,eAAe6B,sBAAsB,CAAC7B,WAAmB,EAAE;EACzD;EACA,IAAI,EAAE,MAAMP,oBAAoB,CAACiB,IAAI,GAACN,IAAI,CAACJ,WAAW,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE;IAChE,OAAO,IAAI;EACb;EACA,OAAOuB,wBAAwB,CAACvB,WAAW,CAAC;AAC9C;AAEO,eAAe8B,yCAAyC,CAC7D9B,WAAmB,EACnB+B,cAAwB,EACxB;EACA,MAAM,CAACC,cAAc,EAAEC,UAAU,CAAC,GAAG,MAAM5B,OAAO,CAACC,GAAG,CAAC,CACrDyB,cAAc,CAACG,QAAQ,CAAC,SAAS,CAAC,GAC9BZ,0BAA0B,CAACtB,WAAW,CAAC,GACvCK,OAAO,CAAC8B,OAAO,CAAC,IAAI,CAAC,EACzBJ,cAAc,CAACG,QAAQ,CAAC,KAAK,CAAC,GAAGL,sBAAsB,CAAC7B,WAAW,CAAC,GAAGK,OAAO,CAAC8B,OAAO,CAAC,IAAI,CAAC,CAC7F,CAAC;EAEF,IAAIH,cAAc,IAAIC,UAAU,EAAE;IAChC;EACF;EAEA,MAAMG,SAAS,GAAG,CAAC,CAACJ,cAAc,IAAI,SAAS,EAAE,CAACC,UAAU,IAAI,KAAK,CAAC,CAACI,MAAM,CAC3EC,OAAO,CACI;EAEb,MAAMC,gBAAgB,GAAGH,SAAS,CAAC7B,GAAG,CAACiC,QAAQ,IAAIC,gBAAK,CAACC,IAAI,CAACF,QAAQ,CAAC,CAAC;EACxE;EACA,MAAM1B,OAAO,GACXsB,SAAS,CAACO,MAAM,GAAG,CAAC,GACf,OAAMJ,gBAAgB,CAAC,CAAC,CAAE,QAAOA,gBAAgB,CAAC,CAAC,CAAE,yBAAwB,GAC7E,OAAMA,gBAAgB,CAAC,CAAC,CAAE,uBAAsB;EAEvD;EACE;EACA;EACA,IAAAK,+BAAgB,GAAE;EAClB;EACC,MAAM,IAAAC,uBAAY,EAAC;IAClB/B,OAAO,EAAG,GAAEA,OAAQ,oEAAmE;IACvFgC,OAAO,EAAE;EACX,CAAC,CAAC,CAAC,EACH;IACA,IAAI,IAAAF,+BAAgB,GAAE,EAAE;MACtBG,cAAG,CAACC,IAAI,CAAE,GAAElC,OAAQ,oDAAmD,CAAC;IAC1E;IACA,MAAMf,iBAAiB,CAACC,WAAW,EAAEoC,SAAS,CAAC;EACjD,CAAC,MAAM;IACL;IACAW,cAAG,CAACC,IAAI,CAAC,2CAA2C,CAAC;EACvD;AACF"}