{"version":3,"file":"customizeAsync.js","names":["maybeWarnToCommitAsync","projectRoot","workingTreeStatus","result","spawnAsync","stdout","Log","log","chalk","yellow","dependencyMap","resolveFromLocalOrGlobal","moduleId","resolved","resolveFrom","silent","require","resolve","generateFilesAsync","staticPath","options","answer","templateFolder","promises","file","Object","keys","includes","projectFilePath","path","push","fs","copy","join","overwrite","recursive","packageManager","PackageManager","createForProject","dependency","addDevAsync","fileName","basename","src","dest","pathExists","Error","Promise","all","actionAsync","force","warnAboutLocalCLI","localCmd","exp","getConfig","skipSDKVersionRequirement","dirname","files","readdir","filter","item","web","allFiles","map","values","localProjectFile","exists","existsSync","title","value","disabled","description","red","length","bold","prompts","type","name","message","hint","warn","limit","instructions","choices"],"sources":["../../../src/commands/eject/customizeAsync.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport * as PackageManager from '@expo/package-manager';\nimport spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport prompts from 'prompts';\nimport resolveFrom from 'resolve-from';\n\nimport Log from '../../log';\nimport { warnAboutLocalCLI } from '../../utils/migration';\n\ntype Options = { force: boolean };\n\nasync function maybeWarnToCommitAsync(projectRoot: string) {\n  let workingTreeStatus = 'unknown';\n  try {\n    const result = await spawnAsync('git', ['status', '--porcelain']);\n    workingTreeStatus = result.stdout === '' ? 'clean' : 'dirty';\n  } catch {\n    // Maybe git is not installed?\n    // Maybe this project is not using git?\n  }\n\n  if (workingTreeStatus === 'dirty') {\n    Log.log(\n      chalk.yellow(\n        'You should commit your changes before generating code into the root of your project.'\n      )\n    );\n  }\n}\n\nconst dependencyMap: { [key: string]: string[] } = {\n  'babel.config.js': ['babel-preset-expo'],\n  'webpack.config.js': ['@expo/webpack-config'],\n};\n\nfunction resolveFromLocalOrGlobal(projectRoot: string, moduleId: string) {\n  const resolved = resolveFrom.silent(projectRoot, moduleId);\n  if (resolved) {\n    return resolved;\n  }\n  return require.resolve(moduleId);\n}\n\nasync function generateFilesAsync({\n  projectRoot,\n  staticPath,\n  options,\n  answer,\n  templateFolder,\n}: {\n  projectRoot: string;\n  staticPath: string;\n  options: Options;\n  answer: string[];\n  templateFolder: string;\n}) {\n  const promises = [];\n\n  for (const file of answer) {\n    if (Object.keys(dependencyMap).includes(file)) {\n      const projectFilePath = path.resolve(projectRoot, file);\n      // copy the file from template\n      promises.push(\n        fs.copy(\n          resolveFromLocalOrGlobal(projectRoot, path.join('@expo/webpack-config/template', file)),\n          projectFilePath,\n          { overwrite: true, recursive: true }\n        )\n      );\n\n      if (file in dependencyMap) {\n        const packageManager = PackageManager.createForProject(projectRoot, { log: Log.log });\n        for (const dependency of dependencyMap[file]) {\n          promises.push(packageManager.addDevAsync(dependency));\n        }\n      }\n    } else {\n      const fileName = path.basename(file);\n      const src = path.resolve(templateFolder, fileName);\n      const dest = path.resolve(projectRoot, staticPath, fileName);\n      if (await fs.pathExists(src)) {\n        promises.push(fs.copy(src, dest, { overwrite: true, recursive: true }));\n      } else {\n        throw new Error(`Expected template file for ${fileName} doesn't exist at path: ${src}`);\n      }\n    }\n  }\n  await Promise.all(promises);\n}\n\nexport async function actionAsync(projectRoot: string = './', options: Options = { force: false }) {\n  warnAboutLocalCLI(projectRoot, { localCmd: 'customize' });\n  // Get the static path (defaults to 'web/')\n  // Doesn't matter if expo is installed or which mode is used.\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n\n  const templateFolder = path.dirname(\n    resolveFromLocalOrGlobal(projectRoot, '@expo/webpack-config/web-default/index.html')\n  );\n\n  const files = (await fs.readdir(templateFolder)).filter(item => item !== 'icon.png');\n  const { web: { staticPath = 'web' } = {} } = exp;\n\n  const allFiles = [\n    ...Object.keys(dependencyMap),\n    ...files.map(file => path.join(staticPath, file)),\n  ];\n  const values = [];\n\n  for (const file of allFiles) {\n    const localProjectFile = path.resolve(projectRoot, file);\n    const exists = fs.existsSync(localProjectFile);\n\n    values.push({\n      title: file,\n      value: file,\n      // @ts-ignore: broken types\n      disabled: !options.force && exists,\n      description:\n        options.force && exists ? chalk.red('This will overwrite the existing file') : '',\n    });\n  }\n\n  if (!values.filter(({ disabled }) => !disabled).length) {\n    Log.log(\n      chalk.yellow('\\nAll of the custom web files already exist.') +\n        '\\nTo regenerate the files run:' +\n        chalk.bold(' expo customize:web --force\\n')\n    );\n    return;\n  }\n\n  await maybeWarnToCommitAsync(projectRoot);\n\n  const { answer } = await prompts({\n    type: 'multiselect',\n    name: 'answer',\n    message: 'Which files would you like to generate?',\n    hint: '- Space to select. Return to submit',\n    // @ts-ignore: broken types\n    warn: 'File exists, use --force to overwrite it.',\n    limit: values.length,\n    instructions: '',\n    choices: values,\n  });\n  if (!answer || answer.length === 0) {\n    Log.log('\\n\\u203A Exiting with no change...\\n');\n    return;\n  }\n  await generateFilesAsync({\n    projectRoot,\n    staticPath,\n    options,\n    answer,\n    templateFolder,\n  });\n}\n"],"mappings":"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"}