{"version":3,"file":"prebuildAppAsync.js","names":["prebuildAsync","projectRoot","platforms","options","ensureValidPlatforms","assertPlatforms","exp","pkg","ensureConfigAsync","tempDir","temporary","directory","hasNewProjectFiles","needsPodInstall","hasNewDependencies","createNativeProjectsFromTemplateAsync","template","resolveTemplateOption","undefined","skipDependencyUpdate","shouldInstall","install","packageManager","CreateApp","resolvePackageManager","npm","yarn","installNodeDependenciesAsync","clean","configSyncingStep","logNewSection","managedConfig","configureProjectAsync","succeed","error","fail","podsInstalled","includes","installCocoaPodsAsync","Log","debug","warnIfDependenciesRequireAdditionalSetup","sdkVersion","Object","keys","_internal","pluginHistory","nodeInstall","podInstall"],"sources":["../../../src/commands/eject/prebuildAppAsync.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport { ModPlatform } from '@expo/config-plugins';\nimport temporary from 'tempy';\n\nimport Log from '../../log';\nimport { logNewSection } from '../../utils/ora';\nimport * as CreateApp from '../utils/CreateApp';\nimport configureProjectAsync from './configureProjectAsync';\nimport { createNativeProjectsFromTemplateAsync } from './createNativeProjectsFromTemplateAsync';\nimport { ensureConfigAsync } from './ensureConfigAsync';\nimport { installNodeDependenciesAsync } from './installNodeDependenciesAsync';\nimport { assertPlatforms, ensureValidPlatforms } from './platformOptions';\nimport { resolveTemplateOption } from './resolveTemplate';\nimport { warnIfDependenciesRequireAdditionalSetup } from './setupWarnings';\n\nexport type EjectAsyncOptions = {\n  verbose?: boolean;\n  force?: boolean;\n  template?: string;\n  install?: boolean;\n  packageManager?: 'npm' | 'yarn';\n  platforms: ModPlatform[];\n  skipDependencyUpdate?: string[];\n};\n\nexport type PrebuildResults = {\n  exp: ExpoConfig;\n  hasNewProjectFiles: boolean;\n  platforms: ModPlatform[];\n  podInstall: boolean;\n  nodeInstall: boolean;\n  packageManager: string;\n};\n\n/**\n * Entry point into the prebuild process, delegates to other helpers to perform various steps.\n *\n * 1. Create native projects (ios, android)\n * 2. Install node modules\n * 3. Apply config to native projects\n * 4. Install CocoaPods\n */\nexport async function prebuildAsync(\n  projectRoot: string,\n  { platforms, ...options }: EjectAsyncOptions\n): Promise<PrebuildResults> {\n  platforms = ensureValidPlatforms(platforms);\n  assertPlatforms(platforms);\n\n  const { exp, pkg } = await ensureConfigAsync({ projectRoot, platforms });\n  const tempDir = temporary.directory();\n\n  const {\n    hasNewProjectFiles,\n    needsPodInstall,\n    hasNewDependencies,\n  } = await createNativeProjectsFromTemplateAsync({\n    projectRoot,\n    exp,\n    pkg,\n    template: options.template != null ? resolveTemplateOption(options.template) : undefined,\n    tempDir,\n    platforms,\n    skipDependencyUpdate: options.skipDependencyUpdate,\n  });\n\n  // Install node modules\n  const shouldInstall = options?.install !== false;\n\n  const packageManager = CreateApp.resolvePackageManager({\n    install: shouldInstall,\n    npm: options?.packageManager === 'npm',\n    yarn: options?.packageManager === 'yarn',\n  });\n\n  if (shouldInstall) {\n    await installNodeDependenciesAsync(projectRoot, packageManager, {\n      // We delete the dependencies when new ones are added because native packages are more fragile.\n      // npm doesn't work well so we always run the cleaning step when npm is used in favor of yarn.\n      clean: hasNewDependencies || packageManager === 'npm',\n    });\n  }\n\n  // Apply Expo config to native projects\n  const configSyncingStep = logNewSection('Config syncing');\n  let managedConfig: ExpoConfig;\n  try {\n    managedConfig = await configureProjectAsync({\n      projectRoot,\n      platforms,\n    });\n    configSyncingStep.succeed('Config synced');\n  } catch (error: any) {\n    configSyncingStep.fail('Config sync failed');\n    throw error;\n  }\n\n  // Install CocoaPods\n  let podsInstalled: boolean = false;\n  // err towards running pod install less because it's slow and users can easily run npx pod-install afterwards.\n  if (platforms.includes('ios') && shouldInstall && needsPodInstall) {\n    podsInstalled = await CreateApp.installCocoaPodsAsync(projectRoot);\n  } else {\n    Log.debug('Skipped pod install');\n  }\n\n  warnIfDependenciesRequireAdditionalSetup(\n    pkg,\n    exp.sdkVersion,\n    Object.keys(managedConfig._internal?.pluginHistory ?? {})\n  );\n\n  return {\n    packageManager,\n    nodeInstall: options.install === false,\n    podInstall: !podsInstalled,\n    platforms,\n    hasNewProjectFiles,\n    exp,\n  };\n}\n"],"mappings":";;;;;;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAA2E;AAAA;AAAA;AAqB3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,aAAa,CACjCC,WAAmB,EACnB;EAAEC,SAAS;EAAE,GAAGC;AAA2B,CAAC,EAClB;EAAA;EAC1BD,SAAS,GAAG,IAAAE,uCAAoB,EAACF,SAAS,CAAC;EAC3C,IAAAG,kCAAe,EAACH,SAAS,CAAC;EAE1B,MAAM;IAAEI,GAAG;IAAEC;EAAI,CAAC,GAAG,MAAM,IAAAC,sCAAiB,EAAC;IAAEP,WAAW;IAAEC;EAAU,CAAC,CAAC;EACxE,MAAMO,OAAO,GAAGC,gBAAS,CAACC,SAAS,EAAE;EAErC,MAAM;IACJC,kBAAkB;IAClBC,eAAe;IACfC;EACF,CAAC,GAAG,MAAM,IAAAC,8EAAqC,EAAC;IAC9Cd,WAAW;IACXK,GAAG;IACHC,GAAG;IACHS,QAAQ,EAAEb,OAAO,CAACa,QAAQ,IAAI,IAAI,GAAG,IAAAC,wCAAqB,EAACd,OAAO,CAACa,QAAQ,CAAC,GAAGE,SAAS;IACxFT,OAAO;IACPP,SAAS;IACTiB,oBAAoB,EAAEhB,OAAO,CAACgB;EAChC,CAAC,CAAC;;EAEF;EACA,MAAMC,aAAa,GAAG,CAAAjB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEkB,OAAO,MAAK,KAAK;EAEhD,MAAMC,cAAc,GAAGC,SAAS,GAACC,qBAAqB,CAAC;IACrDH,OAAO,EAAED,aAAa;IACtBK,GAAG,EAAE,CAAAtB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,cAAc,MAAK,KAAK;IACtCI,IAAI,EAAE,CAAAvB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,cAAc,MAAK;EACpC,CAAC,CAAC;EAEF,IAAIF,aAAa,EAAE;IACjB,MAAM,IAAAO,4DAA4B,EAAC1B,WAAW,EAAEqB,cAAc,EAAE;MAC9D;MACA;MACAM,KAAK,EAAEd,kBAAkB,IAAIQ,cAAc,KAAK;IAClD,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMO,iBAAiB,GAAG,IAAAC,oBAAa,EAAC,gBAAgB,CAAC;EACzD,IAAIC,aAAyB;EAC7B,IAAI;IACFA,aAAa,GAAG,MAAM,IAAAC,gCAAqB,EAAC;MAC1C/B,WAAW;MACXC;IACF,CAAC,CAAC;IACF2B,iBAAiB,CAACI,OAAO,CAAC,eAAe,CAAC;EAC5C,CAAC,CAAC,OAAOC,KAAU,EAAE;IACnBL,iBAAiB,CAACM,IAAI,CAAC,oBAAoB,CAAC;IAC5C,MAAMD,KAAK;EACb;;EAEA;EACA,IAAIE,aAAsB,GAAG,KAAK;EAClC;EACA,IAAIlC,SAAS,CAACmC,QAAQ,CAAC,KAAK,CAAC,IAAIjB,aAAa,IAAIP,eAAe,EAAE;IACjEuB,aAAa,GAAG,MAAMb,SAAS,GAACe,qBAAqB,CAACrC,WAAW,CAAC;EACpE,CAAC,MAAM;IACLsC,cAAG,CAACC,KAAK,CAAC,qBAAqB,CAAC;EAClC;EAEA,IAAAC,yDAAwC,EACtClC,GAAG,EACHD,GAAG,CAACoC,UAAU,EACdC,MAAM,CAACC,IAAI,oDAACb,aAAa,CAACc,SAAS,2DAAvB,uBAAyBC,aAAa,yEAAI,CAAC,CAAC,CAAC,CAC1D;EAED,OAAO;IACLxB,cAAc;IACdyB,WAAW,EAAE5C,OAAO,CAACkB,OAAO,KAAK,KAAK;IACtC2B,UAAU,EAAE,CAACZ,aAAa;IAC1BlC,SAAS;IACTU,kBAAkB;IAClBN;EACF,CAAC;AACH"}