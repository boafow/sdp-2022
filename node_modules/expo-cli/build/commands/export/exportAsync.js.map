{"version":3,"file":"exportAsync.js","names":["promptPublicUrlAsync","value","prompt","type","name","validate","UrlUtils","isHttps","message","CommandError","ensurePublicUrlAsync","url","isDev","program","nonInteractive","isURL","protocols","Log","nestedWarn","exportFilesAsync","projectRoot","options","platforms","platformsFromPlatform","platform","loose","exportOptions","dumpAssetmap","dumpSourcemap","dev","publishOptions","resetCache","clear","target","exportAppAsync","publicUrl","assetUrl","outputDir","experimentalBundle","mergeSourceDirectoriresAsync","mergeSrcDirs","length","srcDirs","mergeSrcDir","concat","mergeSrcUrl","join","nested","mergeAppDistributions","collectMergeSourceUrlsAsync","tmpFolder","path","resolve","fs","remove","ensureDir","downloadDecompressPromises","map","uniqFilename","basename","crypto","randomBytes","toString","tmpFolderUncompressed","downloadAndDecompressAsync","push","Promise","all","actionAsync","warnAboutLocalCLI","localCmd","outputPath","CreateApp","assertFolderEmptyAsync","folderName","overwrite","log"],"sources":["../../../src/commands/export/exportAsync.ts"],"sourcesContent":["import type { ProjectTarget } from '@expo/config';\nimport program from 'commander';\nimport crypto from 'crypto';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { UrlUtils } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\nimport { warnAboutLocalCLI } from '../../utils/migration';\nimport prompt from '../../utils/prompts';\nimport { platformsFromPlatform } from '../eject/platformOptions';\nimport * as CreateApp from '../utils/CreateApp';\nimport { downloadAndDecompressAsync } from '../utils/Tar';\nimport { exportAppAsync } from './exportAppAsync';\nimport { mergeAppDistributions } from './mergeAppDistributions';\n\ntype Options = {\n  outputDir: string;\n  assetUrl: string;\n  publicUrl?: string;\n  mergeSrcUrl: string[];\n  mergeSrcDir: string[];\n  dev: boolean;\n  clear: boolean;\n  quiet: boolean;\n  platform: string;\n  target?: ProjectTarget;\n  dumpAssetmap: boolean;\n  dumpSourcemap: boolean;\n  maxWorkers?: number;\n  experimentalBundle: boolean;\n};\n\nexport async function promptPublicUrlAsync(): Promise<string> {\n  try {\n    const { value } = await prompt({\n      type: 'text',\n      name: 'value',\n      validate: UrlUtils.isHttps,\n      message: `What is the public url that will host the static files?`,\n    });\n    return value;\n  } catch {\n    throw new CommandError('MISSING_PUBLIC_URL', 'Missing required option: --public-url');\n  }\n}\n\nexport async function ensurePublicUrlAsync(url: any, isDev?: boolean): Promise<string> {\n  if (!url) {\n    if (program.nonInteractive) {\n      throw new CommandError('MISSING_PUBLIC_URL', 'Missing required option: --public-url');\n    }\n    url = await promptPublicUrlAsync();\n  }\n\n  // If we are not in dev mode, ensure that url is https\n  if (!isDev && !UrlUtils.isHttps(url)) {\n    throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n  } else if (!UrlUtils.isURL(url, { protocols: ['http', 'https'] })) {\n    Log.nestedWarn(\n      `Dev Mode: --public-url ${url} does not conform to the required HTTP(S) protocol.`\n    );\n  }\n\n  return url;\n}\n\n// TODO: We shouldn't need to wrap a method that is only used for one purpose.\nasync function exportFilesAsync(\n  projectRoot: string,\n  options: Pick<\n    Options,\n    | 'dumpAssetmap'\n    | 'dumpSourcemap'\n    | 'dev'\n    | 'clear'\n    | 'target'\n    | 'outputDir'\n    | 'publicUrl'\n    | 'platform'\n    | 'assetUrl'\n    | 'experimentalBundle'\n  >\n) {\n  const platforms = platformsFromPlatform(options.platform, { loose: true });\n\n  // Make outputDir an absolute path if it isnt already\n  const exportOptions = {\n    dumpAssetmap: options.dumpAssetmap,\n    dumpSourcemap: options.dumpSourcemap,\n    isDev: options.dev,\n    platforms,\n    publishOptions: {\n      resetCache: !!options.clear,\n      target: options.target,\n    },\n  };\n  return await exportAppAsync(\n    projectRoot,\n    options.publicUrl!,\n    options.assetUrl,\n    options.outputDir,\n    exportOptions,\n    options.experimentalBundle\n  );\n}\n\nasync function mergeSourceDirectoriresAsync(\n  projectRoot: string,\n  mergeSrcDirs: string[],\n  options: Pick<Options, 'mergeSrcUrl' | 'mergeSrcDir' | 'outputDir'>\n): Promise<void> {\n  if (!mergeSrcDirs.length) {\n    return;\n  }\n  const srcDirs = options.mergeSrcDir.concat(options.mergeSrcUrl).join(' ');\n  Log.nested(`Starting project merge of ${srcDirs} into ${options.outputDir}`);\n\n  // Merge app distributions\n  await mergeAppDistributions(\n    projectRoot,\n    [...mergeSrcDirs, options.outputDir], // merge stuff in srcDirs and outputDir together\n    options.outputDir\n  );\n  Log.nested(\n    `Project merge was successful. Your merged files can be found in ${options.outputDir}`\n  );\n}\n\nexport async function collectMergeSourceUrlsAsync(\n  projectRoot: string,\n  mergeSrcUrl: string[]\n): Promise<string[]> {\n  // Merge src dirs/urls into a multimanifest if specified\n  const mergeSrcDirs: string[] = [];\n\n  // src urls were specified to merge in, so download and decompress them\n  if (mergeSrcUrl.length > 0) {\n    // delete .tmp if it exists and recreate it anew\n    const tmpFolder = path.resolve(projectRoot, '.tmp');\n    await fs.remove(tmpFolder);\n    await fs.ensureDir(tmpFolder);\n\n    // Download the urls into a tmp dir\n    const downloadDecompressPromises = mergeSrcUrl.map(\n      async (url: string): Promise<void> => {\n        // Add the absolute paths to srcDir\n        const uniqFilename = `${path.basename(url, '.tar.gz')}_${crypto\n          .randomBytes(16)\n          .toString('hex')}`;\n\n        const tmpFolderUncompressed = path.resolve(tmpFolder, uniqFilename);\n        await fs.ensureDir(tmpFolderUncompressed);\n        await downloadAndDecompressAsync(url, tmpFolderUncompressed);\n        // add the decompressed folder to be merged\n        mergeSrcDirs.push(tmpFolderUncompressed);\n      }\n    );\n\n    await Promise.all(downloadDecompressPromises);\n  }\n  return mergeSrcDirs;\n}\n\nexport async function actionAsync(projectRoot: string, options: Options) {\n  warnAboutLocalCLI(projectRoot, { localCmd: 'export' });\n\n  if (!options.experimentalBundle) {\n    // Ensure URL\n    options.publicUrl = await ensurePublicUrlAsync(options.publicUrl, options.dev);\n  }\n\n  // Ensure the output directory is created\n  const outputPath = path.resolve(projectRoot, options.outputDir);\n  await fs.ensureDir(outputPath);\n\n  await CreateApp.assertFolderEmptyAsync({\n    projectRoot: outputPath,\n    folderName: options.outputDir,\n    // Always overwrite files, this is inline with most bundler tooling.\n    overwrite: true,\n  });\n\n  // Wrap the XDL method for exporting assets\n  await exportFilesAsync(projectRoot, options);\n\n  // Merge src dirs/urls into a multimanifest if specified\n  const mergeSrcDirs: string[] = await collectMergeSourceUrlsAsync(\n    projectRoot,\n    options.mergeSrcUrl\n  );\n  // add any local src dirs to be merged\n  mergeSrcDirs.push(...options.mergeSrcDir);\n\n  await mergeSourceDirectoriresAsync(projectRoot, mergeSrcDirs, options);\n\n  Log.log(`Export was successful. Your exported files can be found in ${options.outputDir}`);\n}\n"],"mappings":"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"}