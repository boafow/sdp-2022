{"version":3,"file":"fetchAndroidUploadCertAsync.js","names":["actionAsync","projectRoot","options","ctx","Context","init","nonInteractive","parent","keystorePath","path","resolve","manifest","slug","uploadKeyFilename","maybeRenameExistingFileAsync","uploadKeyPath","assertSlug","experienceName","projectOwner","view","DownloadKeystore","outputPath","quiet","runCredentialsManager","keystore","android","fetchKeystore","Log","log","AndroidCredentials","exportCertBase64","keystorePassword","keyAlias","warn","fs","remove"],"sources":["../../../src/commands/fetch/fetchAndroidUploadCertAsync.ts"],"sourcesContent":["import * as fs from 'fs-extra';\nimport * as path from 'path';\nimport { AndroidCredentials } from 'xdl';\n\nimport { Context } from '../../credentials';\nimport { runCredentialsManager } from '../../credentials/route';\nimport { DownloadKeystore } from '../../credentials/views/AndroidKeystore';\nimport Log from '../../log';\nimport { assertSlug, maybeRenameExistingFileAsync, Options } from './utils';\n\nexport async function actionAsync(projectRoot: string, options: Options): Promise<void> {\n  const ctx = new Context();\n  await ctx.init(projectRoot, {\n    nonInteractive: options.parent?.nonInteractive,\n  });\n\n  const keystorePath = path.resolve(projectRoot, `${ctx.manifest.slug}.tmp.jks`);\n\n  const uploadKeyFilename = `${ctx.manifest.slug}_upload_cert.pem`;\n  await maybeRenameExistingFileAsync(projectRoot, uploadKeyFilename);\n  const uploadKeyPath = path.resolve(projectRoot, uploadKeyFilename);\n\n  try {\n    assertSlug(ctx.manifest.slug);\n    const experienceName = `@${ctx.projectOwner}/${ctx.manifest.slug}`;\n    const view = new DownloadKeystore(experienceName, {\n      outputPath: keystorePath,\n      quiet: true,\n    });\n    await runCredentialsManager(ctx, view);\n    const keystore = await ctx.android.fetchKeystore(experienceName);\n\n    if (keystore) {\n      Log.log(`Writing upload key to ${uploadKeyPath}`);\n      await AndroidCredentials.exportCertBase64(\n        {\n          keystorePath,\n          keystorePassword: keystore.keystorePassword,\n          keyAlias: keystore.keyAlias,\n        },\n        uploadKeyPath\n      );\n    } else {\n      Log.warn('There is no valid Keystore defined for this app');\n    }\n  } finally {\n    await fs.remove(keystorePath);\n  }\n}\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAA4E;AAAA;AAAA;AAErE,eAAeA,WAAW,CAACC,WAAmB,EAAEC,OAAgB,EAAiB;EAAA;EACtF,MAAMC,GAAG,GAAG,KAAIC,sBAAO,GAAE;EACzB,MAAMD,GAAG,CAACE,IAAI,CAACJ,WAAW,EAAE;IAC1BK,cAAc,qBAAEJ,OAAO,CAACK,MAAM,oDAAd,gBAAgBD;EAClC,CAAC,CAAC;EAEF,MAAME,YAAY,GAAGC,IAAI,GAACC,OAAO,CAACT,WAAW,EAAG,GAAEE,GAAG,CAACQ,QAAQ,CAACC,IAAK,UAAS,CAAC;EAE9E,MAAMC,iBAAiB,GAAI,GAAEV,GAAG,CAACQ,QAAQ,CAACC,IAAK,kBAAiB;EAChE,MAAM,IAAAE,qCAA4B,EAACb,WAAW,EAAEY,iBAAiB,CAAC;EAClE,MAAME,aAAa,GAAGN,IAAI,GAACC,OAAO,CAACT,WAAW,EAAEY,iBAAiB,CAAC;EAElE,IAAI;IACF,IAAAG,mBAAU,EAACb,GAAG,CAACQ,QAAQ,CAACC,IAAI,CAAC;IAC7B,MAAMK,cAAc,GAAI,IAAGd,GAAG,CAACe,YAAa,IAAGf,GAAG,CAACQ,QAAQ,CAACC,IAAK,EAAC;IAClE,MAAMO,IAAI,GAAG,KAAIC,mCAAgB,EAACH,cAAc,EAAE;MAChDI,UAAU,EAAEb,YAAY;MACxBc,KAAK,EAAE;IACT,CAAC,CAAC;IACF,MAAM,IAAAC,8BAAqB,EAACpB,GAAG,EAAEgB,IAAI,CAAC;IACtC,MAAMK,QAAQ,GAAG,MAAMrB,GAAG,CAACsB,OAAO,CAACC,aAAa,CAACT,cAAc,CAAC;IAEhE,IAAIO,QAAQ,EAAE;MACZG,cAAG,CAACC,GAAG,CAAE,yBAAwBb,aAAc,EAAC,CAAC;MACjD,MAAMc,yBAAkB,CAACC,gBAAgB,CACvC;QACEtB,YAAY;QACZuB,gBAAgB,EAAEP,QAAQ,CAACO,gBAAgB;QAC3CC,QAAQ,EAAER,QAAQ,CAACQ;MACrB,CAAC,EACDjB,aAAa,CACd;IACH,CAAC,MAAM;MACLY,cAAG,CAACM,IAAI,CAAC,iDAAiD,CAAC;IAC7D;EACF,CAAC,SAAS;IACR,MAAMC,EAAE,GAACC,MAAM,CAAC3B,YAAY,CAAC;EAC/B;AACF"}