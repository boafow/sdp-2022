{"version":3,"file":"index.js","names":["program","applyAsyncActionProjectDir","command","description","longDescription","helpGroup"],"sources":["../../../src/commands/fetch/index.ts"],"sourcesContent":["import type { Command } from 'commander';\n\nimport { applyAsyncActionProjectDir } from '../utils/applyAsyncAction';\n\nexport default function (program: Command) {\n  applyAsyncActionProjectDir(\n    program\n      .command('fetch:ios:certs [path]')\n      .description(`Download the project's iOS standalone app signing credentials`)\n      .longDescription(\n        `Fetch this project's iOS certificates/keys and provisioning profile. Writes files to the PROJECT_DIR and prints passwords to stdout.`\n      )\n      .helpGroup('credentials'),\n    () => import('./fetchIosCertsAsync')\n  );\n\n  applyAsyncActionProjectDir(\n    program\n      .command('fetch:android:keystore [path]')\n      .description(\"Download the project's Android keystore\")\n      .longDescription(\n        \"Fetch this project's Android Keystore. Writes Keystore to PROJECT_DIR/PROJECT_NAME.jks and prints passwords to stdout.\"\n      )\n      .helpGroup('credentials'),\n    () => import('./fetchAndroidKeystoreAsync')\n  );\n\n  applyAsyncActionProjectDir(\n    program\n      .command('fetch:android:hashes [path]')\n      .description(\"Compute and log the project's Android key hashes\")\n      .longDescription(\n        \"Fetch this project's Android key hashes needed to set up Google/Facebook authentication. Note: if you are using Google Play signing, this app will be signed with a different key after publishing to the store, and you'll need to use the hashes displayed in the Google Play console.\"\n      )\n      .helpGroup('credentials'),\n    () => import('./fetchAndroidHashesAsync')\n  );\n\n  applyAsyncActionProjectDir(\n    program\n      .command('fetch:android:upload-cert [path]')\n      .description(\"Download the project's Android keystore\")\n      .longDescription(\n        \"Fetch this project's upload certificate needed after opting in to app signing by Google Play or after resetting a previous upload certificate\"\n      )\n      .helpGroup('credentials'),\n    () => import('./fetchAndroidUploadCertAsync')\n  );\n}\n"],"mappings":";;;;;;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAuE;AAAA;AAExD,kBAAUA,OAAgB,EAAE;EACzC,IAAAC,8CAA0B,EACxBD,OAAO,CACJE,OAAO,CAAC,wBAAwB,CAAC,CACjCC,WAAW,CAAE,+DAA8D,CAAC,CAC5EC,eAAe,CACb,sIAAqI,CACvI,CACAC,SAAS,CAAC,aAAa,CAAC,EAC3B,mEAAa,sBAAsB,GAAC,CACrC;EAED,IAAAJ,8CAA0B,EACxBD,OAAO,CACJE,OAAO,CAAC,+BAA+B,CAAC,CACxCC,WAAW,CAAC,yCAAyC,CAAC,CACtDC,eAAe,CACd,wHAAwH,CACzH,CACAC,SAAS,CAAC,aAAa,CAAC,EAC3B,mEAAa,6BAA6B,GAAC,CAC5C;EAED,IAAAJ,8CAA0B,EACxBD,OAAO,CACJE,OAAO,CAAC,6BAA6B,CAAC,CACtCC,WAAW,CAAC,kDAAkD,CAAC,CAC/DC,eAAe,CACd,0RAA0R,CAC3R,CACAC,SAAS,CAAC,aAAa,CAAC,EAC3B,mEAAa,2BAA2B,GAAC,CAC1C;EAED,IAAAJ,8CAA0B,EACxBD,OAAO,CACJE,OAAO,CAAC,kCAAkC,CAAC,CAC3CC,WAAW,CAAC,yCAAyC,CAAC,CACtDC,eAAe,CACd,+IAA+I,CAChJ,CACAC,SAAS,CAAC,aAAa,CAAC,EAC3B,mEAAa,+BAA+B,GAAC,CAC9C;AACH"}