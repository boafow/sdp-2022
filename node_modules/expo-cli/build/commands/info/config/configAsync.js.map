{"version":3,"file":"configAsync.js","names":["actionAsync","projectRoot","options","json","warnAboutLocalCLI","localCmd","config","type","profileMethod","getPrebuildConfigAsync","platforms","compileModsAsync","exp","introspect","assertMissingModProviders","modRequest","modResults","getConfig","skipSDKVersionRequirement","isPublicConfig","CommandError","configOutput","full","Log","log","logConfig","nested","JSON","stringify"],"sources":["../../../../src/commands/info/config/configAsync.ts"],"sourcesContent":["import { getConfig, ProjectConfig } from '@expo/config';\nimport { compileModsAsync } from '@expo/config-plugins/build/plugins/mod-compiler';\nimport { getPrebuildConfigAsync } from '@expo/prebuild-config';\n\nimport CommandError from '../../../CommandError';\nimport Log from '../../../log';\nimport { warnAboutLocalCLI } from '../../../utils/migration';\nimport { logConfig } from '../../eject/configureProjectAsync';\nimport { profileMethod } from '../../utils/profileMethod';\n\ntype Options = {\n  type?: string;\n  full: boolean;\n  json?: boolean;\n};\n\nexport async function actionAsync(projectRoot: string, options: Options) {\n  // Don't break the existing functionality.\n  if (!options.json) {\n    warnAboutLocalCLI(projectRoot, { localCmd: 'config' });\n  }\n  let config: ProjectConfig;\n\n  if (options.type === 'prebuild') {\n    config = await profileMethod(getPrebuildConfigAsync)(projectRoot, {\n      platforms: ['ios', 'android'],\n    });\n  } else if (options.type === 'introspect') {\n    config = await profileMethod(getPrebuildConfigAsync)(projectRoot, {\n      platforms: ['ios', 'android'],\n    });\n\n    await compileModsAsync(config.exp, {\n      projectRoot,\n      introspect: true,\n      platforms: ['ios', 'android'],\n      assertMissingModProviders: false,\n    });\n    // @ts-ignore\n    delete config.modRequest;\n    // @ts-ignore\n    delete config.modResults;\n  } else if (options.type === 'public') {\n    config = profileMethod(getConfig)(projectRoot, {\n      skipSDKVersionRequirement: true,\n      isPublicConfig: true,\n    });\n  } else if (options.type) {\n    throw new CommandError(\n      `Invalid option: --type ${options.type}. Valid options are: public, prebuild`\n    );\n  } else {\n    config = profileMethod(getConfig)(projectRoot, {\n      skipSDKVersionRequirement: true,\n    });\n  }\n\n  const configOutput = options.full ? config : config.exp;\n\n  if (!options.json) {\n    Log.log();\n    logConfig(configOutput);\n    Log.log();\n  } else {\n    Log.nested(JSON.stringify(configOutput));\n  }\n}\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAA0D;AAQnD,eAAeA,WAAW,CAACC,WAAmB,EAAEC,OAAgB,EAAE;EACvE;EACA,IAAI,CAACA,OAAO,CAACC,IAAI,EAAE;IACjB,IAAAC,8BAAiB,EAACH,WAAW,EAAE;MAAEI,QAAQ,EAAE;IAAS,CAAC,CAAC;EACxD;EACA,IAAIC,MAAqB;EAEzB,IAAIJ,OAAO,CAACK,IAAI,KAAK,UAAU,EAAE;IAC/BD,MAAM,GAAG,MAAM,IAAAE,8BAAa,EAACC,wCAAsB,CAAC,CAACR,WAAW,EAAE;MAChES,SAAS,EAAE,CAAC,KAAK,EAAE,SAAS;IAC9B,CAAC,CAAC;EACJ,CAAC,MAAM,IAAIR,OAAO,CAACK,IAAI,KAAK,YAAY,EAAE;IACxCD,MAAM,GAAG,MAAM,IAAAE,8BAAa,EAACC,wCAAsB,CAAC,CAACR,WAAW,EAAE;MAChES,SAAS,EAAE,CAAC,KAAK,EAAE,SAAS;IAC9B,CAAC,CAAC;IAEF,MAAM,IAAAC,+BAAgB,EAACL,MAAM,CAACM,GAAG,EAAE;MACjCX,WAAW;MACXY,UAAU,EAAE,IAAI;MAChBH,SAAS,EAAE,CAAC,KAAK,EAAE,SAAS,CAAC;MAC7BI,yBAAyB,EAAE;IAC7B,CAAC,CAAC;IACF;IACA,OAAOR,MAAM,CAACS,UAAU;IACxB;IACA,OAAOT,MAAM,CAACU,UAAU;EAC1B,CAAC,MAAM,IAAId,OAAO,CAACK,IAAI,KAAK,QAAQ,EAAE;IACpCD,MAAM,GAAG,IAAAE,8BAAa,EAACS,mBAAS,CAAC,CAAChB,WAAW,EAAE;MAC7CiB,yBAAyB,EAAE,IAAI;MAC/BC,cAAc,EAAE;IAClB,CAAC,CAAC;EACJ,CAAC,MAAM,IAAIjB,OAAO,CAACK,IAAI,EAAE;IACvB,MAAM,KAAIa,uBAAY,EACnB,0BAAyBlB,OAAO,CAACK,IAAK,uCAAsC,CAC9E;EACH,CAAC,MAAM;IACLD,MAAM,GAAG,IAAAE,8BAAa,EAACS,mBAAS,CAAC,CAAChB,WAAW,EAAE;MAC7CiB,yBAAyB,EAAE;IAC7B,CAAC,CAAC;EACJ;EAEA,MAAMG,YAAY,GAAGnB,OAAO,CAACoB,IAAI,GAAGhB,MAAM,GAAGA,MAAM,CAACM,GAAG;EAEvD,IAAI,CAACV,OAAO,CAACC,IAAI,EAAE;IACjBoB,cAAG,CAACC,GAAG,EAAE;IACT,IAAAC,kCAAS,EAACJ,YAAY,CAAC;IACvBE,cAAG,CAACC,GAAG,EAAE;EACX,CAAC,MAAM;IACLD,cAAG,CAACG,MAAM,CAACC,IAAI,CAACC,SAAS,CAACP,YAAY,CAAC,CAAC;EAC1C;AACF"}