{"version":3,"file":"doctorAsync.js","names":["validateSupportPackagesAsync","sdkVersion","versionsForSdk","getRemoteVersionsForSdk","supportPackagesToValidate","allPackagesValid","pkg","version","isVersionValid","warnAboutDeepDependenciesAsync","name","validateIllegalPackagesAsync","illegalPackages","allPackagesLegal","isPackageAbsent","actionAsync","projectRoot","options","warnUponCmdExe","exp","profileMethod","getConfig","foundSomeIssues","Versions","gteSdkVersion","validateDependenciesVersionsAsync","fixDependencies","Doctor","validateExpoServersAsync","validateWithNetworkAsync","NO_ISSUES","process","exitCode","Log","log","chalk","green"],"sources":["../../../../src/commands/info/doctor/doctorAsync.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport { Doctor, Versions } from 'xdl';\n\nimport Log from '../../../log';\nimport { getRemoteVersionsForSdk } from '../../../utils/getRemoteVersionsForSdk';\nimport { profileMethod } from '../../utils/profileMethod';\nimport { validateDependenciesVersionsAsync } from '../../utils/validateDependenciesVersions';\nimport { warnAboutDeepDependenciesAsync } from './depedencies/explain';\nimport { warnUponCmdExe } from './windows';\n\ntype Options = {\n  fixDependencies?: boolean;\n};\n\nasync function validateSupportPackagesAsync(sdkVersion: string): Promise<boolean> {\n  const versionsForSdk = await getRemoteVersionsForSdk(sdkVersion);\n\n  const supportPackagesToValidate = [\n    'expo-modules-autolinking',\n    '@expo/config-plugins',\n    '@expo/prebuild-config',\n  ];\n\n  let allPackagesValid = true;\n  for (const pkg of supportPackagesToValidate) {\n    const version = versionsForSdk[pkg];\n    if (version) {\n      const isVersionValid = await warnAboutDeepDependenciesAsync({ name: pkg, version });\n      if (!isVersionValid) {\n        allPackagesValid = false;\n      }\n    }\n  }\n  return allPackagesValid;\n}\n\n// Ensures that a set of packages\nasync function validateIllegalPackagesAsync(): Promise<boolean> {\n  const illegalPackages = [\n    '@unimodules/core',\n    '@unimodules/react-native-adapter',\n    'react-native-unimodules',\n  ];\n\n  let allPackagesLegal = true;\n\n  for (const pkg of illegalPackages) {\n    const isPackageAbsent = await warnAboutDeepDependenciesAsync({ name: pkg });\n    if (!isPackageAbsent) {\n      allPackagesLegal = false;\n    }\n  }\n\n  return allPackagesLegal;\n}\n\nexport async function actionAsync(projectRoot: string, options: Options) {\n  await warnUponCmdExe();\n\n  const { exp, pkg } = profileMethod(getConfig)(projectRoot);\n  let foundSomeIssues = false;\n\n  // Only use the new validation on SDK +45.\n  if (Versions.gteSdkVersion(exp, '45.0.0')) {\n    if (!(await validateSupportPackagesAsync(exp.sdkVersion!))) {\n      foundSomeIssues = true;\n    }\n  }\n\n  if (Versions.gteSdkVersion(exp, '44.0.0')) {\n    if (!(await validateIllegalPackagesAsync())) {\n      foundSomeIssues = true;\n    }\n  }\n\n  if (\n    !(await profileMethod(validateDependenciesVersionsAsync)(\n      projectRoot,\n      exp,\n      pkg,\n      options.fixDependencies\n    ))\n  ) {\n    foundSomeIssues = true;\n  }\n\n  // note: this currently only warns when something isn't right, it doesn't fail\n  await Doctor.validateExpoServersAsync(projectRoot);\n\n  if ((await Doctor.validateWithNetworkAsync(projectRoot)) !== Doctor.NO_ISSUES) {\n    foundSomeIssues = true;\n  }\n\n  if (foundSomeIssues) {\n    process.exitCode = 1;\n  } else {\n    Log.log(chalk.green(`ðŸŽ‰ Didn't find any issues with the project!`));\n  }\n}\n"],"mappings":"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"}