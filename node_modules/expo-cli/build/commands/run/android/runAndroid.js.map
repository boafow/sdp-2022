{"version":3,"file":"runAndroid.js","names":["resolveAndroidProjectPathAsync","projectRoot","AndroidConfig","Paths","getProjectPathOrThrowAsync","prebuildAsync","install","platforms","attemptToGetApplicationIdFromGradleAsync","applicationIdFromGradle","Package","getApplicationIdAsync","Log","debug","resolveOptionsAsync","options","variant","CommandError","device","resolveDeviceAsync","filePath","getAndroidManifestAsync","androidManifest","Manifest","readAndroidManifestAsync","activity","getRunnableActivity","mainActivity","$","packageName","manifest","package","port","bundler","resolvePortAsync","defaultPort","reuseExistingPort","appName","apkDirectory","path","join","buildType","flavors","split","map","v","toLowerCase","buildDirectory","launchActivity","apkVariantDirectory","actionAsync","warnAboutLocalCLI","localCmd","profileMethod","promptToClearMalformedNativeProjectsAsync","exp","getConfig","skipSDKVersionRequirement","track","androidProjectPath","props","log","assembleAsync","setGlobalDevClientSettingsAsync","startBundlerAsync","metroPort","apkFile","getInstallApkNameAsync","binaryPath","Android","installOnDeviceAsync","installAsync","schemes","getSchemesForAndroidAsync","result","openProjectAsync","devClient","scheme","applicationId","success","error","message","nested","chalk","dim","UnifiedAnalytics","logEvent","status","platform","getDevClientProperties","StatusEventEmitter","once","installCustomExitHook","flush","availableCPUs","getDeviceABIsAsync","push","DeviceABI","universal","availableCPU","apkName","getApkFileName","fs","existsSync","cpuArch","reduce","rest","flav"],"sources":["../../../../src/commands/run/android/runAndroid.ts"],"sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport { AndroidConfig } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport { Android, UnifiedAnalytics } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport StatusEventEmitter from '../../../analytics/StatusEventEmitter';\nimport getDevClientProperties from '../../../analytics/getDevClientProperties';\nimport Log from '../../../log';\nimport { warnAboutLocalCLI } from '../../../utils/migration';\nimport { promptToClearMalformedNativeProjectsAsync } from '../../eject/clearNativeFolder';\nimport { prebuildAsync } from '../../eject/prebuildAppAsync';\nimport { installCustomExitHook } from '../../start/installExitHooks';\nimport { profileMethod } from '../../utils/profileMethod';\nimport { setGlobalDevClientSettingsAsync, startBundlerAsync } from '../ios/startBundlerAsync';\nimport { resolvePortAsync } from '../utils/resolvePortAsync';\nimport { getSchemesForAndroidAsync } from '../utils/schemes';\nimport { resolveDeviceAsync } from './resolveDeviceAsync';\nimport { assembleAsync, installAsync } from './spawnGradleAsync';\n\ntype Options = {\n  variant: string;\n  device?: boolean | string;\n  port?: number;\n  bundler?: boolean;\n};\n\nexport type AndroidRunOptions = Omit<Options, 'device'> & {\n  apkVariantDirectory: string;\n  packageName: string;\n  mainActivity: string;\n  launchActivity: string;\n  device: Android.Device;\n  appName: string;\n  buildType: string;\n  flavors?: string[];\n};\n\nasync function resolveAndroidProjectPathAsync(projectRoot: string): Promise<string> {\n  try {\n    return await AndroidConfig.Paths.getProjectPathOrThrowAsync(projectRoot);\n  } catch {\n    // If the project doesn't have native code, prebuild it...\n    await prebuildAsync(projectRoot, {\n      install: true,\n      platforms: ['android'],\n    });\n    return await AndroidConfig.Paths.getProjectPathOrThrowAsync(projectRoot);\n  }\n}\n\nasync function attemptToGetApplicationIdFromGradleAsync(projectRoot: string) {\n  try {\n    const applicationIdFromGradle = await AndroidConfig.Package.getApplicationIdAsync(projectRoot);\n    if (applicationIdFromGradle) {\n      Log.debug('Found Application ID in Gradle: ' + applicationIdFromGradle);\n      return applicationIdFromGradle;\n    }\n  } catch {}\n  return null;\n}\n\nasync function resolveOptionsAsync(\n  projectRoot: string,\n  options: Options\n): Promise<AndroidRunOptions> {\n  if (typeof options.variant !== 'string') {\n    throw new CommandError('--variant must be a string');\n  }\n  const device = await resolveDeviceAsync(options.device);\n  if (!device) {\n    throw new CommandError('Cannot resolve an Android device');\n  }\n\n  const filePath = await AndroidConfig.Paths.getAndroidManifestAsync(projectRoot);\n  const androidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(filePath);\n\n  // Assert MainActivity defined.\n  const activity = await AndroidConfig.Manifest.getRunnableActivity(androidManifest);\n  if (!activity) {\n    throw new CommandError(`${filePath} is missing a runnable activity element.`);\n  }\n  // Often this is \".MainActivity\"\n  const mainActivity = activity.$['android:name'];\n  const packageName =\n    // Try to get the application identifier from the gradle before checking the package name in the manifest.\n    (await attemptToGetApplicationIdFromGradleAsync(projectRoot)) ??\n    androidManifest.manifest.$.package;\n\n  if (!packageName) {\n    throw new CommandError(`Could not find package name in AndroidManifest.xml at \"${filePath}\"`);\n  }\n\n  let port = options.bundler\n    ? await resolvePortAsync(projectRoot, { defaultPort: options.port, reuseExistingPort: true })\n    : null;\n  options.bundler = !!port;\n  if (!port) {\n    // Skip bundling if the port is null\n    // any random number\n    port = 8081;\n  }\n\n  // TODO: why would this be different? Can we get the different name?\n  const appName = 'app';\n\n  const apkDirectory = path.join(projectRoot, 'android', appName, 'build', 'outputs', 'apk');\n\n  // buildDeveloperTrust -> build, developer, trust (where developer, and trust are flavors).\n  // This won't work for non-standard flavor names like \"myFlavor\" would be treated as \"my\", \"flavor\".\n  const [buildType, ...flavors] = options.variant.split(/(?=[A-Z])/).map(v => v.toLowerCase());\n  const buildDirectory = path.join(apkDirectory, ...flavors, buildType);\n\n  return {\n    ...options,\n    port,\n    device,\n    mainActivity,\n    launchActivity: `${packageName}/${mainActivity}`,\n    packageName,\n    apkVariantDirectory: buildDirectory,\n    appName,\n    buildType,\n    flavors,\n  };\n}\n\nexport async function actionAsync(projectRoot: string, options: Options) {\n  warnAboutLocalCLI(projectRoot, { localCmd: 'run:android' });\n  // If the user has an empty android folder then the project won't build, this can happen when they delete the prebuild files in git.\n  // Check to ensure most of the core files are in place, and prompt to remove the folder if they aren't.\n  await profileMethod(promptToClearMalformedNativeProjectsAsync)(projectRoot, ['android']);\n\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  track(projectRoot, exp);\n\n  const androidProjectPath = await resolveAndroidProjectPathAsync(projectRoot);\n\n  const props = await resolveOptionsAsync(projectRoot, options);\n\n  Log.log('\\u203A Building app...');\n\n  await assembleAsync({ ...props, androidProjectPath });\n\n  await setGlobalDevClientSettingsAsync(projectRoot);\n  if (props.bundler) {\n    await startBundlerAsync(projectRoot, {\n      metroPort: props.port,\n      platforms: exp.platforms,\n    });\n  }\n\n  const apkFile = await getInstallApkNameAsync(props.device, props);\n  Log.debug(`\\u203A Installing: ${apkFile}`);\n\n  if (apkFile) {\n    const binaryPath = path.join(props.apkVariantDirectory, apkFile);\n    await Android.installOnDeviceAsync(props.device, { binaryPath });\n  } else {\n    Log.log('\\u203A Failed to locate binary file, installing with Gradle...');\n    await installAsync({ ...props, androidProjectPath });\n  }\n\n  const schemes = await getSchemesForAndroidAsync(projectRoot);\n\n  const result = await Android.openProjectAsync({\n    projectRoot,\n    device: props.device,\n    devClient: true,\n    scheme: schemes[0],\n    applicationId: props.packageName,\n    launchActivity: props.launchActivity,\n  });\n\n  if (!result.success) {\n    throw new CommandError(typeof result.error === 'string' ? result.error : result.error.message);\n  }\n\n  if (props.bundler) {\n    // TODO: unify logs\n    Log.nested(`\\nLogs for your project will appear below. ${chalk.dim(`Press Ctrl+C to exit.`)}`);\n  }\n}\n\nfunction track(projectRoot: string, exp: ExpoConfig) {\n  UnifiedAnalytics.logEvent('dev client run command', {\n    status: 'started',\n    platform: 'android',\n    ...getDevClientProperties(projectRoot, exp),\n  });\n  StatusEventEmitter.once('bundleBuildFinish', () => {\n    // Send the 'bundle ready' event once the JS has been built.\n    UnifiedAnalytics.logEvent('dev client run command', {\n      status: 'bundle ready',\n      platform: 'android',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  });\n  StatusEventEmitter.once('deviceLogReceive', () => {\n    // Send the 'ready' event once the app is running in a device.\n    UnifiedAnalytics.logEvent('dev client run command', {\n      status: 'ready',\n      platform: 'android',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  });\n  installCustomExitHook(() => {\n    UnifiedAnalytics.logEvent('dev client run command', {\n      status: 'finished',\n      platform: 'android',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n    UnifiedAnalytics.flush();\n  });\n}\n\nasync function getInstallApkNameAsync(\n  device: Android.Device,\n  {\n    appName,\n    buildType,\n    flavors,\n    apkVariantDirectory,\n  }: Pick<AndroidRunOptions, 'appName' | 'flavors' | 'buildType' | 'apkVariantDirectory'>\n) {\n  const availableCPUs = await Android.getDeviceABIsAsync(device);\n  availableCPUs.push(Android.DeviceABI.universal);\n\n  Log.debug('Supported ABIs: ' + availableCPUs.join(', '));\n  Log.debug('Searching for APK: ' + apkVariantDirectory);\n\n  // Check for cpu specific builds first\n  for (const availableCPU of availableCPUs) {\n    const apkName = getApkFileName(appName, buildType, flavors, availableCPU);\n    if (fs.existsSync(path.join(apkVariantDirectory, apkName))) {\n      return apkName;\n    }\n  }\n\n  // Otherwise use the default apk named after the variant: app-debug.apk\n  const apkName = getApkFileName(appName, buildType, flavors);\n  if (fs.existsSync(path.join(apkVariantDirectory, apkName))) {\n    return apkName;\n  }\n\n  return null;\n}\n\nfunction getApkFileName(\n  appName: string,\n  buildType: string,\n  flavors?: string[] | null,\n  cpuArch?: string | null\n) {\n  let apkName = `${appName}-`;\n  if (flavors) {\n    apkName += flavors.reduce((rest, flav) => `${rest}${flav}-`, '');\n  }\n  if (cpuArch) {\n    apkName += `${cpuArch}-`;\n  }\n  apkName += `${buildType}.apk`;\n\n  return apkName;\n}\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAiE;AAoBjE,eAAeA,8BAA8B,CAACC,WAAmB,EAAmB;EAClF,IAAI;IACF,OAAO,MAAMC,8BAAa,CAACC,KAAK,CAACC,0BAA0B,CAACH,WAAW,CAAC;EAC1E,CAAC,CAAC,MAAM;IACN;IACA,MAAM,IAAAI,iCAAa,EAACJ,WAAW,EAAE;MAC/BK,OAAO,EAAE,IAAI;MACbC,SAAS,EAAE,CAAC,SAAS;IACvB,CAAC,CAAC;IACF,OAAO,MAAML,8BAAa,CAACC,KAAK,CAACC,0BAA0B,CAACH,WAAW,CAAC;EAC1E;AACF;AAEA,eAAeO,wCAAwC,CAACP,WAAmB,EAAE;EAC3E,IAAI;IACF,MAAMQ,uBAAuB,GAAG,MAAMP,8BAAa,CAACQ,OAAO,CAACC,qBAAqB,CAACV,WAAW,CAAC;IAC9F,IAAIQ,uBAAuB,EAAE;MAC3BG,cAAG,CAACC,KAAK,CAAC,kCAAkC,GAAGJ,uBAAuB,CAAC;MACvE,OAAOA,uBAAuB;IAChC;EACF,CAAC,CAAC,MAAM,CAAC;EACT,OAAO,IAAI;AACb;AAEA,eAAeK,mBAAmB,CAChCb,WAAmB,EACnBc,OAAgB,EACY;EAAA;EAC5B,IAAI,OAAOA,OAAO,CAACC,OAAO,KAAK,QAAQ,EAAE;IACvC,MAAM,KAAIC,uBAAY,EAAC,4BAA4B,CAAC;EACtD;EACA,MAAMC,MAAM,GAAG,MAAM,IAAAC,wCAAkB,EAACJ,OAAO,CAACG,MAAM,CAAC;EACvD,IAAI,CAACA,MAAM,EAAE;IACX,MAAM,KAAID,uBAAY,EAAC,kCAAkC,CAAC;EAC5D;EAEA,MAAMG,QAAQ,GAAG,MAAMlB,8BAAa,CAACC,KAAK,CAACkB,uBAAuB,CAACpB,WAAW,CAAC;EAC/E,MAAMqB,eAAe,GAAG,MAAMpB,8BAAa,CAACqB,QAAQ,CAACC,wBAAwB,CAACJ,QAAQ,CAAC;;EAEvF;EACA,MAAMK,QAAQ,GAAG,MAAMvB,8BAAa,CAACqB,QAAQ,CAACG,mBAAmB,CAACJ,eAAe,CAAC;EAClF,IAAI,CAACG,QAAQ,EAAE;IACb,MAAM,KAAIR,uBAAY,EAAE,GAAEG,QAAS,0CAAyC,CAAC;EAC/E;EACA;EACA,MAAMO,YAAY,GAAGF,QAAQ,CAACG,CAAC,CAAC,cAAc,CAAC;EAC/C,MAAMC,WAAW,GACf;EAAA,yBACC,MAAMrB,wCAAwC,CAACP,WAAW,CAAC,yEAC5DqB,eAAe,CAACQ,QAAQ,CAACF,CAAC,CAACG,OAAO;EAEpC,IAAI,CAACF,WAAW,EAAE;IAChB,MAAM,KAAIZ,uBAAY,EAAE,0DAAyDG,QAAS,GAAE,CAAC;EAC/F;EAEA,IAAIY,IAAI,GAAGjB,OAAO,CAACkB,OAAO,GACtB,MAAM,IAAAC,oCAAgB,EAACjC,WAAW,EAAE;IAAEkC,WAAW,EAAEpB,OAAO,CAACiB,IAAI;IAAEI,iBAAiB,EAAE;EAAK,CAAC,CAAC,GAC3F,IAAI;EACRrB,OAAO,CAACkB,OAAO,GAAG,CAAC,CAACD,IAAI;EACxB,IAAI,CAACA,IAAI,EAAE;IACT;IACA;IACAA,IAAI,GAAG,IAAI;EACb;;EAEA;EACA,MAAMK,OAAO,GAAG,KAAK;EAErB,MAAMC,YAAY,GAAGC,eAAI,CAACC,IAAI,CAACvC,WAAW,EAAE,SAAS,EAAEoC,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,CAAC;;EAE1F;EACA;EACA,MAAM,CAACI,SAAS,EAAE,GAAGC,OAAO,CAAC,GAAG3B,OAAO,CAACC,OAAO,CAAC2B,KAAK,CAAC,WAAW,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,WAAW,EAAE,CAAC;EAC5F,MAAMC,cAAc,GAAGR,eAAI,CAACC,IAAI,CAACF,YAAY,EAAE,GAAGI,OAAO,EAAED,SAAS,CAAC;EAErE,OAAO;IACL,GAAG1B,OAAO;IACViB,IAAI;IACJd,MAAM;IACNS,YAAY;IACZqB,cAAc,EAAG,GAAEnB,WAAY,IAAGF,YAAa,EAAC;IAChDE,WAAW;IACXoB,mBAAmB,EAAEF,cAAc;IACnCV,OAAO;IACPI,SAAS;IACTC;EACF,CAAC;AACH;AAEO,eAAeQ,WAAW,CAACjD,WAAmB,EAAEc,OAAgB,EAAE;EACvE,IAAAoC,8BAAiB,EAAClD,WAAW,EAAE;IAAEmD,QAAQ,EAAE;EAAc,CAAC,CAAC;EAC3D;EACA;EACA,MAAM,IAAAC,8BAAa,EAACC,8DAAyC,CAAC,CAACrD,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC;EAExF,MAAM;IAAEsD;EAAI,CAAC,GAAG,IAAAC,mBAAS,EAACvD,WAAW,EAAE;IAAEwD,yBAAyB,EAAE;EAAK,CAAC,CAAC;EAC3EC,KAAK,CAACzD,WAAW,EAAEsD,GAAG,CAAC;EAEvB,MAAMI,kBAAkB,GAAG,MAAM3D,8BAA8B,CAACC,WAAW,CAAC;EAE5E,MAAM2D,KAAK,GAAG,MAAM9C,mBAAmB,CAACb,WAAW,EAAEc,OAAO,CAAC;EAE7DH,cAAG,CAACiD,GAAG,CAAC,wBAAwB,CAAC;EAEjC,MAAM,IAAAC,iCAAa,EAAC;IAAE,GAAGF,KAAK;IAAED;EAAmB,CAAC,CAAC;EAErD,MAAM,IAAAI,oDAA+B,EAAC9D,WAAW,CAAC;EAClD,IAAI2D,KAAK,CAAC3B,OAAO,EAAE;IACjB,MAAM,IAAA+B,sCAAiB,EAAC/D,WAAW,EAAE;MACnCgE,SAAS,EAAEL,KAAK,CAAC5B,IAAI;MACrBzB,SAAS,EAAEgD,GAAG,CAAChD;IACjB,CAAC,CAAC;EACJ;EAEA,MAAM2D,OAAO,GAAG,MAAMC,sBAAsB,CAACP,KAAK,CAAC1C,MAAM,EAAE0C,KAAK,CAAC;EACjEhD,cAAG,CAACC,KAAK,CAAE,sBAAqBqD,OAAQ,EAAC,CAAC;EAE1C,IAAIA,OAAO,EAAE;IACX,MAAME,UAAU,GAAG7B,eAAI,CAACC,IAAI,CAACoB,KAAK,CAACX,mBAAmB,EAAEiB,OAAO,CAAC;IAChE,MAAMG,cAAO,CAACC,oBAAoB,CAACV,KAAK,CAAC1C,MAAM,EAAE;MAAEkD;IAAW,CAAC,CAAC;EAClE,CAAC,MAAM;IACLxD,cAAG,CAACiD,GAAG,CAAC,gEAAgE,CAAC;IACzE,MAAM,IAAAU,gCAAY,EAAC;MAAE,GAAGX,KAAK;MAAED;IAAmB,CAAC,CAAC;EACtD;EAEA,MAAMa,OAAO,GAAG,MAAM,IAAAC,oCAAyB,EAACxE,WAAW,CAAC;EAE5D,MAAMyE,MAAM,GAAG,MAAML,cAAO,CAACM,gBAAgB,CAAC;IAC5C1E,WAAW;IACXiB,MAAM,EAAE0C,KAAK,CAAC1C,MAAM;IACpB0D,SAAS,EAAE,IAAI;IACfC,MAAM,EAAEL,OAAO,CAAC,CAAC,CAAC;IAClBM,aAAa,EAAElB,KAAK,CAAC/B,WAAW;IAChCmB,cAAc,EAAEY,KAAK,CAACZ;EACxB,CAAC,CAAC;EAEF,IAAI,CAAC0B,MAAM,CAACK,OAAO,EAAE;IACnB,MAAM,KAAI9D,uBAAY,EAAC,OAAOyD,MAAM,CAACM,KAAK,KAAK,QAAQ,GAAGN,MAAM,CAACM,KAAK,GAAGN,MAAM,CAACM,KAAK,CAACC,OAAO,CAAC;EAChG;EAEA,IAAIrB,KAAK,CAAC3B,OAAO,EAAE;IACjB;IACArB,cAAG,CAACsE,MAAM,CAAE,8CAA6CC,gBAAK,CAACC,GAAG,CAAE,uBAAsB,CAAE,EAAC,CAAC;EAChG;AACF;AAEA,SAAS1B,KAAK,CAACzD,WAAmB,EAAEsD,GAAe,EAAE;EACnD8B,uBAAgB,CAACC,QAAQ,CAAC,wBAAwB,EAAE;IAClDC,MAAM,EAAE,SAAS;IACjBC,QAAQ,EAAE,SAAS;IACnB,GAAG,IAAAC,iCAAsB,EAACxF,WAAW,EAAEsD,GAAG;EAC5C,CAAC,CAAC;EACFmC,6BAAkB,CAACC,IAAI,CAAC,mBAAmB,EAAE,MAAM;IACjD;IACAN,uBAAgB,CAACC,QAAQ,CAAC,wBAAwB,EAAE;MAClDC,MAAM,EAAE,cAAc;MACtBC,QAAQ,EAAE,SAAS;MACnB,GAAG,IAAAC,iCAAsB,EAACxF,WAAW,EAAEsD,GAAG;IAC5C,CAAC,CAAC;EACJ,CAAC,CAAC;EACFmC,6BAAkB,CAACC,IAAI,CAAC,kBAAkB,EAAE,MAAM;IAChD;IACAN,uBAAgB,CAACC,QAAQ,CAAC,wBAAwB,EAAE;MAClDC,MAAM,EAAE,OAAO;MACfC,QAAQ,EAAE,SAAS;MACnB,GAAG,IAAAC,iCAAsB,EAACxF,WAAW,EAAEsD,GAAG;IAC5C,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,IAAAqC,yCAAqB,EAAC,MAAM;IAC1BP,uBAAgB,CAACC,QAAQ,CAAC,wBAAwB,EAAE;MAClDC,MAAM,EAAE,UAAU;MAClBC,QAAQ,EAAE,SAAS;MACnB,GAAG,IAAAC,iCAAsB,EAACxF,WAAW,EAAEsD,GAAG;IAC5C,CAAC,CAAC;IACF8B,uBAAgB,CAACQ,KAAK,EAAE;EAC1B,CAAC,CAAC;AACJ;AAEA,eAAe1B,sBAAsB,CACnCjD,MAAsB,EACtB;EACEmB,OAAO;EACPI,SAAS;EACTC,OAAO;EACPO;AACoF,CAAC,EACvF;EACA,MAAM6C,aAAa,GAAG,MAAMzB,cAAO,CAAC0B,kBAAkB,CAAC7E,MAAM,CAAC;EAC9D4E,aAAa,CAACE,IAAI,CAAC3B,cAAO,CAAC4B,SAAS,CAACC,SAAS,CAAC;EAE/CtF,cAAG,CAACC,KAAK,CAAC,kBAAkB,GAAGiF,aAAa,CAACtD,IAAI,CAAC,IAAI,CAAC,CAAC;EACxD5B,cAAG,CAACC,KAAK,CAAC,qBAAqB,GAAGoC,mBAAmB,CAAC;;EAEtD;EACA,KAAK,MAAMkD,YAAY,IAAIL,aAAa,EAAE;IACxC,MAAMM,OAAO,GAAGC,cAAc,CAAChE,OAAO,EAAEI,SAAS,EAAEC,OAAO,EAAEyD,YAAY,CAAC;IACzE,IAAIG,aAAE,CAACC,UAAU,CAAChE,eAAI,CAACC,IAAI,CAACS,mBAAmB,EAAEmD,OAAO,CAAC,CAAC,EAAE;MAC1D,OAAOA,OAAO;IAChB;EACF;;EAEA;EACA,MAAMA,OAAO,GAAGC,cAAc,CAAChE,OAAO,EAAEI,SAAS,EAAEC,OAAO,CAAC;EAC3D,IAAI4D,aAAE,CAACC,UAAU,CAAChE,eAAI,CAACC,IAAI,CAACS,mBAAmB,EAAEmD,OAAO,CAAC,CAAC,EAAE;IAC1D,OAAOA,OAAO;EAChB;EAEA,OAAO,IAAI;AACb;AAEA,SAASC,cAAc,CACrBhE,OAAe,EACfI,SAAiB,EACjBC,OAAyB,EACzB8D,OAAuB,EACvB;EACA,IAAIJ,OAAO,GAAI,GAAE/D,OAAQ,GAAE;EAC3B,IAAIK,OAAO,EAAE;IACX0D,OAAO,IAAI1D,OAAO,CAAC+D,MAAM,CAAC,CAACC,IAAI,EAAEC,IAAI,KAAM,GAAED,IAAK,GAAEC,IAAK,GAAE,EAAE,EAAE,CAAC;EAClE;EACA,IAAIH,OAAO,EAAE;IACXJ,OAAO,IAAK,GAAEI,OAAQ,GAAE;EAC1B;EACAJ,OAAO,IAAK,GAAE3D,SAAU,MAAK;EAE7B,OAAO2D,OAAO;AAChB"}