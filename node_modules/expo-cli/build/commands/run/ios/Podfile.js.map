{"version":3,"file":"Podfile.js","names":["getTempPrebuildFolder","projectRoot","path","join","hasNewDependenciesSinceLastBuild","packageChecksums","tempDir","tempPkgJsonPath","fs","pathExistsSync","dependencies","devDependencies","JsonFile","read","hasNewDependencies","hasNewDevDependencies","createPackageChecksums","pkg","hashForDependencyMap","hasPackageJsonDependencyListChangedAsync","getPackageJson","packages","ensureFile","writeAsync","doesProjectUseCocoaPods","existsSync","isLockfileCreated","podfileLockPath","isPodFolderCreated","podFolderPath","maybePromptToSyncPodsAsync","installCocoaPodsAsync","AbortCommandError","promptToInstallPodsAsync","missingPods","length","Log","log","map","pod","chalk","bold","error","removeSync"],"sources":["../../../../src/commands/run/ios/Podfile.ts"],"sourcesContent":["import { getPackageJson, PackageJSONConfig } from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport * as path from 'path';\n\nimport { AbortCommandError } from '../../../CommandError';\nimport Log from '../../../log';\nimport { hashForDependencyMap } from '../../eject/updatePackageJson';\nimport { installCocoaPodsAsync } from '../../utils/CreateApp';\n\nfunction getTempPrebuildFolder(projectRoot: string) {\n  return path.join(projectRoot, '.expo', 'prebuild');\n}\n\ntype PackageChecksums = {\n  dependencies: string;\n  devDependencies: string;\n};\n\nfunction hasNewDependenciesSinceLastBuild(projectRoot: string, packageChecksums: PackageChecksums) {\n  // TODO: Maybe comparing lock files would be better...\n  const tempDir = getTempPrebuildFolder(projectRoot);\n  const tempPkgJsonPath = path.join(tempDir, 'cached-packages.json');\n  if (!fs.pathExistsSync(tempPkgJsonPath)) {\n    return true;\n  }\n  const { dependencies, devDependencies } = JsonFile.read(tempPkgJsonPath);\n  // Only change the dependencies if the normalized hash changes, this helps to reduce meaningless changes.\n  const hasNewDependencies = packageChecksums.dependencies !== dependencies;\n  const hasNewDevDependencies = packageChecksums.devDependencies !== devDependencies;\n\n  return hasNewDependencies || hasNewDevDependencies;\n}\n\nfunction createPackageChecksums(pkg: PackageJSONConfig): PackageChecksums {\n  return {\n    dependencies: hashForDependencyMap(pkg.dependencies || {}),\n    devDependencies: hashForDependencyMap(pkg.devDependencies || {}),\n  };\n}\n\nexport async function hasPackageJsonDependencyListChangedAsync(projectRoot: string) {\n  const pkg = getPackageJson(projectRoot);\n\n  const packages = createPackageChecksums(pkg);\n  const hasNewDependencies = hasNewDependenciesSinceLastBuild(projectRoot, packages);\n\n  // Cache package.json\n  const tempDir = path.join(getTempPrebuildFolder(projectRoot), 'cached-packages.json');\n  await fs.ensureFile(tempDir);\n  await JsonFile.writeAsync(tempDir, packages);\n\n  return hasNewDependencies;\n}\n\nfunction doesProjectUseCocoaPods(projectRoot: string): boolean {\n  return fs.existsSync(path.join(projectRoot, 'ios', 'Podfile'));\n}\n\nfunction isLockfileCreated(projectRoot: string): boolean {\n  const podfileLockPath = path.join(projectRoot, 'ios', 'Podfile.lock');\n  return fs.existsSync(podfileLockPath);\n}\n\nfunction isPodFolderCreated(projectRoot: string): boolean {\n  const podFolderPath = path.join(projectRoot, 'ios', 'Pods');\n  return fs.existsSync(podFolderPath);\n}\n\n// TODO: Same process but with app.config changes + default plugins.\n// This will ensure the user is prompted for extra setup.\nexport default async function maybePromptToSyncPodsAsync(projectRoot: string) {\n  if (!doesProjectUseCocoaPods(projectRoot)) {\n    // Project does not use CocoaPods\n    return;\n  }\n  if (!isLockfileCreated(projectRoot) || !isPodFolderCreated(projectRoot)) {\n    if (!(await installCocoaPodsAsync(projectRoot))) {\n      throw new AbortCommandError();\n    }\n    return;\n  }\n\n  // Getting autolinked packages can be heavy, optimize around checking every time.\n  if (!(await hasPackageJsonDependencyListChangedAsync(projectRoot))) {\n    return;\n  }\n\n  await promptToInstallPodsAsync(projectRoot, []);\n}\n\nasync function promptToInstallPodsAsync(projectRoot: string, missingPods?: string[]) {\n  if (missingPods?.length) {\n    Log.log(\n      `Could not find the following native modules: ${missingPods\n        .map(pod => chalk.bold(pod))\n        .join(', ')}. Did you forget to run \"${chalk.bold('pod install')}\" ?`\n    );\n  }\n\n  try {\n    if (!(await installCocoaPodsAsync(projectRoot))) {\n      throw new AbortCommandError();\n    }\n  } catch (error: any) {\n    fs.removeSync(path.join(getTempPrebuildFolder(projectRoot), 'cached-packages.json'));\n    throw error;\n  }\n}\n"],"mappings":"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"}