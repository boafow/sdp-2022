{"version":3,"file":"XcodeBuild.js","names":["logPrettyItem","message","Log","log","chalk","whiteBright","getProjectBuildSettings","xcodeProject","configuration","sdkName","scheme","args","isWorkspace","name","debug","join","stdout","spawnAsync","stdio","JSON","parse","error","warn","match","dim","getAppBinaryPath","buildOutput","CONFIGURATION_BUILD_DIR","extractEnvVariableFromBuild","sort","a","b","length","UNLOCALIZED_RESOURCES_FOLDER_PATH","binaryPath","path","getEscapedPath","filePath","fs","existsSync","unescapedPath","split","Error","variableName","reg","RegExp","matched","matchAll","CommandError","map","value","filter","Boolean","getProcessOptions","packager","shouldSkipInitialBundling","terminal","port","SKIP_BUNDLING","undefined","env","process","RCT_TERMINAL","RCT_METRO_PORT","toString","RCT_NO_LAUNCH_PACKAGER","buildAsync","projectRoot","device","isSimulator","buildCache","udid","developmentTeamId","ensureDeviceIsCodeSignedForDeploymentAsync","push","bold","formatter","ExpoRunFormatter","create","isDebug","Promise","resolve","reject","buildProcess","spawn","errorOutput","currentBuffer","flushBuffer","data","lines","pipe","line","on","stringData","endsWith","os","EOL","stderr","Buffer","code","AbortCommandError","getBuildSummary","logFilePath","writeBuildLogs","wasErrorPresented","errors","errorTitle","underline","errorFilePath","getErrorLogFilePath","writeFileSync","folder","ensureDirSync"],"sources":["../../../../src/commands/run/ios/XcodeBuild.ts"],"sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport { ExpoRunFormatter } from '@expo/xcpretty';\nimport chalk from 'chalk';\nimport { spawn, SpawnOptionsWithoutStdio } from 'child_process';\nimport * as fs from 'fs-extra';\nimport os from 'os';\nimport * as path from 'path';\nimport { SimControl } from 'xdl';\n\nimport CommandError, { AbortCommandError } from '../../../CommandError';\nimport Log from '../../../log';\nimport { ensureDeviceIsCodeSignedForDeploymentAsync } from './developmentCodeSigning';\nimport { ProjectInfo, XcodeConfiguration } from './resolveOptionsAsync';\n\nexport type BuildProps = {\n  projectRoot: string;\n  isSimulator: boolean;\n  xcodeProject: ProjectInfo;\n  device: Pick<SimControl.XCTraceDevice, 'name' | 'udid'>;\n  configuration: XcodeConfiguration;\n  shouldSkipInitialBundling: boolean;\n  shouldStartBundler: boolean;\n  /** Should use derived data for builds. */\n  buildCache: boolean;\n  terminal?: string;\n  port: number;\n  scheme: string;\n};\n\ntype XcodeSDKName = 'iphoneos' | 'iphonesimulator';\n\nexport function logPrettyItem(message: string) {\n  Log.log(`${chalk.whiteBright`\\u203A`} ${message}`);\n}\n\nexport async function getProjectBuildSettings(\n  xcodeProject: ProjectInfo,\n  configuration: XcodeConfiguration,\n  sdkName: XcodeSDKName,\n  scheme: string\n) {\n  const args = [\n    xcodeProject.isWorkspace ? '-workspace' : '-project',\n    xcodeProject.name,\n    '-scheme',\n    scheme,\n    '-sdk',\n    sdkName,\n    // getPlatformName(buildOutput),\n    '-configuration',\n    configuration,\n    '-showBuildSettings',\n    '-json',\n  ];\n  Log.debug(`  xcodebuild ${args.join(' ')}`);\n  const { stdout } = await spawnAsync('xcodebuild', args, { stdio: 'pipe' });\n  try {\n    return JSON.parse(stdout);\n  } catch (error: any) {\n    // This can fail if the xcodebuild command throws a simulator error:\n    // 2021-01-24 14:22:43.802 xcodebuild[73087:14664906]  DVTAssertions: Warning in /Library/Caches/com.apple.xbs/Sources/DVTiOSFrameworks/DVTiOSFrameworks-17705/DTDeviceKitBase/DTDKRemoteDeviceData.m:371\n    Log.warn(error.message);\n    if (error.message.match(/in JSON at position/)) {\n      Log.log(chalk.dim(stdout));\n    }\n    return {};\n  }\n}\n\n/**\n *\n * @returns '/Users/evanbacon/Library/Developer/Xcode/DerivedData/myapp-gpgjqjodrxtervaufttwnsgimhrx/Build/Products/Debug-iphonesimulator/myapp.app'\n */\nexport function getAppBinaryPath(buildOutput: string) {\n  // Matches what's used in \"Bundle React Native code and images\" script.\n  // Requires that `-hideShellScriptEnvironment` is not included in the build command (extra logs).\n\n  // Like `\\=/Users/evanbacon/Library/Developer/Xcode/DerivedData/Exponent-anpuosnglkxokahjhfszejloqfvo/Build/Products/Debug-iphonesimulator`\n  const CONFIGURATION_BUILD_DIR = extractEnvVariableFromBuild(\n    buildOutput,\n    'CONFIGURATION_BUILD_DIR'\n  ).sort(\n    // Longer name means more suffixes, we want the shortest possible one to be first.\n    // Massive projects (like Expo Go) can sometimes print multiple different sets of environment variables.\n    // This can become an issue with some\n    (a, b) => a.length - b.length\n  );\n  // Like `Exponent.app`\n  const UNLOCALIZED_RESOURCES_FOLDER_PATH = extractEnvVariableFromBuild(\n    buildOutput,\n    'UNLOCALIZED_RESOURCES_FOLDER_PATH'\n  );\n\n  const binaryPath = path.join(\n    // Use the shortest defined env variable (usually there's just one).\n    CONFIGURATION_BUILD_DIR[0],\n    // Use the last defined env variable.\n    UNLOCALIZED_RESOURCES_FOLDER_PATH[UNLOCALIZED_RESOURCES_FOLDER_PATH.length - 1]\n  );\n\n  // If the app has a space in the name it'll fail because it isn't escaped properly by Xcode.\n  return getEscapedPath(binaryPath);\n}\n\nexport function getEscapedPath(filePath: string): string {\n  if (fs.existsSync(filePath)) {\n    return filePath;\n  }\n  const unescapedPath = filePath.split(/\\\\ /).join(' ');\n  if (fs.existsSync(unescapedPath)) {\n    return unescapedPath;\n  }\n  throw new Error(\n    `Unexpected: Generated app at path \"${filePath}\" cannot be read, the app cannot be installed. Please report this and build onto a simulator.`\n  );\n}\n\nfunction extractEnvVariableFromBuild(buildOutput: string, variableName: string) {\n  // Xcode can sometimes escape `=` with a backslash or put the value in quotes\n  const reg = new RegExp(`export ${variableName}\\\\\\\\?=(.*)$`, 'mg');\n  const matched = [...buildOutput.matchAll(reg)];\n\n  if (!matched || !matched.length) {\n    throw new CommandError(\n      `Malformed xcodebuild results: \"${variableName}\" variable was not generated in build output. Please report this issue and run your project with Xcode instead.`\n    );\n  }\n  return matched.map(value => value[1]).filter(Boolean) as string[];\n}\n\nfunction getProcessOptions({\n  packager,\n  shouldSkipInitialBundling,\n  terminal,\n  port,\n}: {\n  packager: boolean;\n  shouldSkipInitialBundling?: boolean;\n  terminal: string | undefined;\n  port: number;\n}): SpawnOptionsWithoutStdio {\n  const SKIP_BUNDLING = shouldSkipInitialBundling ? '1' : undefined;\n  if (packager) {\n    return {\n      env: {\n        ...process.env,\n        RCT_TERMINAL: terminal,\n        SKIP_BUNDLING,\n        RCT_METRO_PORT: port.toString(),\n      },\n    };\n  }\n\n  return {\n    env: {\n      ...process.env,\n      RCT_TERMINAL: terminal,\n      SKIP_BUNDLING,\n      // Always skip launching the packager from a build script.\n      // The script is used for people building their project directly from Xcode.\n      // This essentially means \"â€º Running script 'Start Packager'\" does nothing.\n      RCT_NO_LAUNCH_PACKAGER: 'true',\n      // FORCE_BUNDLING: '0'\n    },\n  };\n}\n\nexport async function buildAsync({\n  projectRoot,\n  xcodeProject,\n  device,\n  configuration,\n  isSimulator,\n  scheme,\n  shouldSkipInitialBundling,\n  terminal,\n  port,\n  buildCache,\n}: BuildProps): Promise<string> {\n  const args = [\n    xcodeProject.isWorkspace ? '-workspace' : '-project',\n    xcodeProject.name,\n    '-configuration',\n    configuration,\n    '-scheme',\n    scheme,\n    '-destination',\n    `id=${device.udid}`,\n  ];\n\n  if (!isSimulator) {\n    const developmentTeamId = await ensureDeviceIsCodeSignedForDeploymentAsync(projectRoot);\n    if (developmentTeamId) {\n      args.push(\n        `DEVELOPMENT_TEAM=${developmentTeamId}`,\n        '-allowProvisioningUpdates',\n        '-allowProvisioningDeviceRegistration'\n      );\n    }\n  }\n\n  // Add last\n  if (buildCache === false) {\n    args.push(\n      // Will first clean the derived data folder.\n      'clean',\n      // Then build step must be added otherwise the process will simply clean and exit.\n      'build'\n    );\n  }\n\n  Log.debug(`  xcodebuild ${args.join(' ')}`);\n\n  logPrettyItem(chalk.bold`Planning build`);\n\n  const formatter = ExpoRunFormatter.create(projectRoot, {\n    xcodeProject,\n    isDebug: Log.isDebug,\n  });\n\n  return new Promise(async (resolve, reject) => {\n    const buildProcess = spawn(\n      'xcodebuild',\n      args,\n      getProcessOptions({ packager: false, shouldSkipInitialBundling, terminal, port })\n    );\n    let buildOutput = '';\n    let errorOutput = '';\n\n    let currentBuffer = '';\n\n    // Data can be sent in chunks that would have no relevance to our regex\n    // this can cause massive slowdowns, so we need to ensure the data is complete before attempting to parse it.\n    function flushBuffer() {\n      if (!currentBuffer) {\n        return;\n      }\n\n      const data = currentBuffer;\n      // Reset buffer.\n      currentBuffer = '';\n      // Process data.\n      const lines = formatter.pipe(data);\n      for (const line of lines) {\n        // Log parsed results.\n        Log.log(line);\n      }\n    }\n\n    buildProcess.stdout.on('data', (data: Buffer) => {\n      const stringData = data.toString();\n      buildOutput += stringData;\n      currentBuffer += stringData;\n      // Only flush the data if we have a full line.\n      if (currentBuffer.endsWith(os.EOL)) {\n        flushBuffer();\n      }\n    });\n\n    buildProcess.stderr.on('data', (data: Buffer) => {\n      const stringData = data instanceof Buffer ? data.toString() : data;\n      errorOutput += stringData;\n    });\n\n    buildProcess.on('close', (code: number) => {\n      // Flush log data at the end just in case we missed something.\n      flushBuffer();\n      Log.debug(`Exited with code: ${code}`);\n\n      if (\n        // User cancelled with ctrl-c\n        code === null ||\n        // Build interrupted\n        code === 75\n      ) {\n        reject(new AbortCommandError());\n        return;\n      }\n\n      Log.log(formatter.getBuildSummary());\n      const logFilePath = writeBuildLogs(projectRoot, buildOutput, errorOutput);\n\n      if (code !== 0) {\n        // Determine if the logger found any errors;\n        const wasErrorPresented = !!formatter.errors.length;\n\n        const errorTitle = `Failed to build iOS project. \"xcodebuild\" exited with error code ${code}.`;\n\n        if (wasErrorPresented) {\n          // This has a flaw, if the user is missing a file, and there is a script error, only the missing file error will be shown.\n          // They will only see the script error if they fix the missing file and rerun.\n          // The flaw can be fixed by catching script errors in the custom logger.\n          reject(new CommandError(errorTitle));\n          return;\n        }\n\n        // Show all the log info because often times the error is coming from a shell script,\n        // that invoked a node script, that started metro, which threw an error.\n        reject(\n          new CommandError(\n            `${errorTitle}\\nTo view more error logs, try building the app with Xcode directly, by opening ${xcodeProject.name}.\\n\\n` +\n              buildOutput +\n              '\\n\\n' +\n              errorOutput +\n              `Build logs written to ${chalk.underline(logFilePath)}`\n          )\n        );\n        return;\n      }\n      resolve(buildOutput);\n    });\n  });\n}\n\nfunction writeBuildLogs(projectRoot: string, buildOutput: string, errorOutput: string) {\n  const [logFilePath, errorFilePath] = getErrorLogFilePath(projectRoot);\n\n  fs.writeFileSync(logFilePath, buildOutput);\n  fs.writeFileSync(errorFilePath, errorOutput);\n  return logFilePath;\n}\n\nfunction getErrorLogFilePath(projectRoot: string): [string, string] {\n  const folder = path.join(projectRoot, '.expo');\n  fs.ensureDirSync(folder);\n  return [path.join(folder, 'xcodebuild.log'), path.join(folder, 'xcodebuild-error.log')];\n}\n"],"mappings":"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"}