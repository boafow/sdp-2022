{"version":3,"file":"installOnDeviceAsync.js","names":["getAppDeltaDirectory","bundleId","deltaFolder","path","join","os","tmpdir","fs","ensureDirSync","installOnDeviceAsync","props","AppleDevice","isEnabled","IOSDeploy","bundle","bundleIdentifier","appDeltaDirectory","udid","deviceName","indicator","runOnDevice","appPath","waitForApp","deltaPath","onProgress","status","isComplete","progress","ora","start","text","chalk","bold","succeed","err","fail","code","appName","basename","split","program","nonInteractive","Prompts","confirmAsync","message","initial","CommandError"],"sources":["../../../../src/commands/run/ios/installOnDeviceAsync.ts"],"sourcesContent":["import chalk from 'chalk';\nimport program from 'commander';\nimport fs from 'fs-extra';\nimport { Ora } from 'ora';\nimport os from 'os';\nimport path from 'path';\nimport { AppleDevice, Prompts } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport { ora } from '../../../utils/ora';\nimport * as IOSDeploy from './IOSDeploy';\n\n/**\n * Get the app_delta folder for faster subsequent rebuilds on devices.\n *\n * @param bundleId\n * @returns\n */\nexport function getAppDeltaDirectory(bundleId: string): string {\n  // TODO: Maybe use .expo folder instead for debugging\n  // TODO: Reuse existing folder from xcode?\n  const deltaFolder = path.join(os.tmpdir(), 'ios', 'app-delta', bundleId);\n  fs.ensureDirSync(deltaFolder);\n  return deltaFolder;\n}\n\n// To debug: `export DEBUG=expo:xdl:*`\nexport async function installOnDeviceAsync(props: {\n  bundle: string;\n  bundleIdentifier: string;\n  appDeltaDirectory: string;\n  udid: string;\n  deviceName: string;\n}): Promise<void> {\n  if (!AppleDevice.isEnabled()) {\n    return await IOSDeploy.installOnDeviceAsync(props);\n  }\n\n  const { bundle, bundleIdentifier, appDeltaDirectory, udid, deviceName } = props;\n  let indicator: Ora | undefined;\n\n  try {\n    // TODO: Connect for logs\n    await AppleDevice.runOnDevice({\n      udid,\n      appPath: bundle,\n      bundleId: bundleIdentifier,\n      waitForApp: false,\n      deltaPath: appDeltaDirectory,\n      onProgress({\n        status,\n        isComplete,\n        progress,\n      }: {\n        status: string;\n        isComplete: boolean;\n        progress: number;\n      }) {\n        if (!indicator) {\n          indicator = ora(status).start();\n        }\n        indicator.text = `${chalk.bold(status)} ${progress}%`;\n        if (isComplete) {\n          indicator.succeed();\n        }\n      },\n    });\n  } catch (err: any) {\n    if (indicator) {\n      indicator.fail();\n    }\n    if (err.code === 'DeviceLocked') {\n      // Get the app name from the binary path.\n      const appName = path.basename(bundle).split('.')[0] ?? 'app';\n      if (\n        !program.nonInteractive &&\n        (await Prompts.confirmAsync({\n          message: `Cannot launch ${appName} because the device is locked. Unlock ${deviceName} to continue...`,\n          initial: true,\n        }))\n      ) {\n        return installOnDeviceAsync(props);\n      }\n      throw new CommandError(\n        `Cannot launch ${appName} on ${deviceName} because the device is locked.`\n      );\n    }\n    throw err;\n  }\n}\n"],"mappings":";;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAyC;AAAA;AAAA;AAEzC;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,oBAAoB,CAACC,QAAgB,EAAU;EAC7D;EACA;EACA,MAAMC,WAAW,GAAGC,eAAI,CAACC,IAAI,CAACC,aAAE,CAACC,MAAM,EAAE,EAAE,KAAK,EAAE,WAAW,EAAEL,QAAQ,CAAC;EACxEM,kBAAE,CAACC,aAAa,CAACN,WAAW,CAAC;EAC7B,OAAOA,WAAW;AACpB;;AAEA;AACO,eAAeO,oBAAoB,CAACC,KAM1C,EAAiB;EAChB,IAAI,CAACC,kBAAW,CAACC,SAAS,EAAE,EAAE;IAC5B,OAAO,MAAMC,SAAS,GAACJ,oBAAoB,CAACC,KAAK,CAAC;EACpD;EAEA,MAAM;IAAEI,MAAM;IAAEC,gBAAgB;IAAEC,iBAAiB;IAAEC,IAAI;IAAEC;EAAW,CAAC,GAAGR,KAAK;EAC/E,IAAIS,SAA0B;EAE9B,IAAI;IACF;IACA,MAAMR,kBAAW,CAACS,WAAW,CAAC;MAC5BH,IAAI;MACJI,OAAO,EAAEP,MAAM;MACfb,QAAQ,EAAEc,gBAAgB;MAC1BO,UAAU,EAAE,KAAK;MACjBC,SAAS,EAAEP,iBAAiB;MAC5BQ,UAAU,CAAC;QACTC,MAAM;QACNC,UAAU;QACVC;MAKF,CAAC,EAAE;QACD,IAAI,CAACR,SAAS,EAAE;UACdA,SAAS,GAAG,IAAAS,UAAG,EAACH,MAAM,CAAC,CAACI,KAAK,EAAE;QACjC;QACAV,SAAS,CAACW,IAAI,GAAI,GAAEC,gBAAK,CAACC,IAAI,CAACP,MAAM,CAAE,IAAGE,QAAS,GAAE;QACrD,IAAID,UAAU,EAAE;UACdP,SAAS,CAACc,OAAO,EAAE;QACrB;MACF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,GAAQ,EAAE;IACjB,IAAIf,SAAS,EAAE;MACbA,SAAS,CAACgB,IAAI,EAAE;IAClB;IACA,IAAID,GAAG,CAACE,IAAI,KAAK,cAAc,EAAE;MAAA;MAC/B;MACA,MAAMC,OAAO,4BAAGlC,eAAI,CAACmC,QAAQ,CAACxB,MAAM,CAAC,CAACyB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,yEAAI,KAAK;MAC5D,IACE,CAACC,oBAAO,CAACC,cAAc,KACtB,MAAMC,cAAO,CAACC,YAAY,CAAC;QAC1BC,OAAO,EAAG,iBAAgBP,OAAQ,yCAAwCnB,UAAW,iBAAgB;QACrG2B,OAAO,EAAE;MACX,CAAC,CAAC,CAAC,EACH;QACA,OAAOpC,oBAAoB,CAACC,KAAK,CAAC;MACpC;MACA,MAAM,KAAIoC,uBAAY,EACnB,iBAAgBT,OAAQ,OAAMnB,UAAW,gCAA+B,CAC1E;IACH;IACA,MAAMgB,GAAG;EACX;AACF"}