{"version":3,"file":"resolveOptionsAsync.js","names":["ignoredPaths","findXcodeProjectPaths","projectRoot","extension","globSync","absolute","cwd","ignore","resolveXcodeProject","paths","length","name","isWorkspace","CommandError","isMac","process","platform","getDefaultUserTerminal","REACT_TERMINAL","TERM_PROGRAM","TERM","env","resolveNativeSchemeAsync","scheme","configuration","resolvedScheme","schemes","IOSConfig","BuildScheme","getRunnableSchemesFromXcodeproj","resolvedSchemeName","selectAsync","message","choices","map","value","isApp","type","Target","TargetType","APPLICATION","osType","title","chalk","bold","gray","nonInteractiveHelp","join","find","Log","log","resolveOptionsAsync","options","xcodeProject","port","bundler","resolvePortAsync","reuseExistingPort","defaultPort","profileMethod","path","basename","extname","device","resolveDeviceAsync","isSimulator","deviceType","startsWith","shouldSkipInitialBundling","shouldStartBundler","buildCache","terminal"],"sources":["../../../../src/commands/run/ios/resolveOptionsAsync.ts"],"sourcesContent":["import { IOSConfig } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport { sync as globSync } from 'glob';\nimport * as path from 'path';\n\nimport CommandError from '../../../CommandError';\nimport Log from '../../../log';\nimport { selectAsync } from '../../../utils/prompts';\nimport { profileMethod } from '../../utils/profileMethod';\nimport { resolvePortAsync } from '../utils/resolvePortAsync';\nimport * as XcodeBuild from './XcodeBuild';\nimport { resolveDeviceAsync } from './resolveDeviceAsync';\n\nexport type XcodeConfiguration = 'Debug' | 'Release';\n\nexport type Options = {\n  device?: string | boolean;\n  port?: number;\n  scheme?: string;\n  configuration?: XcodeConfiguration;\n  bundler?: boolean;\n  install?: boolean;\n  /** Should use derived data for builds. */\n  buildCache: boolean;\n};\n\nexport type ProjectInfo = {\n  isWorkspace: boolean;\n  name: string;\n};\n\nconst ignoredPaths = ['**/@(Carthage|Pods|vendor|node_modules)/**'];\n\nfunction findXcodeProjectPaths(\n  projectRoot: string,\n  extension: 'xcworkspace' | 'xcodeproj'\n): string[] {\n  return globSync(`ios/*.${extension}`, {\n    absolute: true,\n    cwd: projectRoot,\n    ignore: ignoredPaths,\n  });\n}\n\nfunction resolveXcodeProject(projectRoot: string): ProjectInfo {\n  let paths = findXcodeProjectPaths(projectRoot, 'xcworkspace');\n  if (paths.length) {\n    return {\n      // Use full path instead of relative project root so that warnings and errors contain full paths as well, this helps with filtering.\n      // Also helps keep things consistent in monorepos.\n      name: paths[0],\n      // name: path.relative(projectRoot, paths[0]),\n      isWorkspace: true,\n    };\n  }\n  paths = findXcodeProjectPaths(projectRoot, 'xcodeproj');\n  if (paths.length) {\n    return { name: paths[0], isWorkspace: false };\n  }\n  throw new CommandError(`Xcode project not found in project: ${projectRoot}`);\n}\n\nconst isMac = process.platform === 'darwin';\n\nfunction getDefaultUserTerminal(): string | undefined {\n  const { REACT_TERMINAL, TERM_PROGRAM, TERM } = process.env;\n\n  if (REACT_TERMINAL) {\n    return REACT_TERMINAL;\n  }\n\n  if (isMac) {\n    return TERM_PROGRAM;\n  }\n\n  return TERM;\n}\n\nasync function resolveNativeSchemeAsync(\n  projectRoot: string,\n  { scheme, configuration }: { scheme?: string | true; configuration?: XcodeConfiguration }\n): Promise<{ name: string; osType?: string } | null> {\n  let resolvedScheme: { name: string; osType?: string } | null = null;\n  // @ts-ignore\n  if (scheme === true) {\n    const schemes = IOSConfig.BuildScheme.getRunnableSchemesFromXcodeproj(projectRoot, {\n      configuration,\n    });\n    if (!schemes.length) {\n      throw new CommandError('No native iOS build schemes found');\n    }\n    resolvedScheme = schemes[0];\n    if (schemes.length > 1) {\n      const resolvedSchemeName = await selectAsync(\n        {\n          message: 'Select a scheme',\n          choices: schemes.map(value => {\n            const isApp =\n              value.type === IOSConfig.Target.TargetType.APPLICATION && value.osType === 'iOS';\n            return {\n              value: value.name,\n              title: isApp ? chalk.bold(value.name) + chalk.gray(' (app)') : value.name,\n            };\n          }),\n        },\n        {\n          nonInteractiveHelp: `--scheme: argument must be provided with a string in non-interactive mode. Valid choices are: ${schemes.join(\n            ', '\n          )}`,\n        }\n      );\n      resolvedScheme = schemes.find(({ name }) => resolvedSchemeName === name) ?? null;\n    } else {\n      Log.log(`Auto selecting only available scheme: ${resolvedScheme.name}`);\n    }\n  } else if (scheme) {\n    // Attempt to match the schemes up so we can open the correct simulator\n    const schemes = IOSConfig.BuildScheme.getRunnableSchemesFromXcodeproj(projectRoot, {\n      configuration,\n    });\n    resolvedScheme = schemes.find(({ name }) => name === scheme) || { name: scheme };\n  }\n\n  return resolvedScheme;\n}\n\nexport async function resolveOptionsAsync(\n  projectRoot: string,\n  options: Options\n): Promise<XcodeBuild.BuildProps> {\n  const xcodeProject = resolveXcodeProject(projectRoot);\n\n  let port = options.bundler\n    ? await resolvePortAsync(projectRoot, { reuseExistingPort: true, defaultPort: options.port })\n    : null;\n  // Skip bundling if the port is null\n  options.bundler = !!port;\n  if (!port) {\n    // any random number\n    port = 8081;\n  }\n\n  const resolvedScheme = (await resolveNativeSchemeAsync(projectRoot, options)) ??\n    profileMethod(IOSConfig.BuildScheme.getRunnableSchemesFromXcodeproj)(projectRoot, {\n      configuration: options.configuration,\n    })[0] ?? {\n      name: path.basename(xcodeProject.name, path.extname(xcodeProject.name)),\n    };\n\n  const device = await resolveDeviceAsync(options.device, { osType: resolvedScheme.osType });\n\n  const isSimulator =\n    !('deviceType' in device) ||\n    device.deviceType.startsWith('com.apple.CoreSimulator.SimDeviceType.');\n\n  const configuration = options.configuration || 'Debug';\n  // This optimization skips resetting the Metro cache needlessly.\n  // The cache is reset in `../node_modules/react-native/scripts/react-native-xcode.sh` when the\n  // project is running in Debug and built onto a physical device. It seems that this is done because\n  // the script is run from Xcode and unaware of the CLI instance.\n  const shouldSkipInitialBundling = configuration === 'Debug' && !isSimulator;\n  return {\n    projectRoot,\n    isSimulator,\n    xcodeProject,\n    device,\n    configuration: options.configuration || 'Debug',\n    shouldStartBundler: options.bundler ?? false,\n    shouldSkipInitialBundling,\n    port,\n    buildCache: options.buildCache,\n    terminal: getDefaultUserTerminal(),\n    scheme: resolvedScheme.name,\n  };\n}\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAA0D;AAAA;AAAA;AAoB1D,MAAMA,YAAY,GAAG,CAAC,4CAA4C,CAAC;AAEnE,SAASC,qBAAqB,CAC5BC,WAAmB,EACnBC,SAAsC,EAC5B;EACV,OAAO,IAAAC,YAAQ,EAAE,SAAQD,SAAU,EAAC,EAAE;IACpCE,QAAQ,EAAE,IAAI;IACdC,GAAG,EAAEJ,WAAW;IAChBK,MAAM,EAAEP;EACV,CAAC,CAAC;AACJ;AAEA,SAASQ,mBAAmB,CAACN,WAAmB,EAAe;EAC7D,IAAIO,KAAK,GAAGR,qBAAqB,CAACC,WAAW,EAAE,aAAa,CAAC;EAC7D,IAAIO,KAAK,CAACC,MAAM,EAAE;IAChB,OAAO;MACL;MACA;MACAC,IAAI,EAAEF,KAAK,CAAC,CAAC,CAAC;MACd;MACAG,WAAW,EAAE;IACf,CAAC;EACH;EACAH,KAAK,GAAGR,qBAAqB,CAACC,WAAW,EAAE,WAAW,CAAC;EACvD,IAAIO,KAAK,CAACC,MAAM,EAAE;IAChB,OAAO;MAAEC,IAAI,EAAEF,KAAK,CAAC,CAAC,CAAC;MAAEG,WAAW,EAAE;IAAM,CAAC;EAC/C;EACA,MAAM,KAAIC,uBAAY,EAAE,uCAAsCX,WAAY,EAAC,CAAC;AAC9E;AAEA,MAAMY,KAAK,GAAGC,OAAO,CAACC,QAAQ,KAAK,QAAQ;AAE3C,SAASC,sBAAsB,GAAuB;EACpD,MAAM;IAAEC,cAAc;IAAEC,YAAY;IAAEC;EAAK,CAAC,GAAGL,OAAO,CAACM,GAAG;EAE1D,IAAIH,cAAc,EAAE;IAClB,OAAOA,cAAc;EACvB;EAEA,IAAIJ,KAAK,EAAE;IACT,OAAOK,YAAY;EACrB;EAEA,OAAOC,IAAI;AACb;AAEA,eAAeE,wBAAwB,CACrCpB,WAAmB,EACnB;EAAEqB,MAAM;EAAEC;AAA8E,CAAC,EACtC;EACnD,IAAIC,cAAwD,GAAG,IAAI;EACnE;EACA,IAAIF,MAAM,KAAK,IAAI,EAAE;IACnB,MAAMG,OAAO,GAAGC,0BAAS,CAACC,WAAW,CAACC,+BAA+B,CAAC3B,WAAW,EAAE;MACjFsB;IACF,CAAC,CAAC;IACF,IAAI,CAACE,OAAO,CAAChB,MAAM,EAAE;MACnB,MAAM,KAAIG,uBAAY,EAAC,mCAAmC,CAAC;IAC7D;IACAY,cAAc,GAAGC,OAAO,CAAC,CAAC,CAAC;IAC3B,IAAIA,OAAO,CAAChB,MAAM,GAAG,CAAC,EAAE;MAAA;MACtB,MAAMoB,kBAAkB,GAAG,MAAM,IAAAC,sBAAW,EAC1C;QACEC,OAAO,EAAE,iBAAiB;QAC1BC,OAAO,EAAEP,OAAO,CAACQ,GAAG,CAACC,KAAK,IAAI;UAC5B,MAAMC,KAAK,GACTD,KAAK,CAACE,IAAI,KAAKV,0BAAS,CAACW,MAAM,CAACC,UAAU,CAACC,WAAW,IAAIL,KAAK,CAACM,MAAM,KAAK,KAAK;UAClF,OAAO;YACLN,KAAK,EAAEA,KAAK,CAACxB,IAAI;YACjB+B,KAAK,EAAEN,KAAK,GAAGO,gBAAK,CAACC,IAAI,CAACT,KAAK,CAACxB,IAAI,CAAC,GAAGgC,gBAAK,CAACE,IAAI,CAAC,QAAQ,CAAC,GAAGV,KAAK,CAACxB;UACvE,CAAC;QACH,CAAC;MACH,CAAC,EACD;QACEmC,kBAAkB,EAAG,iGAAgGpB,OAAO,CAACqB,IAAI,CAC/H,IAAI,CACJ;MACJ,CAAC,CACF;MACDtB,cAAc,oBAAGC,OAAO,CAACsB,IAAI,CAAC,CAAC;QAAErC;MAAK,CAAC,KAAKmB,kBAAkB,KAAKnB,IAAI,CAAC,yDAAI,IAAI;IAClF,CAAC,MAAM;MACLsC,cAAG,CAACC,GAAG,CAAE,yCAAwCzB,cAAc,CAACd,IAAK,EAAC,CAAC;IACzE;EACF,CAAC,MAAM,IAAIY,MAAM,EAAE;IACjB;IACA,MAAMG,OAAO,GAAGC,0BAAS,CAACC,WAAW,CAACC,+BAA+B,CAAC3B,WAAW,EAAE;MACjFsB;IACF,CAAC,CAAC;IACFC,cAAc,GAAGC,OAAO,CAACsB,IAAI,CAAC,CAAC;MAAErC;IAAK,CAAC,KAAKA,IAAI,KAAKY,MAAM,CAAC,IAAI;MAAEZ,IAAI,EAAEY;IAAO,CAAC;EAClF;EAEA,OAAOE,cAAc;AACvB;AAEO,eAAe0B,mBAAmB,CACvCjD,WAAmB,EACnBkD,OAAgB,EACgB;EAAA;EAChC,MAAMC,YAAY,GAAG7C,mBAAmB,CAACN,WAAW,CAAC;EAErD,IAAIoD,IAAI,GAAGF,OAAO,CAACG,OAAO,GACtB,MAAM,IAAAC,oCAAgB,EAACtD,WAAW,EAAE;IAAEuD,iBAAiB,EAAE,IAAI;IAAEC,WAAW,EAAEN,OAAO,CAACE;EAAK,CAAC,CAAC,GAC3F,IAAI;EACR;EACAF,OAAO,CAACG,OAAO,GAAG,CAAC,CAACD,IAAI;EACxB,IAAI,CAACA,IAAI,EAAE;IACT;IACAA,IAAI,GAAG,IAAI;EACb;EAEA,MAAM7B,cAAc,oCAAI,MAAMH,wBAAwB,CAACpB,WAAW,EAAEkD,OAAO,CAAC,yEAC1E,IAAAO,8BAAa,EAAChC,0BAAS,CAACC,WAAW,CAACC,+BAA+B,CAAC,CAAC3B,WAAW,EAAE;IAChFsB,aAAa,EAAE4B,OAAO,CAAC5B;EACzB,CAAC,CAAC,CAAC,CAAC,CAAC,uCAAI;IACPb,IAAI,EAAEiD,IAAI,GAACC,QAAQ,CAACR,YAAY,CAAC1C,IAAI,EAAEiD,IAAI,GAACE,OAAO,CAACT,YAAY,CAAC1C,IAAI,CAAC;EACxE,CAAC;EAEH,MAAMoD,MAAM,GAAG,MAAM,IAAAC,wCAAkB,EAACZ,OAAO,CAACW,MAAM,EAAE;IAAEtB,MAAM,EAAEhB,cAAc,CAACgB;EAAO,CAAC,CAAC;EAE1F,MAAMwB,WAAW,GACf,EAAE,YAAY,IAAIF,MAAM,CAAC,IACzBA,MAAM,CAACG,UAAU,CAACC,UAAU,CAAC,wCAAwC,CAAC;EAExE,MAAM3C,aAAa,GAAG4B,OAAO,CAAC5B,aAAa,IAAI,OAAO;EACtD;EACA;EACA;EACA;EACA,MAAM4C,yBAAyB,GAAG5C,aAAa,KAAK,OAAO,IAAI,CAACyC,WAAW;EAC3E,OAAO;IACL/D,WAAW;IACX+D,WAAW;IACXZ,YAAY;IACZU,MAAM;IACNvC,aAAa,EAAE4B,OAAO,CAAC5B,aAAa,IAAI,OAAO;IAC/C6C,kBAAkB,sBAAEjB,OAAO,CAACG,OAAO,+DAAI,KAAK;IAC5Ca,yBAAyB;IACzBd,IAAI;IACJgB,UAAU,EAAElB,OAAO,CAACkB,UAAU;IAC9BC,QAAQ,EAAEtD,sBAAsB,EAAE;IAClCM,MAAM,EAAEE,cAAc,CAACd;EACzB,CAAC;AACH"}