{"version":3,"file":"Security.js","names":["assertInstalledAsync","spawnAsync","CommandError","getCertificateForSigningIdAsync","id","pem","stdout","trim","forge","pki","certificateFromPem","findIdentitiesAsync","results","parsed","split","map","line","extractCodeSigningInfo","filter","Boolean","Set","value","match","resolveIdentitiesAsync","identities","values","extractSigningId","Promise","all","signingCertificateId","resolveCertificateSigningInfoAsync","certificate","codeSigningInfo","subject","getField","appleTeamName","appleTeamId"],"sources":["../../../../src/commands/run/utils/Security.ts"],"sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport forge from 'node-forge';\n\nimport CommandError from '../../../CommandError';\n\nexport type CertificateSigningInfo = {\n  /**\n   * @example 'AA00AABB0A'\n   */\n  signingCertificateId: string;\n  /**\n   * @example 'Apple Development: Evan Bacon (AA00AABB0A)'\n   */\n  codeSigningInfo?: string;\n  /**\n   * @example '650 Industries, Inc.'\n   */\n  appleTeamName?: string;\n  /**\n   * @example 'A1BCDEF234'\n   */\n  appleTeamId?: string;\n};\n\nexport async function assertInstalledAsync() {\n  try {\n    await spawnAsync('which', ['security']);\n  } catch {\n    throw new CommandError(\n      \"Cannot code sign project because the CLI `security` is not available on your computer.\\nPlease ensure it's installed and try again.\"\n    );\n  }\n}\n\nexport async function getCertificateForSigningIdAsync(id: string): Promise<forge.pki.Certificate> {\n  const pem = (await spawnAsync('security', ['find-certificate', '-c', id, '-p'])).stdout?.trim?.();\n  if (!pem) {\n    throw new CommandError(\n      `Failed to get PEM certificate for ID \"${id}\" using the \\`security\\` CLI`\n    );\n  }\n  return forge.pki.certificateFromPem(pem);\n}\n\nexport async function findIdentitiesAsync(): Promise<string[]> {\n  const results = (\n    await spawnAsync('security', ['find-identity', '-p', 'codesigning', '-v'])\n  ).stdout.trim?.();\n  // Returns a string like:\n  // 1) 12222234253761286351826735HGKDHAJGF45283 \"Apple Development: Evan Bacon (AA00AABB0A)\" (CSSMERR_TP_CERT_REVOKED)\n  // 2) 12312234253761286351826735HGKDHAJGF45283 \"Apple Development: bacon@expo.io (BB00AABB0A)\"\n  // 3) 12442234253761286351826735HGKDHAJGF45283 \"iPhone Distribution: Evan Bacon (CC00AABB0B)\" (CSSMERR_TP_CERT_REVOKED)\n  // 4) 15672234253761286351826735HGKDHAJGF45283 \"Apple Development: Evan Bacon (AA00AABB0A)\"\n  //  4 valid identities found\n\n  const parsed = results\n    .split('\\n')\n    .map(line => extractCodeSigningInfo(line))\n    .filter(Boolean) as string[];\n\n  // Remove duplicates\n  return [...new Set(parsed)];\n}\n\n/**\n * @param value '  2) 12312234253761286351826735HGKDHAJGF45283 \"Apple Development: bacon@expo.io (BB00AABB0A)\"'\n * @returns 'Apple Development: Evan Bacon (PH75MDXG4H)'\n */\nexport function extractCodeSigningInfo(value: string): string | null {\n  return value.match(/^\\s*\\d+\\).+\"(.+Develop(ment|er).+)\"$/)?.[1] ?? null;\n}\n\nexport async function resolveIdentitiesAsync(\n  identities: string[]\n): Promise<CertificateSigningInfo[]> {\n  const values = identities.map(extractSigningId).filter(Boolean) as string[];\n  return await Promise.all(\n    values.map(signingCertificateId => resolveCertificateSigningInfoAsync(signingCertificateId))\n  );\n}\n\nexport async function resolveCertificateSigningInfoAsync(\n  signingCertificateId: string\n): Promise<CertificateSigningInfo> {\n  const certificate = await getCertificateForSigningIdAsync(signingCertificateId);\n  return {\n    signingCertificateId,\n    codeSigningInfo: certificate.subject.getField('CN')?.value,\n    appleTeamName: certificate.subject.getField('O')?.value,\n    appleTeamId: certificate.subject.getField('OU')?.value,\n  };\n}\n\n/**\n * @param codeSigningInfo 'Apple Development: Evan Bacon (AA00AABB0A)'\n * @returns 'AA00AABB0A'\n */\nexport function extractSigningId(codeSigningInfo: string): string | null {\n  return codeSigningInfo.match(/.*\\(([a-zA-Z0-9]+)\\)/)?.[1] ?? null;\n}\n"],"mappings":";;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAiD;AAqB1C,eAAeA,oBAAoB,GAAG;EAC3C,IAAI;IACF,MAAM,IAAAC,qBAAU,EAAC,OAAO,EAAE,CAAC,UAAU,CAAC,CAAC;EACzC,CAAC,CAAC,MAAM;IACN,MAAM,KAAIC,uBAAY,EACpB,qIAAqI,CACtI;EACH;AACF;AAEO,eAAeC,+BAA+B,CAACC,EAAU,EAAkC;EAAA;EAChG,MAAMC,GAAG,4BAAG,CAAC,MAAM,IAAAJ,qBAAU,EAAC,UAAU,EAAE,CAAC,kBAAkB,EAAE,IAAI,EAAEG,EAAE,EAAE,IAAI,CAAC,CAAC,EAAEE,MAAM,oFAA3E,sBAA6EC,IAAI,2DAAjF,kDAAqF;EACjG,IAAI,CAACF,GAAG,EAAE;IACR,MAAM,KAAIH,uBAAY,EACnB,yCAAwCE,EAAG,8BAA6B,CAC1E;EACH;EACA,OAAOI,oBAAK,CAACC,GAAG,CAACC,kBAAkB,CAACL,GAAG,CAAC;AAC1C;AAEO,eAAeM,mBAAmB,GAAsB;EAAA;EAC7D,MAAMC,OAAO,6BAAG,2BACd,MAAM,IAAAX,qBAAU,EAAC,UAAU,EAAE,CAAC,eAAe,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC,EAC1EK,MAAM,EAACC,IAAI,2DAFG,mDAEC;EACjB;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMM,MAAM,GAAGD,OAAO,CACnBE,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,CAACC,IAAI,IAAIC,sBAAsB,CAACD,IAAI,CAAC,CAAC,CACzCE,MAAM,CAACC,OAAO,CAAa;;EAE9B;EACA,OAAO,CAAC,GAAG,IAAIC,GAAG,CAACP,MAAM,CAAC,CAAC;AAC7B;;AAEA;AACA;AACA;AACA;AACO,SAASI,sBAAsB,CAACI,KAAa,EAAiB;EAAA;EACnE,wCAAOA,KAAK,CAACC,KAAK,CAAC,sCAAsC,CAAC,iDAAnD,aAAsD,CAAC,CAAC,yDAAI,IAAI;AACzE;AAEO,eAAeC,sBAAsB,CAC1CC,UAAoB,EACe;EACnC,MAAMC,MAAM,GAAGD,UAAU,CAACT,GAAG,CAACW,gBAAgB,CAAC,CAACR,MAAM,CAACC,OAAO,CAAa;EAC3E,OAAO,MAAMQ,OAAO,CAACC,GAAG,CACtBH,MAAM,CAACV,GAAG,CAACc,oBAAoB,IAAIC,kCAAkC,CAACD,oBAAoB,CAAC,CAAC,CAC7F;AACH;AAEO,eAAeC,kCAAkC,CACtDD,oBAA4B,EACK;EAAA;EACjC,MAAME,WAAW,GAAG,MAAM5B,+BAA+B,CAAC0B,oBAAoB,CAAC;EAC/E,OAAO;IACLA,oBAAoB;IACpBG,eAAe,2BAAED,WAAW,CAACE,OAAO,CAACC,QAAQ,CAAC,IAAI,CAAC,0DAAlC,sBAAoCb,KAAK;IAC1Dc,aAAa,4BAAEJ,WAAW,CAACE,OAAO,CAACC,QAAQ,CAAC,GAAG,CAAC,2DAAjC,uBAAmCb,KAAK;IACvDe,WAAW,4BAAEL,WAAW,CAACE,OAAO,CAACC,QAAQ,CAAC,IAAI,CAAC,2DAAlC,uBAAoCb;EACnD,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACO,SAASK,gBAAgB,CAACM,eAAuB,EAAiB;EAAA;EACvE,0DAAOA,eAAe,CAACV,KAAK,CAAC,sBAAsB,CAAC,2DAA7C,uBAAgD,CAAC,CAAC,yEAAI,IAAI;AACnE"}