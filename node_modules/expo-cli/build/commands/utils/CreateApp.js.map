{"version":3,"file":"CreateApp.js","names":["validateName","name","test","FORBIDDEN_NAMES","isFolderNameForbidden","folderName","includes","TOLERABLE_FILES","getConflictsForDirectory","projectRoot","tolerableFiles","fs","readdirSync","filter","file","assertFolderEmptyAsync","path","dirname","overwrite","conflicts","length","Log","addNewLineIfNone","nested","chalk","green","newLine","Promise","all","map","conflict","remove","join","resolvePackageManager","options","packageManager","yarn","npm","PackageManager","shouldUseYarn","install","log","dim","EXPO_DEBUG","getenv","boolish","installNodeDependenciesAsync","flags","silent","cwd","YarnPackageManager","version","versionAsync","nodeLinker","getConfigAsync","semver","satisfies","yarnRc","yamlString","readFileSync","error","code","config","yaml","safeLoad","warn","writeFileSync","safeDump","installAsync","NpmPackageManager","getChangeDirectoryPath","cdPath","relative","process","installCocoaPodsAsync","step","logNewSection","platform","succeed","CocoaPodsPackageManager","isCLIInstalledAsync","text","stopAndPersist","installCLIAsync","nonInteractive","spawnOptions","stdio","e","symbol","red","CocoaPodsError","message","spinner","hasPackageJsonDependencyListChangedAsync","catch"],"sources":["../../../src/commands/utils/CreateApp.ts"],"sourcesContent":["import * as PackageManager from '@expo/package-manager';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport getenv from 'getenv';\nimport yaml from 'js-yaml';\nimport * as path from 'path';\nimport semver from 'semver';\n\nimport Log from '../../log';\nimport { logNewSection } from '../../utils/ora';\nimport { hasPackageJsonDependencyListChangedAsync } from '../run/ios/Podfile';\n\nexport function validateName(name?: string): string | true {\n  if (typeof name !== 'string' || name === '') {\n    return 'The project name can not be empty.';\n  }\n  if (!/^[a-z0-9@.\\-_]+$/i.test(name)) {\n    return 'The project name can only contain URL-friendly characters (alphanumeric and @ . -  _)';\n  }\n  return true;\n}\n\nconst FORBIDDEN_NAMES = ['react-native', 'react', 'react-dom', 'react-native-web', 'expo'];\n\nexport function isFolderNameForbidden(folderName: string): boolean {\n  return FORBIDDEN_NAMES.includes(folderName);\n}\n\n// Any of these files are allowed to exist in the projectRoot\nconst TOLERABLE_FILES = [\n  // System\n  '.DS_Store',\n  'Thumbs.db',\n  // Git\n  '.git',\n  '.gitattributes',\n  '.gitignore',\n  // Project\n  '.npmignore',\n  '.travis.yml',\n  'LICENSE',\n  'docs',\n  '.idea',\n  // Package manager\n  'npm-debug.log',\n  'yarn-debug.log',\n  'yarn-error.log',\n];\n\nexport function getConflictsForDirectory(\n  projectRoot: string,\n  tolerableFiles: string[] = TOLERABLE_FILES\n): string[] {\n  return fs\n    .readdirSync(projectRoot)\n    .filter((file: string) => !(/\\.iml$/.test(file) || tolerableFiles.includes(file)));\n}\n\nexport async function assertFolderEmptyAsync({\n  projectRoot,\n  folderName = path.dirname(projectRoot),\n  overwrite,\n}: {\n  projectRoot: string;\n  folderName?: string;\n  overwrite: boolean;\n}): Promise<boolean> {\n  const conflicts = getConflictsForDirectory(projectRoot);\n  if (conflicts.length) {\n    Log.addNewLineIfNone();\n    Log.nested(`The directory ${chalk.green(folderName)} has files that might be overwritten:`);\n    Log.newLine();\n    for (const file of conflicts) {\n      Log.nested(`  ${file}`);\n    }\n\n    if (overwrite) {\n      Log.newLine();\n      Log.nested(`Removing existing files from ${chalk.green(folderName)}`);\n      await Promise.all(conflicts.map(conflict => fs.remove(path.join(projectRoot, conflict))));\n      return true;\n    }\n\n    return false;\n  }\n  return true;\n}\n\nexport type PackageManagerName = 'npm' | 'yarn';\n\nexport function resolvePackageManager(options: {\n  yarn?: boolean;\n  npm?: boolean;\n  install?: boolean;\n}): PackageManagerName {\n  let packageManager: PackageManagerName = 'npm';\n  if (options.yarn || (!options.npm && PackageManager.shouldUseYarn())) {\n    packageManager = 'yarn';\n  } else {\n    packageManager = 'npm';\n  }\n  if (options.install) {\n    Log.log(\n      packageManager === 'yarn'\n        ? `üß∂ Using Yarn to install packages. ${chalk.dim('Pass --npm to use npm instead.')}`\n        : 'üì¶ Using npm to install packages.'\n    );\n  }\n\n  return packageManager;\n}\n\nconst EXPO_DEBUG = getenv.boolish('EXPO_DEBUG', false);\n\nexport async function installNodeDependenciesAsync(\n  projectRoot: string,\n  packageManager: PackageManagerName,\n  flags: { silent: boolean } = {\n    // default to silent\n    silent: !EXPO_DEBUG,\n  }\n) {\n  const options = { cwd: projectRoot, silent: flags.silent };\n  if (packageManager === 'yarn') {\n    const yarn = new PackageManager.YarnPackageManager(options);\n    const version = await yarn.versionAsync();\n    const nodeLinker = await yarn.getConfigAsync('nodeLinker');\n    if (semver.satisfies(version, '>=2.0.0-rc.24') && nodeLinker !== 'node-modules') {\n      const yarnRc = path.join(projectRoot, '.yarnrc.yml');\n      let yamlString = '';\n      try {\n        yamlString = fs.readFileSync(yarnRc, 'utf8');\n      } catch (error: any) {\n        if (error.code !== 'ENOENT') {\n          throw error;\n        }\n      }\n      const config = yamlString ? yaml.safeLoad(yamlString) : {};\n      config.nodeLinker = 'node-modules';\n      !flags.silent &&\n        Log.warn(\n          `Yarn v${version} detected, enabling experimental Yarn v2 support using the node-modules plugin.`\n        );\n      !flags.silent && Log.log(`Writing ${yarnRc}...`);\n      fs.writeFileSync(yarnRc, yaml.safeDump(config));\n    }\n    await yarn.installAsync();\n  } else {\n    await new PackageManager.NpmPackageManager(options).installAsync();\n  }\n}\n\nexport function getChangeDirectoryPath(projectRoot: string): string {\n  const cdPath = path.relative(process.cwd(), projectRoot);\n  if (cdPath.length <= projectRoot.length) {\n    return cdPath;\n  }\n  return projectRoot;\n}\n\nexport async function installCocoaPodsAsync(projectRoot: string) {\n  let step = logNewSection('Installing CocoaPods...');\n  if (process.platform !== 'darwin') {\n    step.succeed('Skipped installing CocoaPods because operating system is not on macOS.');\n    return false;\n  }\n\n  const packageManager = new PackageManager.CocoaPodsPackageManager({\n    cwd: path.join(projectRoot, 'ios'),\n    silent: !EXPO_DEBUG,\n  });\n\n  if (!(await packageManager.isCLIInstalledAsync())) {\n    try {\n      // prompt user -- do you want to install cocoapods right now?\n      step.text = 'CocoaPods CLI not found in your PATH, installing it now.';\n      step.stopAndPersist();\n      await PackageManager.CocoaPodsPackageManager.installCLIAsync({\n        nonInteractive: true,\n        spawnOptions: {\n          ...packageManager.options,\n          // Don't silence this part\n          stdio: ['inherit', 'inherit', 'pipe'],\n        },\n      });\n      step.succeed('Installed CocoaPods CLI.');\n      step = logNewSection('Running `pod install` in the `ios` directory.');\n    } catch (e: any) {\n      step.stopAndPersist({\n        symbol: '‚ö†Ô∏è ',\n        text: chalk.red('Unable to install the CocoaPods CLI.'),\n      });\n      if (e instanceof PackageManager.CocoaPodsError) {\n        Log.log(e.message);\n      } else {\n        Log.log(`Unknown error: ${e.message}`);\n      }\n      return false;\n    }\n  }\n\n  try {\n    await packageManager.installAsync({ spinner: step });\n    // Create cached list for later\n    await hasPackageJsonDependencyListChangedAsync(projectRoot).catch(() => null);\n    step.succeed('Installed pods and initialized Xcode workspace.');\n    return true;\n  } catch (e: any) {\n    step.stopAndPersist({\n      symbol: '‚ö†Ô∏è ',\n      text: chalk.red('Something went wrong running `pod install` in the `ios` directory.'),\n    });\n    if (e instanceof PackageManager.CocoaPodsError) {\n      Log.log(e.message);\n    } else {\n      Log.log(`Unknown error: ${e.message}`);\n    }\n    return false;\n  }\n}\n"],"mappings":"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"}