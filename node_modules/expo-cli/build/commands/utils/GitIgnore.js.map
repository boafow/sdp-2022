{"version":3,"file":"GitIgnore.js","names":["mergeGitIgnorePaths","targetGitIgnorePath","sourceGitIgnorePath","fs","existsSync","targetGitIgnore","readFileSync","toString","sourceGitIgnore","merged","mergeGitIgnoreContents","contents","writeFileSync","generatedHeaderPrefix","generatedFooterComment","getGeneratedSectionIndexes","gitIgnore","split","start","findIndex","line","startsWith","end","removeGeneratedGitIgnoreContents","splice","join","header","createGeneratedHeaderComment","includes","sanitizedTarget","didMerge","didClear","hashKey","createGitIgnoreHash","getSanitizedGitIgnoreLines","filter","v","trim","sort","hash","crypto","createHash","update","digest"],"sources":["../../../src/commands/utils/GitIgnore.ts"],"sourcesContent":["import crypto from 'crypto';\nimport fs from 'fs-extra';\n\ntype MergeResults = {\n  contents: string;\n  didClear: boolean;\n  didMerge: boolean;\n};\n/**\n * Merge two gitignore files together and add a generated header.\n *\n * @param targetGitIgnorePath\n * @param sourceGitIgnorePath\n */\nexport function mergeGitIgnorePaths(\n  targetGitIgnorePath: string,\n  sourceGitIgnorePath: string\n): null | MergeResults {\n  if (!fs.existsSync(targetGitIgnorePath)) {\n    // No gitignore in the project already, no need to merge anything into anything. I guess they\n    // are not using git :O\n    return null;\n  }\n\n  if (!fs.existsSync(sourceGitIgnorePath)) {\n    // Maybe we don't have a gitignore in the template project\n    return null;\n  }\n\n  const targetGitIgnore = fs.readFileSync(targetGitIgnorePath).toString();\n  const sourceGitIgnore = fs.readFileSync(sourceGitIgnorePath).toString();\n  const merged = mergeGitIgnoreContents(targetGitIgnore, sourceGitIgnore);\n  // Only rewrite the file if it was modified.\n  if (merged.contents) {\n    fs.writeFileSync(targetGitIgnorePath, merged.contents);\n  }\n\n  return merged;\n}\n\nconst generatedHeaderPrefix = `# @generated expo-cli`;\nexport const generatedFooterComment = `# @end expo-cli`;\n\n/**\n * Get line indexes for the generated section of a gitignore.\n *\n * @param gitIgnore\n */\nfunction getGeneratedSectionIndexes(\n  gitIgnore: string\n): { contents: string[]; start: number; end: number } {\n  const contents = gitIgnore.split('\\n');\n  const start = contents.findIndex(line => line.startsWith(generatedHeaderPrefix));\n  const end = contents.findIndex(line => line.startsWith(generatedFooterComment));\n\n  return { contents, start, end };\n}\n\n/**\n * Removes the generated section from a gitignore, returns null when nothing can be removed.\n * This sways heavily towards not removing lines unless it's certain that modifications were not made to the gitignore manually.\n *\n * @param gitIgnore\n */\nexport function removeGeneratedGitIgnoreContents(gitIgnore: string): string | null {\n  const { contents, start, end } = getGeneratedSectionIndexes(gitIgnore);\n  if (start > -1 && end > -1 && start < end) {\n    contents.splice(start, end - start + 1);\n    // TODO: We could in theory check that the contents we're removing match the hash used in the header,\n    // this would ensure that we don't accidentally remove lines that someone added or removed from the generated section.\n    return contents.join('\\n');\n  }\n  return null;\n}\n\n/**\n * Merge the contents of two gitignores together and add a generated header.\n *\n * @param targetGitIgnore contents of the existing gitignore\n * @param sourceGitIgnore contents of the extra gitignore\n */\nexport function mergeGitIgnoreContents(\n  targetGitIgnore: string,\n  sourceGitIgnore: string\n): MergeResults {\n  const header = createGeneratedHeaderComment(sourceGitIgnore);\n  if (!targetGitIgnore.includes(header)) {\n    // Ensure the old generated gitignore contents are removed.\n    const sanitizedTarget = removeGeneratedGitIgnoreContents(targetGitIgnore);\n    return {\n      contents: [\n        sanitizedTarget ?? targetGitIgnore,\n        header,\n        `# The following patterns were generated by expo-cli`,\n        ``,\n        sourceGitIgnore,\n        generatedFooterComment,\n      ].join('\\n'),\n      didMerge: true,\n      didClear: !!sanitizedTarget,\n    };\n  }\n  return { contents: targetGitIgnore, didClear: false, didMerge: false };\n}\n\nexport function createGeneratedHeaderComment(gitIgnore: string): string {\n  const hashKey = createGitIgnoreHash(getSanitizedGitIgnoreLines(gitIgnore).join('\\n'));\n\n  return `${generatedHeaderPrefix} ${hashKey}`;\n}\n\n/**\n * Normalize the contents of a gitignore to ensure that minor changes like new lines or sort order don't cause a regeneration.\n */\nexport function getSanitizedGitIgnoreLines(gitIgnore: string): string[] {\n  // filter, trim, and sort the lines.\n  return gitIgnore\n    .split('\\n')\n    .filter(v => {\n      const line = v.trim();\n      // Strip comments\n      if (line.startsWith('#')) {\n        return false;\n      }\n      return !!line;\n    })\n    .sort();\n}\n\nexport function createGitIgnoreHash(gitIgnore: string): string {\n  // this doesn't need to be secure, the shorter the better.\n  const hash = crypto.createHash('sha1').update(gitIgnore).digest('hex');\n  return `sync-${hash}`;\n}\n"],"mappings":"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"}