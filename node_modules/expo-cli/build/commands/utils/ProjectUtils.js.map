{"version":3,"file":"ProjectUtils.js","names":["findProjectRootAsync","base","previous","dir","pkg","JsonFile","readAsync","path","join","hasReactNativeUnimodules","dependencies","hasOwnProperty","hasExpo","isManaged","workflow","projectRoot","dirname","CommandError","hasExpoUpdatesInstalledAsync","pkgPath","pkgExists","fs","existsSync","getAsync","usesOldExpoUpdatesAsync","version","coercedVersion","semver","coerce","satisfies","validateGitStatusAsync","workingTreeStatus","result","spawnAsync","stdout","Log","nested","chalk","green","bold","red"],"sources":["../../../src/commands/utils/ProjectUtils.ts"],"sourcesContent":["import JsonFile from '@expo/json-file';\nimport spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport semver from 'semver';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\n\nexport async function findProjectRootAsync(\n  base: string\n): Promise<{ projectRoot: string; workflow: 'managed' | 'bare' }> {\n  let previous = null;\n  let dir = base;\n\n  do {\n    try {\n      // This will throw if there is no package.json in the directory\n      const pkg = await JsonFile.readAsync(path.join(dir, 'package.json'));\n      const hasReactNativeUnimodules = pkg.dependencies?.hasOwnProperty('react-native-unimodules');\n      const hasExpo = pkg.dependencies?.hasOwnProperty('expo');\n      const isManaged = hasExpo && !hasReactNativeUnimodules;\n      const workflow = isManaged ? 'managed' : 'bare';\n\n      return { projectRoot: dir, workflow };\n    } catch {\n      // Expected to throw if no package.json is present\n    } finally {\n      previous = dir;\n      dir = path.dirname(dir);\n    }\n  } while (dir !== previous);\n\n  throw new CommandError(\n    'NO_PROJECT',\n    'No managed or bare projects found. Please make sure you are inside a project folder.'\n  );\n}\n\n/** Returns true if `expo-updates` is in the `package.json` dependencies. */\nexport async function hasExpoUpdatesInstalledAsync(projectRoot: string): Promise<boolean> {\n  const pkgPath = path.join(projectRoot, 'package.json');\n  const pkgExists = fs.existsSync(pkgPath);\n\n  if (!pkgExists) {\n    return false;\n  }\n\n  const dependencies = await JsonFile.getAsync(pkgPath, 'dependencies', {});\n  return !!dependencies['expo-updates'];\n}\n\n// If we get here and can't find expo-updates or package.json we just assume\n// that we are not using the old expo-updates\nexport async function usesOldExpoUpdatesAsync(projectRoot: string): Promise<boolean> {\n  const pkgPath = path.join(projectRoot, 'package.json');\n  const pkgExists = fs.existsSync(pkgPath);\n\n  if (!pkgExists) {\n    return false;\n  }\n\n  const dependencies = await JsonFile.getAsync(pkgPath, 'dependencies', {});\n  if (!dependencies['expo-updates']) {\n    return false;\n  }\n\n  const version = dependencies['expo-updates'] as string;\n  const coercedVersion = semver.coerce(version);\n  if (coercedVersion && semver.satisfies(coercedVersion, '~0.1.0')) {\n    return true;\n  }\n\n  return false;\n}\n\nexport async function validateGitStatusAsync(): Promise<boolean> {\n  let workingTreeStatus = 'unknown';\n  try {\n    const result = await spawnAsync('git', ['status', '--porcelain']);\n    workingTreeStatus = result.stdout === '' ? 'clean' : 'dirty';\n  } catch {\n    // Maybe git is not installed?\n    // Maybe this project is not using git?\n  }\n\n  if (workingTreeStatus === 'clean') {\n    Log.nested(`Your git working tree is ${chalk.green('clean')}`);\n    Log.nested('To revert the changes after this command completes, you can run the following:');\n    Log.nested('  git clean --force && git reset --hard');\n    return true;\n  } else if (workingTreeStatus === 'dirty') {\n    Log.nested(`${chalk.bold('Warning!')} Your git working tree is ${chalk.red('dirty')}.`);\n    Log.nested(\n      `It's recommended to ${chalk.bold(\n        'commit all your changes before proceeding'\n      )}, so you can revert the changes made by this command if necessary.`\n    );\n  } else {\n    Log.nested(\"We couldn't find a git repository in your project directory.\");\n    Log.nested(\"It's recommended to back up your project before proceeding.\");\n  }\n\n  return false;\n}\n"],"mappings":"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"}