{"version":3,"file":"PublishUtils.js","names":["VERSION","getPublishHistoryAsync","projectRoot","options","count","isNaN","Error","user","UserManager","ensureLoggedInAsync","exp","getConfig","skipSDKVersionRequirement","api","ApiV2","clientForUser","postAsync","owner","getProjectOwner","slug","version","releaseChannel","platform","sdkVersion","runtimeVersion","setPublishToChannelAsync","publishId","_rollbackPublicationFromChannelForPlatformAsync","historyQueryResult","history","queryResult","length","secondMostRecent","nonInteractiveOptions","parent","_printAndConfirm","publicationId","revertProgress","ora","start","succeed","rollbackPublicationFromChannelAsync","restOfTheOptions","platforms","completedPlatforms","push","e","Log","error","filter","includes","channel","partialOptions","detailOptions","detail","getPublicationDetailAsync","printPublicationDetailAsync","nonInteractive","confirm","confirmAsync","message","result","raw","log","JSON","stringify","manifest","generalTableString","table","printTableJson","manifestTableString"],"sources":["../../../src/commands/utils/PublishUtils.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport { ApiV2, UserManager } from 'xdl';\n\nimport Log from '../../log';\nimport { ora } from '../../utils/ora';\nimport { confirmAsync } from '../../utils/prompts';\nimport * as table from './cli-table';\n\nexport type HistoryOptions = {\n  releaseChannel?: string;\n  count?: number;\n  platform?: 'android' | 'ios';\n  raw?: boolean;\n  sdkVersion?: string;\n  runtimeVersion?: string;\n};\n\nexport type DetailOptions = {\n  publishId?: string;\n  raw?: boolean;\n};\n\nexport type SetOptions = { releaseChannel: string; publishId: string };\n\nexport type RollbackOptions = {\n  releaseChannel: string;\n  sdkVersion: string;\n  runtimeVersion?: string;\n  platform?: 'android' | 'ios';\n  parent?: { nonInteractive?: boolean };\n};\n\nexport type Publication = {\n  fullName: string;\n  channel: string;\n  channelId: string;\n  publicationId: string;\n  appVersion: string;\n  sdkVersion: string;\n  runtimeVersion?: string;\n  publishedTime: string;\n  platform: 'android' | 'ios';\n};\n\nexport type PublicationDetail = {\n  manifest?: {\n    [key: string]: string;\n  };\n  publishedTime: string;\n  publishingUsername: string;\n  packageUsername: string;\n  packageName: string;\n  fullName: string;\n  hash: string;\n  sdkVersion: string;\n  runtimeVersion?: string;\n  s3Key: string;\n  s3Url: string;\n  abiVersion: string | null;\n  bundleUrl: string | null;\n  platform: string;\n  version: string;\n  revisionId: string;\n  channels: { [key: string]: string }[];\n  publicationId: string;\n};\n\nconst VERSION = 2;\n\nexport async function getPublishHistoryAsync(\n  projectRoot: string,\n  options: HistoryOptions\n): Promise<any> {\n  if (options.count && (isNaN(options.count) || options.count < 1 || options.count > 100)) {\n    throw new Error('-n must be a number between 1 and 100 inclusive');\n  }\n\n  // TODO(ville): handle the API result for not authenticated user instead of checking upfront\n  const user = await UserManager.ensureLoggedInAsync();\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n\n  const api = ApiV2.clientForUser(user);\n  return await api.postAsync('publish/history', {\n    owner: UserManager.getProjectOwner(user, exp),\n    slug: exp.slug,\n    version: VERSION,\n    releaseChannel: options.releaseChannel,\n    count: options.count,\n    platform: options.platform,\n    sdkVersion: options.sdkVersion,\n    runtimeVersion: options.runtimeVersion,\n  });\n}\n\nexport async function setPublishToChannelAsync(\n  projectRoot: string,\n  options: SetOptions\n): Promise<any> {\n  const user = await UserManager.ensureLoggedInAsync();\n  const api = ApiV2.clientForUser(user);\n  const exp = getConfig(projectRoot, { skipSDKVersionRequirement: true }).exp;\n  return await api.postAsync('publish/set', {\n    releaseChannel: options.releaseChannel,\n    publishId: options.publishId,\n    slug: exp.slug,\n  });\n}\n\nasync function _rollbackPublicationFromChannelForPlatformAsync(\n  projectRoot: string,\n  platform: 'android' | 'ios',\n  options: Omit<RollbackOptions, 'platform'>\n) {\n  const { releaseChannel, sdkVersion, runtimeVersion } = options;\n  // get the 2 most recent things in the channel history\n  const historyQueryResult = await getPublishHistoryAsync(projectRoot, {\n    releaseChannel,\n    platform,\n    sdkVersion,\n    runtimeVersion,\n    count: 2,\n  });\n\n  const history = historyQueryResult.queryResult as Publication[];\n  if (history.length === 0) {\n    throw new Error(\n      `There isn't anything published for release channel: ${releaseChannel}, sdk version: ${sdkVersion}, platform: ${platform}`\n    );\n  } else if (history.length === 1) {\n    throw new Error(\n      `There is only 1 publication for release channel: ${releaseChannel}, sdk version: ${sdkVersion}, platform: ${platform}. There won't be anything for users to receive if we rollback.`\n    );\n  }\n\n  // The second most recent publication in the history\n  const secondMostRecent = history[history.length - 1];\n\n  const nonInteractiveOptions = options.parent ? { parent: options.parent } : {};\n  // confirm that users will be receiving the secondMostRecent item in the Publish history\n  await _printAndConfirm(\n    projectRoot,\n    secondMostRecent.publicationId,\n    releaseChannel,\n    platform,\n    nonInteractiveOptions\n  );\n\n  // apply the revert publication to channel\n  const revertProgress = ora(\n    `${platform}: Applying a revert publication to channel ${releaseChannel}`\n  ).start();\n  await setPublishToChannelAsync(projectRoot, {\n    releaseChannel,\n    publishId: secondMostRecent.publicationId,\n  });\n  revertProgress.succeed(\n    `${platform}: Successfully applied revert publication. You can view it with \\`publish:history\\``\n  );\n}\n\nexport async function rollbackPublicationFromChannelAsync(\n  projectRoot: string,\n  options: RollbackOptions\n) {\n  const { platform, ...restOfTheOptions } = options;\n\n  if (platform) {\n    return await _rollbackPublicationFromChannelForPlatformAsync(\n      projectRoot,\n      platform,\n      restOfTheOptions\n    );\n  }\n\n  const platforms = ['android', 'ios'] as ('android' | 'ios')[];\n  const completedPlatforms = [] as ('android' | 'ios')[];\n  try {\n    for (const platform of platforms) {\n      await _rollbackPublicationFromChannelForPlatformAsync(\n        projectRoot,\n        platform,\n        restOfTheOptions\n      );\n      completedPlatforms.push(platform);\n    }\n  } catch (e: any) {\n    if (completedPlatforms.length > 0) {\n      Log.error(\n        `The platforms ${platforms.filter(\n          platform => !completedPlatforms.includes(platform)\n        )} have not been rolled back. You can complete the missing platforms by running \\`expo publish:rollback\\` with the --platform flag`\n      );\n    }\n    throw e;\n  }\n}\n\nasync function _printAndConfirm(\n  projectRoot: string,\n  publicationId: string,\n  channel: string,\n  platform: string,\n  partialOptions: { parent?: { nonInteractive?: boolean } }\n): Promise<void> {\n  const detailOptions = {\n    publishId: publicationId,\n  };\n  const detail = await getPublicationDetailAsync(projectRoot, detailOptions);\n  await printPublicationDetailAsync(detail, detailOptions);\n\n  if (partialOptions.parent && partialOptions.parent.nonInteractive) {\n    return;\n  }\n  const confirm = await confirmAsync({\n    message: `${platform}: Users on the '${channel}' channel will receive the above publication as a result of the rollback.`,\n  });\n\n  if (!confirm) {\n    throw new Error(`You can run 'publish:set' to send the desired publication to users`);\n  }\n}\n\nexport async function getPublicationDetailAsync(\n  projectRoot: string,\n  options: DetailOptions\n): Promise<PublicationDetail> {\n  // TODO(ville): handle the API result for not authenticated user instead of checking upfront\n  const user = await UserManager.ensureLoggedInAsync();\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n\n  const api = ApiV2.clientForUser(user);\n  const result = await api.postAsync('publish/details', {\n    owner: UserManager.getProjectOwner(user, exp),\n    publishId: options.publishId,\n    slug: exp.slug,\n  });\n\n  if (!result.queryResult) {\n    throw new Error('No records found matching your query.');\n  }\n\n  return result.queryResult;\n}\n\nexport async function printPublicationDetailAsync(\n  detail: PublicationDetail,\n  options: DetailOptions\n) {\n  if (options.raw) {\n    Log.log(JSON.stringify(detail));\n    return;\n  }\n\n  const manifest = detail.manifest;\n  delete detail.manifest;\n\n  // Print general release info\n  const generalTableString = table.printTableJson(detail, 'Release Description');\n  Log.log(generalTableString);\n\n  if (manifest) {\n    // Print manifest info\n    const manifestTableString = table.printTableJson(manifest, 'Manifest Details');\n    Log.log(manifestTableString);\n  }\n}\n"],"mappings":"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"}