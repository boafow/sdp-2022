{"version":3,"file":"cli-table.js","names":["printTableJsonArray","headers","jsonArray","colWidths","table","CliTable","head","forEach","json","push","map","header","toString","VERTICAL_CELL_WIDTH","printTableJson","header1","header2","Object","entries","key","value","JSON","stringify","String","replace","RegExp"],"sources":["../../../src/commands/utils/cli-table.ts"],"sourcesContent":["import { JSONObject } from '@expo/json-file';\nimport CliTable, { CellValue } from 'cli-table3';\n\nexport function printTableJsonArray(\n  headers: string[],\n  jsonArray: { [key: string]: CellValue }[],\n  colWidths: number[]\n): string {\n  const table = new CliTable({\n    head: headers,\n    colWidths,\n  });\n\n  jsonArray.forEach(json => {\n    table.push(headers.map(header => (json[header] ? json[header] : '')));\n  });\n\n  return table.toString();\n}\n\nconst VERTICAL_CELL_WIDTH = 80;\nexport function printTableJson(json: JSONObject, header1?: string, header2?: string): string {\n  const table = new CliTable();\n  if (header1 || header2) {\n    header1 = header1 ? header1 : '';\n    header2 = header2 ? header2 : '';\n    table.push({ [header1]: header2 });\n  }\n  Object.entries(json).forEach(([key, value]) => {\n    // check if value is a JSON\n    if (typeof value === 'object') {\n      value = JSON.stringify(value);\n    } else {\n      value = String(value);\n    }\n    // Add newline every 80 chars\n    key = key.replace(new RegExp('(.{' + VERTICAL_CELL_WIDTH + '})', 'g'), '$1\\n');\n    value = value.replace(new RegExp('(.{' + VERTICAL_CELL_WIDTH + '})', 'g'), '$1\\n');\n    table.push({ [key]: value });\n  });\n\n  return table.toString();\n}\n"],"mappings":";;;;;;;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAiD;AAE1C,SAASA,mBAAmB,CACjCC,OAAiB,EACjBC,SAAyC,EACzCC,SAAmB,EACX;EACR,MAAMC,KAAK,GAAG,KAAIC,mBAAQ,EAAC;IACzBC,IAAI,EAAEL,OAAO;IACbE;EACF,CAAC,CAAC;EAEFD,SAAS,CAACK,OAAO,CAACC,IAAI,IAAI;IACxBJ,KAAK,CAACK,IAAI,CAACR,OAAO,CAACS,GAAG,CAACC,MAAM,IAAKH,IAAI,CAACG,MAAM,CAAC,GAAGH,IAAI,CAACG,MAAM,CAAC,GAAG,EAAG,CAAC,CAAC;EACvE,CAAC,CAAC;EAEF,OAAOP,KAAK,CAACQ,QAAQ,EAAE;AACzB;AAEA,MAAMC,mBAAmB,GAAG,EAAE;AACvB,SAASC,cAAc,CAACN,IAAgB,EAAEO,OAAgB,EAAEC,OAAgB,EAAU;EAC3F,MAAMZ,KAAK,GAAG,KAAIC,mBAAQ,GAAE;EAC5B,IAAIU,OAAO,IAAIC,OAAO,EAAE;IACtBD,OAAO,GAAGA,OAAO,GAAGA,OAAO,GAAG,EAAE;IAChCC,OAAO,GAAGA,OAAO,GAAGA,OAAO,GAAG,EAAE;IAChCZ,KAAK,CAACK,IAAI,CAAC;MAAE,CAACM,OAAO,GAAGC;IAAQ,CAAC,CAAC;EACpC;EACAC,MAAM,CAACC,OAAO,CAACV,IAAI,CAAC,CAACD,OAAO,CAAC,CAAC,CAACY,GAAG,EAAEC,KAAK,CAAC,KAAK;IAC7C;IACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7BA,KAAK,GAAGC,IAAI,CAACC,SAAS,CAACF,KAAK,CAAC;IAC/B,CAAC,MAAM;MACLA,KAAK,GAAGG,MAAM,CAACH,KAAK,CAAC;IACvB;IACA;IACAD,GAAG,GAAGA,GAAG,CAACK,OAAO,CAAC,IAAIC,MAAM,CAAC,KAAK,GAAGZ,mBAAmB,GAAG,IAAI,EAAE,GAAG,CAAC,EAAE,MAAM,CAAC;IAC9EO,KAAK,GAAGA,KAAK,CAACI,OAAO,CAAC,IAAIC,MAAM,CAAC,KAAK,GAAGZ,mBAAmB,GAAG,IAAI,EAAE,GAAG,CAAC,EAAE,MAAM,CAAC;IAClFT,KAAK,CAACK,IAAI,CAAC;MAAE,CAACU,GAAG,GAAGC;IAAM,CAAC,CAAC;EAC9B,CAAC,CAAC;EAEF,OAAOhB,KAAK,CAACQ,QAAQ,EAAE;AACzB"}