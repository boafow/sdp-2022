{"version":3,"file":"ensureTypeScriptSetup.js","names":["ensureTypeScriptSetupAsync","projectRoot","isTypeScriptSetupDisabled","Log","log","chalk","dim","tsConfigPath","path","join","intent","shouldSetupTypeScriptAsync","ensureRequiredDependenciesAsync","program","nonInteractive","updateTSConfigAsync","isBootstrapping","hasTSConfig","content","fs","readFile","encoding","then","txt","trim","isBlankConfig","typescriptFile","profileMethod","queryFirstProjectTypeScriptFileAsync","getSDKVersionsAsync","exp","getConfig","skipSDKVersionRequirement","sdkVersion","sdkVersions","Versions","releasedSdkVersionsAsync","skipPrompt","resolutions","missing","collectMissingPackages","length","typescript","versions","relatedPackages","pkg","version","readableMissingPackages","map","p","isYarn","PackageManager","isUsingYarn","title","confirmAsync","message","wrapAnsi","cyan","process","stdout","columns","initial","installPackagesAsync","devPackages","col","installCommand","disableMessage","solution","bold","reset","CommandError","packageManager","createForProject","yarn","silent","isDebug","packagesStr","newLine","installingPackageStep","logNewSection","addDevAsync","e","fail","succeed"],"sources":["../../../../src/commands/utils/typescript/ensureTypeScriptSetup.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport * as PackageManager from '@expo/package-manager';\nimport chalk from 'chalk';\nimport program from 'commander';\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\nimport wrapAnsi from 'wrap-ansi';\nimport { Versions } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport Log from '../../../log';\nimport { logNewSection } from '../../../utils/ora';\nimport { confirmAsync } from '../../../utils/prompts';\nimport { profileMethod } from '../profileMethod';\nimport {\n  collectMissingPackages,\n  hasTSConfig,\n  queryFirstProjectTypeScriptFileAsync,\n} from './resolveModules';\nimport { isTypeScriptSetupDisabled, updateTSConfigAsync } from './updateTSConfig';\n\nexport async function ensureTypeScriptSetupAsync(projectRoot: string): Promise<void> {\n  if (isTypeScriptSetupDisabled) {\n    Log.log(chalk.dim('\\u203A Skipping TypeScript verification'));\n    return;\n  }\n\n  const tsConfigPath = path.join(projectRoot, 'tsconfig.json');\n\n  // Ensure the project is TypeScript before continuing.\n  const intent = await shouldSetupTypeScriptAsync(projectRoot);\n  if (!intent) {\n    return;\n  }\n\n  // Ensure TypeScript packages are installed\n  await ensureRequiredDependenciesAsync(\n    projectRoot,\n    // Don't prompt in CI\n    program.nonInteractive\n  );\n\n  // Update the config\n  await updateTSConfigAsync({ projectRoot, tsConfigPath, isBootstrapping: intent.isBootstrapping });\n}\n\nexport async function shouldSetupTypeScriptAsync(\n  projectRoot: string\n): Promise<{ isBootstrapping: boolean } | null> {\n  const tsConfigPath = await hasTSConfig(projectRoot);\n\n  // Enable TS setup if the project has a `tsconfig.json`\n  if (tsConfigPath) {\n    const content = await fs.readFile(tsConfigPath, { encoding: 'utf8' }).then(\n      txt => txt.trim(),\n      () => null\n    );\n    const isBlankConfig = content === '' || content === '{}';\n    return { isBootstrapping: isBlankConfig };\n  }\n  // This is a somewhat heavy check in larger projects.\n  // Test that this is reasonably paced by running expo start in `expo/apps/native-component-list`\n  const typescriptFile = await profileMethod(queryFirstProjectTypeScriptFileAsync)(projectRoot);\n  if (typescriptFile) {\n    return { isBootstrapping: true };\n  }\n\n  return null;\n}\n\nasync function getSDKVersionsAsync(projectRoot: string): Promise<Versions.SDKVersion | null> {\n  try {\n    const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n    if (exp.sdkVersion) {\n      const sdkVersions = await Versions.releasedSdkVersionsAsync();\n      return sdkVersions[exp.sdkVersion] ?? null;\n    }\n  } catch {\n    // This is a convenience method and we should avoid making this halt the process.\n  }\n  return null;\n}\n\nasync function ensureRequiredDependenciesAsync(\n  projectRoot: string,\n  skipPrompt: boolean = false\n): Promise<string> {\n  const { resolutions, missing } = collectMissingPackages(projectRoot);\n  if (!missing.length) {\n    return resolutions.typescript!;\n  }\n\n  // Ensure the versions are right for the SDK that the project is currently using.\n  const versions = await getSDKVersionsAsync(projectRoot);\n  if (versions?.relatedPackages) {\n    for (const pkg of missing) {\n      if (pkg.pkg in versions.relatedPackages) {\n        pkg.version = versions.relatedPackages[pkg.pkg];\n      }\n    }\n  }\n\n  // Prompt to install or bail out...\n  const readableMissingPackages = missing.map(p => p.pkg).join(', ');\n\n  const isYarn = PackageManager.isUsingYarn(projectRoot);\n\n  let title = `It looks like you're trying to use TypeScript but don't have the required dependencies installed.`;\n\n  if (!skipPrompt) {\n    if (\n      await confirmAsync({\n        message: wrapAnsi(\n          title + ` Would you like to install ${chalk.cyan(readableMissingPackages)}?`,\n          // This message is a bit too long, so wrap it to fit smaller terminals\n          process.stdout.columns || 80\n        ),\n        initial: true,\n      })\n    ) {\n      await installPackagesAsync(projectRoot, {\n        isYarn,\n        devPackages: missing.map(({ pkg, version }) => {\n          if (version) {\n            return [pkg, version].join('@');\n          }\n          return pkg;\n        }),\n      });\n      // Try again but skip prompting twice.\n      return await ensureRequiredDependenciesAsync(projectRoot, true);\n    }\n\n    // Reset the title so it doesn't print twice in interactive mode.\n    title = '';\n  } else {\n    title += '\\n\\n';\n  }\n\n  const col = process.stdout.columns || 80;\n\n  const installCommand =\n    (isYarn ? 'yarn add --dev' : 'npm install --save-dev') +\n    ' ' +\n    missing\n      .map(({ pkg, version }) => {\n        if (version) {\n          return [pkg, version].join('@');\n        }\n        return pkg;\n      })\n      .join(' ');\n\n  let disableMessage =\n    \"If you're not using TypeScript, please remove the TypeScript files from your project\";\n\n  if (await hasTSConfig(projectRoot)) {\n    disableMessage += ` and delete the tsconfig.json.`;\n  } else {\n    disableMessage += '.';\n  }\n\n  const solution = `Please install ${chalk.bold(\n    readableMissingPackages\n  )} by running:\\n\\n  ${chalk.reset.bold(installCommand)}\\n\\n`;\n\n  // This prevents users from starting a misconfigured JS or TS project by default.\n  throw new CommandError(wrapAnsi(title + solution + disableMessage + '\\n', col));\n}\n\nasync function installPackagesAsync(\n  projectRoot: string,\n  { isYarn, devPackages }: { isYarn: boolean; devPackages: string[] }\n) {\n  const packageManager = PackageManager.createForProject(projectRoot, {\n    yarn: isYarn,\n    log: Log.log,\n    silent: !Log.isDebug,\n  });\n\n  const packagesStr = chalk.bold(devPackages.join(', '));\n  Log.newLine();\n  const installingPackageStep = logNewSection(`Installing ${packagesStr}`);\n  try {\n    await packageManager.addDevAsync(...devPackages);\n  } catch (e: any) {\n    installingPackageStep.fail(`Failed to install ${packagesStr} with error: ${e.message}`);\n    throw e;\n  }\n  installingPackageStep.succeed(`Installed ${packagesStr}`);\n}\n"],"mappings":"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"}