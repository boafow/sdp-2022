{"version":3,"file":"webhooksAsync.js","names":["actionAsync","projectRoot","experienceName","project","client","setupAsync","webhooks","getAsync","id","length","table","CliTable","head","push","map","hook","url","event","Log","log","toString","chalk","bold"],"sources":["../../../src/commands/webhooks/webhooksAsync.ts"],"sourcesContent":["import chalk from 'chalk';\nimport CliTable from 'cli-table3';\n\nimport Log from '../../log';\nimport { setupAsync, WebhookEvent } from './utils';\n\ntype Webhook = {\n  id: string;\n  url: string;\n  event: WebhookEvent;\n  secret?: string;\n};\n\nexport async function actionAsync(projectRoot: string) {\n  const { experienceName, project, client } = await setupAsync(projectRoot);\n\n  const webhooks = await client.getAsync(`projects/${project.id}/webhooks`);\n  if (webhooks.length) {\n    const table = new CliTable({ head: ['Webhook ID', 'URL', 'Event'] });\n    table.push(...webhooks.map((hook: Webhook) => [hook.id, hook.url, hook.event]));\n    Log.log(table.toString());\n  } else {\n    Log.log(`${chalk.bold(experienceName)} has no webhooks.`);\n    Log.log('Use `expo webhooks:add` to add one.');\n  }\n}\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAmD;AAS5C,eAAeA,WAAW,CAACC,WAAmB,EAAE;EACrD,MAAM;IAAEC,cAAc;IAAEC,OAAO;IAAEC;EAAO,CAAC,GAAG,MAAM,IAAAC,mBAAU,EAACJ,WAAW,CAAC;EAEzE,MAAMK,QAAQ,GAAG,MAAMF,MAAM,CAACG,QAAQ,CAAE,YAAWJ,OAAO,CAACK,EAAG,WAAU,CAAC;EACzE,IAAIF,QAAQ,CAACG,MAAM,EAAE;IACnB,MAAMC,KAAK,GAAG,KAAIC,mBAAQ,EAAC;MAAEC,IAAI,EAAE,CAAC,YAAY,EAAE,KAAK,EAAE,OAAO;IAAE,CAAC,CAAC;IACpEF,KAAK,CAACG,IAAI,CAAC,GAAGP,QAAQ,CAACQ,GAAG,CAAEC,IAAa,IAAK,CAACA,IAAI,CAACP,EAAE,EAAEO,IAAI,CAACC,GAAG,EAAED,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC;IAC/EC,cAAG,CAACC,GAAG,CAACT,KAAK,CAACU,QAAQ,EAAE,CAAC;EAC3B,CAAC,MAAM;IACLF,cAAG,CAACC,GAAG,CAAE,GAAEE,gBAAK,CAACC,IAAI,CAACpB,cAAc,CAAE,mBAAkB,CAAC;IACzDgB,cAAG,CAACC,GAAG,CAAC,qCAAqC,CAAC;EAChD;AACF"}