{"version":3,"file":"IosApi.js","names":["getAppLookupParams","experienceName","bundleIdentifier","matchedExperienceName","match","assert","length","accountName","projectName","IosApi","constructor","api","client","ApiClient","getAllCredentials","isPrefetched","credentials","getAllCredentialsApi","appCredentials","keyBy","cred","userCredentials","String","id","Object","values","getDistCert","appLookupParams","ensureAppCredentials","appCredentialsIndex","getAppCredentialsCacheIndex","distCredentialsId","distCert","createDistCert","createDistCertApi","refetchUserCredentials","type","updateDistCert","updateDistCertApi","deleteDistCert","deleteDistCertApi","removeUserCredentialFromCache","useDistCert","userCredentialsId","useDistCertApi","refetchAppCredentials","createPushKey","createPushKeyApi","pushKey","updatePushKey","updatePushKeyApi","deletePushKey","deletePushKeyApi","getPushKey","pushCredentialsId","usePushKey","usePushKeyApi","getPushCert","getAppCredentials","pushId","pushP12","pushPassword","deletePushCert","deletePushCertApi","getProvisioningProfile","provisioningProfile","pick","updateProvisioningProfile","updateProvisioningProfileApi","deleteProvisioningProfile","deleteProvisioningProfileApi","omit","projectFullName","entries","forEach","key","val","getUserCredentialsByIdApi","app","data","getAllCredentialsForAppApi","pushCredentials","distCredentials"],"sources":["../../../src/credentials/api/IosApi.ts"],"sourcesContent":["import assert from 'assert';\nimport keyBy from 'lodash/keyBy';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport { ApiV2 } from 'xdl';\n\nimport * as appleApi from '../../appleApi';\nimport {\n  IosAppCredentials,\n  IosCredentials,\n  IosDistCredentials,\n  IosPushCredentials,\n} from '../credentials';\nimport ApiClient from './IosApiV2Wrapper';\n\nexport interface AppLookupParams {\n  accountName: string;\n  projectName: string;\n  bundleIdentifier: string;\n}\n\nexport function getAppLookupParams(experienceName: string, bundleIdentifier: string) {\n  const matchedExperienceName = experienceName.match(/@(.+)\\/(.+)/);\n  assert(matchedExperienceName && matchedExperienceName.length >= 3, 'invalid experience name');\n  return {\n    accountName: matchedExperienceName[1],\n    projectName: matchedExperienceName[2],\n    bundleIdentifier,\n  };\n}\n\n// appCredentials are identified by `${projectFullName} ${bundleIdentifier}` (see getAppCredentialsCacheIndex method)\n// userCredentials are identified by id (string or numeric depending on API)\n//\n// Expected behaviour of cache (internals)\n//\n// - when isPrefetched[accountName] true assume everything is synced for that account\n// - when credentials[accountName].appCredentials[experienceNameBundleIdentifier] is truthy assume that user and app credentials for that app are synced\n// - when accessing user or app credentials identified by AppLookupParams fetch all credentials for that app (user and app credentials)\n// - when updating userCredentials refetch only userCredentials\n// - when deleting userCredentials modify prefetched appCredentials without calling api\n// - when updating provisioningProfile refetch all credentials for that app (user and app credentials)\n// - when deleting provisioningProfile modify appCredentials in cache\n// - when deleting pushCert refetch all credentials for app (app + user)\n//\n//\ninterface CredentialsCache {\n  [accountName: string]: {\n    appCredentials: {\n      [experienceNameBundleIdentifier: string]: IosAppCredentials;\n    };\n    userCredentials: {\n      [id: string]: IosDistCredentials | IosPushCredentials;\n    };\n  };\n}\n\nexport default class IosApi {\n  client: ApiClient;\n  credentials: CredentialsCache = {};\n  isPrefetched: { [accountName: string]: boolean } = {};\n\n  constructor(api: ApiV2) {\n    this.client = new ApiClient(api);\n  }\n\n  public async getAllCredentials(accountName: string): Promise<IosCredentials> {\n    if (!this.isPrefetched[accountName]) {\n      const credentials = await this.client.getAllCredentialsApi(accountName);\n      this.credentials[accountName] = {\n        appCredentials: keyBy(\n          credentials.appCredentials,\n          cred => `${cred.experienceName} ${cred.bundleIdentifier}`\n        ),\n        userCredentials: keyBy(credentials.userCredentials, cred => String(cred.id)),\n      };\n      this.isPrefetched[accountName] = true;\n    }\n    return {\n      appCredentials: Object.values(this.credentials[accountName]?.appCredentials ?? {}),\n      userCredentials: Object.values(this.credentials[accountName]?.userCredentials ?? {}),\n    };\n  }\n\n  public async getDistCert(appLookupParams: AppLookupParams): Promise<IosDistCredentials | null> {\n    await this.ensureAppCredentials(appLookupParams);\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    const appCredentials = this.credentials[accountName]?.appCredentials?.[appCredentialsIndex];\n    if (!appCredentials || !appCredentials.distCredentialsId) {\n      return null;\n    }\n\n    const distCert = this.credentials[accountName]?.userCredentials?.[\n      appCredentials.distCredentialsId\n    ] as IosDistCredentials | null;\n    return distCert ?? null;\n  }\n\n  public async createDistCert(\n    accountName: string,\n    credentials: appleApi.DistCert\n  ): Promise<IosDistCredentials> {\n    const id = await this.client.createDistCertApi(accountName, credentials);\n\n    // refetching because www might add some fields (e.g. certSerialNumber)\n    await this.refetchUserCredentials(id, accountName);\n\n    const distCert = this.credentials[accountName]?.userCredentials?.[String(id)];\n    assert(id && distCert, 'distribution certificate does not exists');\n    assert(distCert.type === 'dist-cert', 'wrong type of user credential');\n    return distCert as IosDistCredentials;\n  }\n\n  public async updateDistCert(\n    id: number,\n    accountName: string,\n    credentials: appleApi.DistCert\n  ): Promise<IosDistCredentials> {\n    await this.client.updateDistCertApi(id, accountName, credentials);\n\n    // refetching because www might add some fields (e.g. certSerialNumber)\n    await this.refetchUserCredentials(id, accountName);\n\n    const distCert = this.credentials[accountName]?.userCredentials[String(id)];\n    assert(distCert, 'distribution certificate does not exists');\n    assert(distCert.type === 'dist-cert', 'wrong type of user credential');\n    return distCert as IosDistCredentials;\n  }\n\n  public async deleteDistCert(id: number, accountName: string): Promise<void> {\n    await this.client.deleteDistCertApi(id, accountName);\n    await this.removeUserCredentialFromCache(id, accountName);\n  }\n\n  public async useDistCert(\n    appLookupParams: AppLookupParams,\n    userCredentialsId: number\n  ): Promise<void> {\n    await this.client.useDistCertApi(appLookupParams, userCredentialsId);\n    await this.refetchAppCredentials(appLookupParams);\n  }\n\n  public async createPushKey(\n    accountName: string,\n    credentials: appleApi.PushKey\n  ): Promise<IosPushCredentials> {\n    const id = await this.client.createPushKeyApi(accountName, credentials);\n\n    await this.refetchUserCredentials(id, accountName);\n\n    const pushKey = this.credentials[accountName]?.userCredentials?.[String(id)];\n    assert(id && pushKey, 'push key does not exists');\n    assert(pushKey.type === 'push-key', 'wrong type of user credentials');\n    return pushKey;\n  }\n\n  public async updatePushKey(\n    id: number,\n    accountName: string,\n    credentials: appleApi.PushKey\n  ): Promise<IosPushCredentials> {\n    await this.client.updatePushKeyApi(id, accountName, credentials);\n\n    await this.refetchUserCredentials(id, accountName);\n\n    const pushKey = this.credentials[accountName]?.userCredentials?.[String(id)];\n    assert(id && pushKey, 'push key does not exists');\n    assert(pushKey.type === 'push-key', 'wrong type of user credentials');\n    return pushKey;\n  }\n\n  public async deletePushKey(id: number, accountName: string) {\n    await this.client.deletePushKeyApi(id, accountName);\n    await this.removeUserCredentialFromCache(id, accountName);\n  }\n\n  public async getPushKey(appLookupParams: AppLookupParams): Promise<IosPushCredentials | null> {\n    await this.ensureAppCredentials(appLookupParams);\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    const appCredentials = this.credentials[accountName]?.appCredentials?.[appCredentialsIndex];\n    if (!appCredentials || !appCredentials.pushCredentialsId) {\n      return null;\n    }\n\n    const pushKey = this.credentials[accountName]?.userCredentials?.[\n      appCredentials.pushCredentialsId\n    ] as IosPushCredentials | null;\n    return pushKey ?? null;\n  }\n\n  public async usePushKey(\n    appLookupParams: AppLookupParams,\n    userCredentialsId: number\n  ): Promise<void> {\n    await this.client.usePushKeyApi(appLookupParams, userCredentialsId);\n    await this.refetchAppCredentials(appLookupParams);\n  }\n\n  public async getPushCert(\n    appLookupParams: AppLookupParams\n  ): Promise<{ pushId: string; pushP12: string; pushPassword: string } | null> {\n    const appCredentials = await this.getAppCredentials(appLookupParams);\n    const pushId = appCredentials?.credentials?.pushId;\n    const pushP12 = appCredentials?.credentials?.pushP12;\n    const pushPassword = appCredentials?.credentials?.pushPassword;\n    if (!pushId || !pushP12 || !pushPassword) {\n      return null;\n    }\n    return { pushId, pushP12, pushPassword };\n  }\n\n  public async deletePushCert(appLookupParams: AppLookupParams): Promise<void> {\n    await this.client.deletePushCertApi(appLookupParams);\n    await this.refetchAppCredentials(appLookupParams);\n  }\n\n  public async getAppCredentials(appLookupParams: AppLookupParams): Promise<IosAppCredentials> {\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    await this.ensureAppCredentials(appLookupParams);\n    return this.credentials[accountName]?.appCredentials?.[appCredentialsIndex];\n  }\n\n  public async getProvisioningProfile(\n    appLookupParams: AppLookupParams\n  ): Promise<appleApi.ProvisioningProfile | null> {\n    const appCredentials = await this.getAppCredentials(appLookupParams);\n    const provisioningProfile = appCredentials?.credentials?.provisioningProfile;\n    if (!provisioningProfile) {\n      return null;\n    }\n    return pick(appCredentials.credentials, [\n      'provisioningProfile',\n      'provisioningProfileId',\n      'teamId',\n      'teamName',\n    ]) as appleApi.ProvisioningProfile;\n  }\n\n  public async updateProvisioningProfile(\n    appLookupParams: AppLookupParams,\n    provisioningProfile: appleApi.ProvisioningProfile\n  ): Promise<appleApi.ProvisioningProfile> {\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    await this.client.updateProvisioningProfileApi(appLookupParams, provisioningProfile);\n    await this.refetchAppCredentials(appLookupParams);\n    return pick(this.credentials[accountName]?.appCredentials?.[appCredentialsIndex]?.credentials, [\n      'provisioningProfile',\n      'provisioningProfileId',\n      'teamId',\n      'teamName',\n    ]) as appleApi.ProvisioningProfile;\n  }\n\n  public async deleteProvisioningProfile(appLookupParams: AppLookupParams): Promise<void> {\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    await this.client.deleteProvisioningProfileApi(appLookupParams);\n    const appCredentials = this.credentials?.[accountName]?.appCredentials?.[appCredentialsIndex];\n    if (appCredentials?.credentials) {\n      // teamId should still be there because it might be part of push cert definition\n      appCredentials.credentials = omit(appCredentials.credentials, [\n        'provisioningProfile',\n        'provisioningProfileId',\n      ]);\n    }\n  }\n\n  private getAppCredentialsCacheIndex(appLookupParams: AppLookupParams): string {\n    const { accountName, projectName, bundleIdentifier } = appLookupParams;\n    const projectFullName = `@${accountName}/${projectName}`;\n    return `${projectFullName} ${bundleIdentifier}`;\n  }\n\n  private removeUserCredentialFromCache(id: number, accountName: string): void {\n    if (this.credentials[accountName]?.userCredentials?.[String(id)]) {\n      delete this.credentials[accountName].userCredentials[String(id)];\n    }\n    const appCredentials = this.credentials[accountName]?.appCredentials;\n    if (appCredentials) {\n      Object.entries(appCredentials).forEach(([key, val]) => {\n        if (val.distCredentialsId === id) {\n          delete appCredentials[key].distCredentialsId;\n        }\n        if (val.pushCredentialsId === id) {\n          delete appCredentials[key].pushCredentialsId;\n        }\n      });\n    }\n  }\n\n  // ensures that credentials are fetched from the server if they exists\n  // if there is no credentials on server for specific app this function should still succeed.\n  private async ensureAppCredentials(appLookupParams: AppLookupParams): Promise<void> {\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    if (\n      this.isPrefetched[accountName] ||\n      this.credentials?.[accountName]?.appCredentials?.[appCredentialsIndex]\n    ) {\n      return;\n    }\n    await this.refetchAppCredentials(appLookupParams);\n  }\n\n  private async refetchUserCredentials(id: number, accountName: string): Promise<void> {\n    const userCredentials = await this.client.getUserCredentialsByIdApi(id, accountName);\n    if (!userCredentials || !userCredentials.id) {\n      return;\n    }\n    this.credentials[accountName] = {\n      ...this.credentials[accountName],\n      userCredentials: {\n        ...this.credentials[accountName]?.userCredentials,\n        [String(id)]: userCredentials,\n      },\n    };\n  }\n\n  private async refetchAppCredentials(app: AppLookupParams): Promise<void> {\n    const { accountName } = app;\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(app);\n    const data = await this.client.getAllCredentialsForAppApi(app);\n    if (!data) {\n      return;\n    }\n    this.credentials[accountName] = {\n      appCredentials: {\n        ...this.credentials[accountName]?.appCredentials,\n        [appCredentialsIndex]: omit(data, [\n          'pushCredentials',\n          'distCredentials',\n        ]) as IosAppCredentials,\n      },\n      userCredentials: {\n        ...this.credentials[accountName]?.userCredentials,\n        ...(data.pushCredentialsId\n          ? {\n              [String(data.pushCredentialsId)]: {\n                ...data.pushCredentials,\n                id: data.pushCredentialsId,\n                type: 'push-key',\n              },\n            }\n          : {}),\n        ...(data.distCredentialsId\n          ? {\n              [String(data.distCredentialsId)]: {\n                ...data.distCredentials,\n                id: data.distCredentialsId,\n                type: 'dist-cert',\n              },\n            }\n          : {}),\n      },\n    };\n  }\n}\n"],"mappings":"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"}