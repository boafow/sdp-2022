{"version":3,"file":"IosDistCert.js","names":["APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR","chalk","underline","CreateIosDist","constructor","accountName","create","ctx","newDistCert","provideOrGenerate","ios","createDistCert","open","distCert","Log","log","green","displayIosUserCredentials","nonInteractive","userProvided","promptForDistCert","isValid","validateDistributionCertificate","generateDistCert","RemoveIosDist","shouldRevoke","selected","selectDistCertFromList","removeSpecific","credentials","getAllCredentials","apps","appCredentials","filter","cred","distCredentialsId","id","appsList","map","appCred","experienceName","join","confirm","confirmAsync","message","deleteDistCert","certId","revoke","ensureAppleCtx","DistCertManager","appleCtx","appLookupParams","getAppLookupParams","bundleIdentifier","getProvisioningProfile","view","RemoveProvisioningProfile","UpdateIosDist","updateSpecific","updated","userCredentials","find","i","length","CommandError","updateDistCert","UseExistingDistributionCert","app","filterInvalid","useDistCert","projectName","CreateOrReuseDistributionCert","assignDistCert","userCredentialsId","user","Error","existingCertificates","getValidDistCerts","autoselectedCertificate","formatDistCert","limit","Infinity","_createOrReuse","choices","title","value","question","type","name","optionsPerPage","action","prompt","iosCredentials","distCerts","hasAppleCtx","yellow","distCertManager","certInfoFromApple","list","validCerts","filterRevokedDistributionCerts","sortByExpiryDesc","getValidityStatus","validDistCerts","includes","options","warn","entry","index","credentialsIndex","formatDistCertFromApple","appleInfo","joinApps","usedByString","gray","status","expires","created","ownerName","serialNumber","expiresDate","dateformat","Date","createdDate","ownerId","validityStatus","distCertSerialNumber","PKCS12Utils","findP12CertSerialNumber","certP12","certPassword","undefined","red","validityText","teamId","manager","e","code","certs","usedByExpo","cert","reduce","acc","here","terminalLink","grey","certInfo","_getRequiredQuestions","requiredQuestions","distCertSchema","required","q","_ensureDistCert","partialCert","team","isDistCert","askForUserProvided","_getDistCertWithSerial","error","distributionCert","spinner","ora","start","validDistributionCerts","isValidCert","successMsg","succeed","failureMsg","fail","distributionCerts","validCertSerialsOnAppleServer","Math","floor","now","sort","certA","certB","certAInfo","certAExpiry","Number","NEGATIVE_INFINITY","certBInfo","certBExpiry","getDistCertFromParams","builderOptions","distP12Path","process","env","EXPO_IOS_DIST_P12_PASSWORD","fs","readFile","useDistCertFromParams","iosDistCredentials"],"sources":["../../../src/credentials/views/IosDistCert.ts"],"sourcesContent":["import chalk from 'chalk';\nimport dateformat from 'dateformat';\nimport fs from 'fs-extra';\nimport terminalLink from 'terminal-link';\nimport { PKCS12Utils } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport { DistCert, DistCertInfo, DistCertManager, isDistCert } from '../../appleApi';\nimport Log from '../../log';\nimport { ora } from '../../utils/ora';\nimport prompt, { confirmAsync, Question } from '../../utils/prompts';\nimport { displayIosUserCredentials } from '../actions/list';\nimport { askForUserProvided, CredentialSchema } from '../actions/promptForCredentials';\nimport { AppLookupParams, getAppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport { distCertSchema, IosCredentials, IosDistCredentials } from '../credentials';\nimport { RemoveProvisioningProfile } from './IosProvisioningProfile';\n\nconst APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR = `\nYou can have only ${chalk.underline(\n  'three'\n)} Apple Distribution Certificates generated on your Apple Developer account.\nPlease revoke the old ones or reuse existing from your other apps.\nPlease remember that Apple Distribution Certificates are not application specific!\n`;\n\nexport class CreateIosDist implements IView {\n  constructor(private accountName: string) {}\n\n  async create(ctx: Context): Promise<IosDistCredentials> {\n    const newDistCert = await this.provideOrGenerate(ctx);\n    return await ctx.ios.createDistCert(this.accountName, newDistCert);\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    const distCert = await this.create(ctx);\n\n    Log.log(chalk.green('Successfully created Distribution Certificate\\n'));\n    displayIosUserCredentials(distCert);\n    Log.log();\n    return null;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<DistCert> {\n    if (!ctx.nonInteractive) {\n      const userProvided = await promptForDistCert(ctx);\n      if (userProvided) {\n        const isValid = await validateDistributionCertificate(ctx, userProvided);\n        return isValid ? userProvided : await this.provideOrGenerate(ctx);\n      }\n    }\n    return await generateDistCert(ctx, this.accountName);\n  }\n}\n\nexport class RemoveIosDist implements IView {\n  constructor(private accountName: string, private shouldRevoke: boolean = false) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    const selected = await selectDistCertFromList(ctx, this.accountName);\n    if (selected) {\n      await this.removeSpecific(ctx, selected);\n      Log.log(chalk.green('Successfully removed Distribution Certificate\\n'));\n    }\n    return null;\n  }\n\n  async removeSpecific(ctx: Context, selected: IosDistCredentials) {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const apps = credentials.appCredentials.filter(cred => cred.distCredentialsId === selected.id);\n    const appsList = apps.map(appCred => chalk.green(appCred.experienceName)).join(', ');\n\n    if (appsList && !ctx.nonInteractive) {\n      Log.log('Removing Distribution Certificate');\n      const confirm = await confirmAsync({\n        message: `You are removing certificate used by ${appsList}. Do you want to continue?`,\n      });\n      if (!confirm) {\n        Log.log('Aborting');\n        return;\n      }\n    }\n\n    Log.log('Removing Distribution Certificate...\\n');\n    await ctx.ios.deleteDistCert(selected.id, this.accountName);\n\n    let shouldRevoke = this.shouldRevoke;\n    if (selected.certId) {\n      if (!shouldRevoke && !ctx.nonInteractive) {\n        const revoke = await confirmAsync({\n          message: `Do you also want to revoke it on Apple Developer Portal?`,\n        });\n        shouldRevoke = revoke;\n      }\n\n      if (shouldRevoke) {\n        await ctx.ensureAppleCtx();\n        await new DistCertManager(ctx.appleCtx).revoke([selected.certId]);\n      }\n    }\n\n    for (const appCredentials of apps) {\n      const appLookupParams = getAppLookupParams(\n        appCredentials.experienceName,\n        appCredentials.bundleIdentifier\n      );\n      if (!(await ctx.ios.getProvisioningProfile(appLookupParams))) {\n        continue;\n      }\n      Log.log(\n        `Removing Provisioning Profile for ${appCredentials.experienceName} (${appCredentials.bundleIdentifier})`\n      );\n      const view = new RemoveProvisioningProfile(this.accountName, shouldRevoke);\n      await view.removeSpecific(ctx, appLookupParams);\n    }\n  }\n}\n\nexport class UpdateIosDist implements IView {\n  constructor(private accountName: string) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    const selected = await selectDistCertFromList(ctx, this.accountName);\n    if (selected) {\n      await this.updateSpecific(ctx, selected);\n\n      Log.log(chalk.green('Successfully updated Distribution Certificate\\n'));\n      const credentials = await ctx.ios.getAllCredentials(this.accountName);\n      const updated = credentials.userCredentials.find(i => i.id === selected.id);\n      if (updated) {\n        displayIosUserCredentials(updated);\n      }\n      Log.log();\n    }\n    return null;\n  }\n\n  async updateSpecific(ctx: Context, selected: IosDistCredentials) {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const apps = credentials.appCredentials.filter(cred => cred.distCredentialsId === selected.id);\n    const appsList = apps.map(appCred => chalk.green(appCred.experienceName)).join(', ');\n\n    if (apps.length > 1) {\n      if (ctx.nonInteractive) {\n        throw new CommandError(\n          'NON_INTERACTIVE',\n          `Start the CLI without the '--non-interactive' flag to update the certificate used by ${appsList}.`\n        );\n      }\n\n      const confirm = await confirmAsync({\n        message: `You are updating certificate used by ${appsList}. Do you want to continue?`,\n      });\n      if (!confirm) {\n        Log.log('Aborting update process');\n        return;\n      }\n    }\n\n    const newDistCert = await this.provideOrGenerate(ctx);\n    await ctx.ios.updateDistCert(selected.id, this.accountName, newDistCert);\n\n    for (const appCredentials of apps) {\n      Log.log(\n        `Removing Provisioning Profile for ${appCredentials.experienceName} (${appCredentials.bundleIdentifier})`\n      );\n      const appLookupParams = getAppLookupParams(\n        appCredentials.experienceName,\n        appCredentials.bundleIdentifier\n      );\n      await new RemoveProvisioningProfile(this.accountName, true).removeSpecific(\n        ctx,\n        appLookupParams\n      );\n    }\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<DistCert> {\n    const userProvided = await promptForDistCert(ctx);\n    if (userProvided) {\n      const isValid = await validateDistributionCertificate(ctx, userProvided);\n      return isValid ? userProvided : await this.provideOrGenerate(ctx);\n    }\n    return await generateDistCert(ctx, this.accountName);\n  }\n}\n\nexport class UseExistingDistributionCert implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    const selected = await selectDistCertFromList(ctx, this.app.accountName, {\n      filterInvalid: true,\n    });\n    if (selected) {\n      await ctx.ios.useDistCert(this.app, selected.id);\n      Log.log(\n        chalk.green(\n          `Successfully assigned Distribution Certificate to @${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`\n        )\n      );\n    }\n    return null;\n  }\n}\n\nexport class CreateOrReuseDistributionCert implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async assignDistCert(ctx: Context, userCredentialsId: number) {\n    await ctx.ios.useDistCert(this.app, userCredentialsId);\n    Log.log(\n      chalk.green(\n        `Successfully assigned Distribution Certificate to @${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`\n      )\n    );\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    const existingCertificates = await getValidDistCerts(\n      await ctx.ios.getAllCredentials(this.app.accountName),\n      ctx\n    );\n\n    if (existingCertificates.length === 0) {\n      const distCert = await new CreateIosDist(this.app.accountName).create(ctx);\n      await this.assignDistCert(ctx, distCert.id);\n      return null;\n    }\n\n    // autoselect creds if we find valid certs\n    const autoselectedCertificate = existingCertificates[0];\n\n    if (!ctx.nonInteractive) {\n      const confirm = await confirmAsync({\n        message: `${formatDistCert(\n          autoselectedCertificate,\n          await ctx.ios.getAllCredentials(this.app.accountName),\n          'VALID'\n        )} \\n Would you like to use this certificate?`,\n        limit: Infinity,\n      });\n      if (!confirm) {\n        return await this._createOrReuse(ctx);\n      }\n    }\n\n    // Use autosuggested push key\n    Log.log(`Using Distribution Certificate: ${autoselectedCertificate.certId || '-----'}`);\n    await this.assignDistCert(ctx, autoselectedCertificate.id);\n    return null;\n  }\n\n  async _createOrReuse(ctx: Context): Promise<IView | null> {\n    const choices = [\n      {\n        title: '[Choose existing certificate] (Recommended)',\n        value: 'CHOOSE_EXISTING',\n      },\n      { title: '[Add a new certificate]', value: 'GENERATE' },\n    ];\n\n    const question: Question = {\n      type: 'select',\n      name: 'action',\n      message: 'Select an iOS distribution certificate to use for code signing:',\n      choices,\n      optionsPerPage: 20,\n    };\n\n    const { action } = await prompt(question);\n\n    if (action === 'GENERATE') {\n      const distCert = await new CreateIosDist(this.app.accountName).create(ctx);\n      await this.assignDistCert(ctx, distCert.id);\n      return null;\n    } else if (action === 'CHOOSE_EXISTING') {\n      return new UseExistingDistributionCert(this.app);\n    }\n\n    throw new Error('unsupported action');\n  }\n}\n\nasync function getValidDistCerts(iosCredentials: IosCredentials, ctx: Context) {\n  const distCerts = iosCredentials.userCredentials.filter(\n    (cred): cred is IosDistCredentials => cred.type === 'dist-cert'\n  );\n  if (!ctx.hasAppleCtx()) {\n    Log.log(chalk.yellow(`Unable to determine validity of Distribution Certificates.`));\n    return distCerts;\n  }\n  const distCertManager = new DistCertManager(ctx.appleCtx);\n  const certInfoFromApple = await distCertManager.list();\n  const validCerts = await filterRevokedDistributionCerts<IosDistCredentials>(\n    certInfoFromApple,\n    distCerts\n  );\n  return sortByExpiryDesc(certInfoFromApple, validCerts);\n}\n\nfunction getValidityStatus(\n  distCert: IosDistCredentials,\n  validDistCerts: IosDistCredentials[] | null\n): ValidityStatus {\n  if (!validDistCerts) {\n    return 'UNKNOWN';\n  }\n  return validDistCerts.includes(distCert) ? 'VALID' : 'INVALID';\n}\n\ntype ListOptions = {\n  filterInvalid?: boolean;\n};\n\nasync function selectDistCertFromList(\n  ctx: Context,\n  accountName: string,\n  options: ListOptions = {}\n): Promise<IosDistCredentials | null> {\n  const iosCredentials = await ctx.ios.getAllCredentials(accountName);\n  let distCerts = iosCredentials.userCredentials.filter(\n    (cred): cred is IosDistCredentials => cred.type === 'dist-cert'\n  );\n  let validDistCerts: IosDistCredentials[] | null = null;\n  if (ctx.hasAppleCtx()) {\n    const distCertManager = new DistCertManager(ctx.appleCtx);\n    const certInfoFromApple = await distCertManager.list();\n    validDistCerts = await filterRevokedDistributionCerts<IosDistCredentials>(\n      certInfoFromApple,\n      distCerts\n    );\n  }\n  distCerts = options.filterInvalid && validDistCerts ? validDistCerts : distCerts;\n\n  if (distCerts.length === 0) {\n    Log.warn('There are no Distribution Certificates available in your expo account');\n    return null;\n  }\n\n  const question: Question = {\n    type: 'select',\n    name: 'credentialsIndex',\n    message: 'Select certificate from the list.',\n    choices: distCerts.map((entry, index) => ({\n      title: formatDistCert(entry, iosCredentials, getValidityStatus(entry, validDistCerts)),\n      value: index,\n    })),\n  };\n  const { credentialsIndex } = await prompt(question);\n  return distCerts[credentialsIndex];\n}\n\nfunction formatDistCertFromApple(appleInfo: DistCertInfo, credentials: IosCredentials): string {\n  const userCredentials = credentials.userCredentials.filter(\n    cred => cred.type === 'dist-cert' && cred.certId === appleInfo.id\n  );\n  const appCredentials =\n    userCredentials.length !== 0\n      ? credentials.appCredentials.filter(cred => cred.distCredentialsId === userCredentials[0].id)\n      : [];\n  const joinApps = appCredentials\n    .map(i => `      ${i.experienceName} (${i.bundleIdentifier})`)\n    .join('\\n');\n\n  const usedByString = joinApps\n    ? `    ${chalk.gray(`used by\\n${joinApps}`)}`\n    : `    ${chalk.gray(`not used by any apps`)}`;\n\n  const { name, status, id, expires, created, ownerName, serialNumber } = appleInfo;\n  const expiresDate = dateformat(new Date(expires * 1000));\n  const createdDate = dateformat(new Date(created * 1000));\n  return `${name} (${status}) - Cert ID: ${id}, Serial number: ${serialNumber}, Team ID: ${appleInfo.ownerId}, Team name: ${ownerName}\n    expires: ${expiresDate}, created: ${createdDate}\n  ${usedByString}`;\n}\n\ntype ValidityStatus = 'UNKNOWN' | 'VALID' | 'INVALID';\nfunction formatDistCert(\n  distCert: IosDistCredentials,\n  credentials: IosCredentials,\n  validityStatus: ValidityStatus = 'UNKNOWN'\n): string {\n  const appCredentials = credentials.appCredentials.filter(\n    cred => cred.distCredentialsId === distCert.id\n  );\n  const joinApps = appCredentials\n    .map(i => `${i.experienceName} (${i.bundleIdentifier})`)\n    .join(', ');\n\n  const usedByString = joinApps\n    ? `\\n    ${chalk.gray(`used by ${joinApps}`)}`\n    : `\\n    ${chalk.gray(`not used by any apps`)}`;\n\n  let serialNumber = distCert.distCertSerialNumber;\n  try {\n    if (!serialNumber) {\n      serialNumber =\n        PKCS12Utils.findP12CertSerialNumber(distCert.certP12, distCert.certPassword) ?? undefined;\n    }\n  } catch {\n    serialNumber = chalk.red('invalid serial number');\n  }\n\n  let validityText;\n  if (validityStatus === 'VALID') {\n    validityText = chalk.gray(\"\\n    ✅ Currently valid on Apple's servers.\");\n  } else if (validityStatus === 'INVALID') {\n    validityText = chalk.gray(\"\\n    ❌ No longer valid on Apple's servers.\");\n  } else {\n    validityText = chalk.gray(\n      \"\\n    ❓ Validity of this certificate on Apple's servers is unknown.\"\n    );\n  }\n  return `Distribution Certificate (Cert ID: ${\n    distCert.certId || '-----'\n  }, Serial number: ${serialNumber}, Team ID: ${distCert.teamId})${usedByString}${validityText}`;\n}\n\nasync function generateDistCert(ctx: Context, accountName: string): Promise<DistCert> {\n  await ctx.ensureAppleCtx();\n  const manager = new DistCertManager(ctx.appleCtx);\n  try {\n    return await manager.create();\n  } catch (e: any) {\n    if (e.code === 'APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR') {\n      const certs = await manager.list();\n      Log.warn('Maximum number of Distribution Certificates generated on Apple Developer Portal.');\n      Log.warn(APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR);\n\n      if (ctx.nonInteractive) {\n        throw new CommandError(\n          'NON_INTERACTIVE',\n          \"Start the CLI without the '--non-interactive' flag to revoke existing certificates.\"\n        );\n      }\n\n      const credentials = await ctx.ios.getAllCredentials(accountName);\n      const usedByExpo = credentials.userCredentials\n        .filter((cert): cert is IosDistCredentials => cert.type === 'dist-cert' && !!cert.certId)\n        .reduce<{ [key: string]: IosDistCredentials }>(\n          (acc, cert) => ({ ...acc, [cert.certId || '']: cert }),\n          {}\n        );\n\n      // https://docs.expo.dev/distribution/app-signing/#summary\n      const here = terminalLink('here', 'https://bit.ly/3cfJJkQ');\n      Log.log(\n        chalk.grey(`✅  Distribution Certificates can be revoked with no production side effects`)\n      );\n      Log.log(chalk.grey(`ℹ️  Learn more ${here}`));\n      Log.log();\n\n      const { revoke } = await prompt([\n        {\n          type: 'multiselect',\n          name: 'revoke',\n          message: 'Select certificates to revoke.',\n          optionsPerPage: 20,\n          choices: certs.map((cert, index) => ({\n            value: index,\n            title: formatDistCertFromApple(cert, credentials),\n          })),\n        },\n      ]);\n\n      for (const index of revoke) {\n        const certInfo = certs[index];\n        if (certInfo && usedByExpo[certInfo.id]) {\n          await new RemoveIosDist(accountName, true).removeSpecific(ctx, usedByExpo[certInfo.id]);\n        } else {\n          await manager.revoke([certInfo.id]);\n        }\n      }\n    } else {\n      throw e;\n    }\n  }\n  return await generateDistCert(ctx, accountName);\n}\n\nfunction _getRequiredQuestions(ctx: Context): CredentialSchema<DistCert> {\n  const requiredQuestions = { ...distCertSchema };\n  if (ctx.hasAppleCtx() && requiredQuestions.required) {\n    requiredQuestions.required = requiredQuestions.required.filter(q => q !== 'teamId');\n  }\n  return requiredQuestions;\n}\n\nfunction _ensureDistCert(ctx: Context, partialCert: Partial<DistCert>): DistCert {\n  if (ctx.hasAppleCtx()) {\n    partialCert.teamId = ctx.appleCtx.team.id;\n  }\n  if (!isDistCert(partialCert)) {\n    throw new Error(`Not of type DistCert: ${partialCert}`);\n  }\n  return partialCert;\n}\n\nasync function promptForDistCert(ctx: Context): Promise<DistCert | null> {\n  const requiredQuestions = _getRequiredQuestions(ctx);\n  const userProvided = await askForUserProvided(requiredQuestions);\n  if (userProvided) {\n    const distCert = _ensureDistCert(ctx, userProvided);\n    return await _getDistCertWithSerial(distCert);\n  } else {\n    return null;\n  }\n}\n\nasync function _getDistCertWithSerial(distCert: DistCert): Promise<DistCert> {\n  try {\n    distCert.distCertSerialNumber =\n      PKCS12Utils.findP12CertSerialNumber(distCert.certP12, distCert.certPassword) ?? undefined;\n  } catch (error: any) {\n    Log.warn('Unable to access certificate serial number.');\n    Log.warn('Make sure that certificate and password are correct.');\n    Log.warn(error);\n  }\n  return distCert;\n}\n\nexport async function validateDistributionCertificate(ctx: Context, distributionCert: DistCert) {\n  if (!ctx.hasAppleCtx()) {\n    Log.warn('Unable to validate distribution certificate due to insufficient Apple Credentials');\n    return true;\n  }\n  const spinner = ora(\n    `Checking validity of distribution certificate on Apple Developer Portal...`\n  ).start();\n\n  const distCertManager = new DistCertManager(ctx.appleCtx);\n  const certInfoFromApple = await distCertManager.list();\n  const validDistributionCerts = await filterRevokedDistributionCerts(certInfoFromApple, [\n    distributionCert,\n  ]);\n  const isValidCert = validDistributionCerts.length > 0;\n  if (isValidCert) {\n    const successMsg = `Successfully validated Distribution Certificate against Apple Servers`;\n    spinner.succeed(successMsg);\n  } else {\n    const failureMsg = `The Distribution Certificate is no longer valid on the Apple Developer Portal`;\n    spinner.fail(failureMsg);\n  }\n  return isValidCert;\n}\n\nasync function filterRevokedDistributionCerts<T extends DistCert>(\n  certInfoFromApple: DistCertInfo[],\n  distributionCerts: T[]\n): Promise<T[]> {\n  if (distributionCerts.length === 0) {\n    return [];\n  }\n\n  // if the credentials are valid, check it against apple to make sure it hasnt been revoked\n  const validCertSerialsOnAppleServer = certInfoFromApple\n    .filter(\n      // remove expired certs\n      cert => cert.expires > Math.floor(Date.now() / 1000)\n    )\n    .map(cert => cert.serialNumber);\n  const validDistributionCerts = distributionCerts.filter(cert => {\n    const serialNumber = cert.distCertSerialNumber;\n    if (!serialNumber) {\n      return false;\n    }\n    return validCertSerialsOnAppleServer.includes(serialNumber);\n  });\n  return validDistributionCerts;\n}\n\nfunction sortByExpiryDesc<T extends DistCert>(\n  certInfoFromApple: DistCertInfo[],\n  distributionCerts: T[]\n): T[] {\n  return distributionCerts.sort((certA, certB) => {\n    const certAInfo = certInfoFromApple.find(cert => cert.id === certA.certId);\n    const certAExpiry = certAInfo ? certAInfo.expires : Number.NEGATIVE_INFINITY;\n    const certBInfo = certInfoFromApple.find(cert => cert.id === certB.certId);\n    const certBExpiry = certBInfo ? certBInfo.expires : Number.NEGATIVE_INFINITY;\n    return certBExpiry - certAExpiry;\n  });\n}\n\nexport async function getDistCertFromParams(builderOptions: {\n  distP12Path?: string;\n  teamId?: string;\n}): Promise<DistCert | null> {\n  const { distP12Path, teamId } = builderOptions;\n  const certPassword = process.env.EXPO_IOS_DIST_P12_PASSWORD;\n\n  // none of the distCert params were set, assume user has no intention of passing it in\n  if (!distP12Path && !certPassword) {\n    return null;\n  }\n\n  // partial distCert params were set, assume user has intention of passing it in\n  if (!(distP12Path && certPassword && teamId)) {\n    throw new Error(\n      'In order to provide a Distribution Certificate through the CLI parameters, you have to pass --dist-p12-path parameter, --team-id parameter and set EXPO_IOS_DIST_P12_PASSWORD environment variable.'\n    );\n  }\n\n  const distCert = {\n    certP12: await fs.readFile(distP12Path as string, 'base64'),\n    teamId,\n    certPassword,\n  } as DistCert;\n  return await _getDistCertWithSerial(distCert);\n}\n\nexport async function useDistCertFromParams(\n  ctx: Context,\n  app: AppLookupParams,\n  distCert: DistCert\n): Promise<IosDistCredentials> {\n  const isValid = await validateDistributionCertificate(ctx, distCert);\n  if (!isValid) {\n    throw new Error('Cannot validate uploaded Distribution Certificate');\n  }\n  const iosDistCredentials = await ctx.ios.createDistCert(app.accountName, distCert);\n\n  await ctx.ios.useDistCert(app, iosDistCredentials.id);\n  Log.log(\n    chalk.green(\n      `Successfully assigned Distribution Certificate to @${app.accountName}/${app.projectName} (${app.bundleIdentifier})`\n    )\n  );\n  return iosDistCredentials;\n}\n"],"mappings":"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"}