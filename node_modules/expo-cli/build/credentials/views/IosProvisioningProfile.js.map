{"version":3,"file":"IosProvisioningProfile.js","names":["RemoveProvisioningProfile","constructor","accountName","shouldRevoke","open","ctx","credentials","ios","getAllCredentials","selected","selectProfileFromExpo","app","getAppLookupParams","experienceName","bundleIdentifier","removeSpecific","Log","log","chalk","green","deleteProvisioningProfile","nonInteractive","revoke","confirmAsync","message","ensureAppleCtx","ppManager","ProvisioningProfileManager","appleCtx","CreateProvisioningProfile","create","provisioningProfile","provideOrGenerate","updateProvisioningProfile","appCredentials","getAppCredentials","displayIosAppCredentials","userProvided","askForUserProvided","provisioningProfileSchema","yellow","provisioningProfileUtils","readAppleTeam","distCert","getDistCert","assert","generateProvisioningProfile","UseExistingProvisioningProfile","CommandError","selectProfileFromApple","configureAndUpdateProvisioningProfile","CreateOrReuseProvisioningProfile","choosePreferred","profiles","profileWithSameCert","find","profile","certificates","some","cert","id","certId","user","Error","hasAppleCtx","existingProfiles","list","length","autoselectedProfile","confirm","formatProvisioningProfileFromApple","limit","Infinity","_createOrReuse","provisioningProfileId","choices","title","value","question","type","name","optionsPerPage","action","prompt","warn","map","entry","index","credentialsIndex","iosCredentials","filter","getName","teamId","manager","team","inHouse","profileName","Date","toISOString","validateProfileWithoutApple","spinner","ora","start","base64EncodedProfile","fail","buffer","Buffer","from","toString","profilePlist","plist","parse","distCertFingerprint","PKCS12Utils","getP12CertFingerprint","certP12","certPassword","IosCodeSigning","validateProvisioningProfile","e","isExpired","succeed","getAppleInfo","profilesFromApple","configuredProfileFromApple","appleProfile","profileFromApple","updatedProfile","useExisting","projectName","appleInfo","expires","expireString","toDateString","details","getProvisioningProfileFromParams","provisioningProfilePath","fs","readFile","useProvisioningProfileFromParams","isValid"],"sources":["../../../src/credentials/views/IosProvisioningProfile.ts"],"sourcesContent":["import plist, { PlistObject } from '@expo/plist';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport { IosCodeSigning, PKCS12Utils } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport {\n  AppleCtx,\n  DistCert,\n  ProvisioningProfile,\n  ProvisioningProfileInfo,\n  ProvisioningProfileManager,\n} from '../../appleApi';\nimport Log from '../../log';\nimport { ora } from '../../utils/ora';\nimport prompt, { confirmAsync, Question } from '../../utils/prompts';\nimport { displayIosAppCredentials } from '../actions/list';\nimport { askForUserProvided } from '../actions/promptForCredentials';\nimport { AppLookupParams, getAppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport {\n  IosAppCredentials,\n  IosCredentials,\n  IosDistCredentials,\n  provisioningProfileSchema,\n} from '../credentials';\nimport * as provisioningProfileUtils from '../utils/provisioningProfile';\n\nexport class RemoveProvisioningProfile implements IView {\n  constructor(private accountName: string, private shouldRevoke: boolean = false) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const selected = await selectProfileFromExpo(credentials);\n    if (selected) {\n      const app = getAppLookupParams(selected.experienceName, selected.bundleIdentifier);\n      await this.removeSpecific(ctx, app);\n      Log.log(\n        chalk.green(\n          `Successfully removed Provisioning Profile for ${selected.experienceName} (${selected.bundleIdentifier})`\n        )\n      );\n    }\n    return null;\n  }\n\n  async removeSpecific(ctx: Context, app: AppLookupParams) {\n    Log.log('Removing Provisioning Profile...\\n');\n    await ctx.ios.deleteProvisioningProfile(app);\n\n    let shouldRevoke = this.shouldRevoke;\n    if (!shouldRevoke && !ctx.nonInteractive) {\n      const revoke = await confirmAsync({\n        message: 'Do you also want to revoke this Provisioning Profile on Apple Developer Portal?',\n      });\n      shouldRevoke = revoke;\n    }\n\n    if (shouldRevoke) {\n      await ctx.ensureAppleCtx();\n      const ppManager = new ProvisioningProfileManager(ctx.appleCtx);\n      await ppManager.revoke(app.bundleIdentifier);\n    }\n  }\n}\n\nexport class CreateProvisioningProfile implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async create(ctx: Context): Promise<ProvisioningProfile> {\n    const provisioningProfile = await this.provideOrGenerate(ctx);\n    return await ctx.ios.updateProvisioningProfile(this.app, provisioningProfile);\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    await this.create(ctx);\n\n    Log.log(chalk.green('Successfully created Provisioning Profile\\n'));\n    const appCredentials = await ctx.ios.getAppCredentials(this.app);\n    displayIosAppCredentials(appCredentials);\n    Log.log();\n    return null;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<ProvisioningProfile> {\n    if (!ctx.nonInteractive) {\n      const userProvided = await askForUserProvided(provisioningProfileSchema);\n      if (userProvided) {\n        // userProvided profiles don't come with ProvisioningProfileId's (only accessible from Apple Portal API)\n        Log.log(chalk.yellow('Provisioning profile: Unable to validate specified profile.'));\n        return {\n          ...userProvided,\n          ...provisioningProfileUtils.readAppleTeam(userProvided.provisioningProfile),\n        };\n      }\n    }\n    const distCert = await ctx.ios.getDistCert(this.app);\n    assert(distCert, 'missing distribution certificate');\n    return await generateProvisioningProfile(ctx, this.app.bundleIdentifier, distCert);\n  }\n}\n\nexport class UseExistingProvisioningProfile implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    await ctx.ensureAppleCtx();\n\n    if (ctx.nonInteractive) {\n      throw new CommandError(\n        'NON_INTERACTIVE',\n        \"Start the CLI without the '--non-interactive' flag to select a distribution certificate.\"\n      );\n    }\n\n    const selected = await selectProfileFromApple(ctx.appleCtx, this.app.bundleIdentifier);\n    if (selected) {\n      const distCert = await ctx.ios.getDistCert(this.app);\n      assert(distCert, 'missing distribution certificate');\n\n      await configureAndUpdateProvisioningProfile(ctx, this.app, distCert, selected);\n    }\n    return null;\n  }\n}\n\nexport class CreateOrReuseProvisioningProfile implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  choosePreferred(\n    profiles: ProvisioningProfileInfo[],\n    distCert: IosDistCredentials\n  ): ProvisioningProfileInfo {\n    // prefer the profile that already has the same dist cert associated with it\n    const profileWithSameCert = profiles.find(profile =>\n      profile.certificates.some(cert => cert.id === distCert.certId)\n    );\n\n    // if not, just get an arbitrary profile\n    return profileWithSameCert || profiles[0];\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    if (!ctx.hasAppleCtx()) {\n      return new CreateProvisioningProfile(this.app);\n    }\n\n    const ppManager = new ProvisioningProfileManager(ctx.appleCtx);\n    const existingProfiles = await ppManager.list(this.app.bundleIdentifier);\n\n    if (existingProfiles.length === 0) {\n      return new CreateProvisioningProfile(this.app);\n    }\n\n    const distCert = await ctx.ios.getDistCert(this.app);\n    assert(distCert, 'missing distribution certificate');\n\n    const autoselectedProfile = this.choosePreferred(existingProfiles, distCert);\n    // autoselect creds if we find valid certs\n\n    if (!ctx.nonInteractive) {\n      const confirm = await confirmAsync({\n        message: `${formatProvisioningProfileFromApple(\n          autoselectedProfile\n        )} \\n Would you like to use this profile?`,\n        limit: Infinity,\n      });\n      if (!confirm) {\n        return await this._createOrReuse(ctx);\n      }\n    }\n\n    Log.log(`Using Provisioning Profile: ${autoselectedProfile.provisioningProfileId}`);\n    await configureAndUpdateProvisioningProfile(ctx, this.app, distCert, autoselectedProfile);\n    return null;\n  }\n\n  async _createOrReuse(ctx: Context): Promise<IView | null> {\n    const choices = [\n      {\n        title: '[Choose existing provisioning profile] (Recommended)',\n        value: 'CHOOSE_EXISTING',\n      },\n      { title: '[Add a new provisioning profile]', value: 'GENERATE' },\n    ];\n\n    const question: Question = {\n      type: 'select',\n      name: 'action',\n      message: 'Select a Provisioning Profile:',\n      choices,\n      optionsPerPage: 20,\n    };\n\n    const { action } = await prompt(question);\n\n    if (action === 'GENERATE') {\n      return new CreateProvisioningProfile(this.app);\n    } else if (action === 'CHOOSE_EXISTING') {\n      return new UseExistingProvisioningProfile(this.app);\n    }\n\n    throw new Error('unsupported action');\n  }\n}\n\nasync function selectProfileFromApple(\n  appleCtx: AppleCtx,\n  bundleIdentifier: string\n): Promise<ProvisioningProfileInfo | null> {\n  const ppManager = new ProvisioningProfileManager(appleCtx);\n  const profiles = await ppManager.list(bundleIdentifier);\n  if (profiles.length === 0) {\n    Log.warn(\n      `There are no Provisioning Profiles available in your apple account for bundleIdentifier: ${bundleIdentifier}`\n    );\n    return null;\n  }\n\n  const question: Question = {\n    type: 'select',\n    name: 'credentialsIndex',\n    message: 'Select Provisioning Profile from the list.',\n    choices: profiles.map((entry, index) => ({\n      title: formatProvisioningProfileFromApple(entry),\n      value: index,\n    })),\n  };\n  const { credentialsIndex } = await prompt(question);\n  return profiles[credentialsIndex];\n}\n\nasync function selectProfileFromExpo(\n  iosCredentials: IosCredentials\n): Promise<IosAppCredentials | null> {\n  const profiles = iosCredentials.appCredentials.filter(\n    ({ credentials }) => !!credentials.provisioningProfile && !!credentials.provisioningProfileId\n  );\n  if (profiles.length === 0) {\n    Log.warn('There are no Provisioning Profiles available in your account');\n    return null;\n  }\n\n  const getName = (profile: IosAppCredentials) => {\n    const id = chalk.green(profile.credentials.provisioningProfileId || '-----');\n    const teamId = profile.credentials.teamId || '------';\n    return `Provisioning Profile (ID: ${id}, Team ID: ${teamId})`;\n  };\n\n  const question: Question = {\n    type: 'select',\n    name: 'credentialsIndex',\n    message: 'Select Provisioning Profile from the list.',\n    choices: profiles.map((entry, index) => ({\n      title: getName(entry),\n      value: index,\n    })),\n  };\n  const { credentialsIndex } = await prompt(question);\n  return profiles[credentialsIndex];\n}\n\nasync function generateProvisioningProfile(\n  ctx: Context,\n  bundleIdentifier: string,\n  distCert: DistCert\n): Promise<ProvisioningProfile> {\n  await ctx.ensureAppleCtx();\n  const manager = new ProvisioningProfileManager(ctx.appleCtx);\n  const type = ctx.appleCtx.team.inHouse ? 'Enterprise ' : 'AppStore';\n  const profileName = `*[expo] ${bundleIdentifier} ${type} ${new Date().toISOString()}`; // Apple drops [ if its the first char (!!)\n  return await manager.create(bundleIdentifier, distCert, profileName);\n}\n\n// Best effort validation without Apple credentials\nexport async function validateProfileWithoutApple(\n  provisioningProfile: ProvisioningProfile,\n  distCert: DistCert,\n  bundleIdentifier: string\n): Promise<boolean> {\n  const spinner = ora(`Performing best effort validation of Provisioning Profile...\\n`).start();\n  const base64EncodedProfile = provisioningProfile.provisioningProfile;\n  if (!base64EncodedProfile) {\n    spinner.fail('No profile on file');\n    return false;\n  }\n\n  const buffer = Buffer.from(base64EncodedProfile, 'base64');\n  const profile = buffer.toString('utf-8');\n  const profilePlist = plist.parse(profile) as PlistObject;\n\n  try {\n    const distCertFingerprint = await PKCS12Utils.getP12CertFingerprint(\n      distCert.certP12,\n      distCert.certPassword\n    );\n\n    IosCodeSigning.validateProvisioningProfile(profilePlist, {\n      distCertFingerprint,\n      bundleIdentifier,\n    });\n  } catch (e: any) {\n    spinner.fail(`Provisioning profile is invalid: ${e.toString()}`);\n    return false;\n  }\n\n  const isExpired = new Date(profilePlist['ExpirationDate'] as string) <= new Date();\n  if (isExpired) {\n    spinner.fail('Provisioning profile is expired');\n    return false;\n  }\n\n  spinner.succeed('Successfully performed best effort validation of Provisioning Profile.');\n  return true;\n}\n\nexport async function getAppleInfo(\n  appleCtx: AppleCtx,\n  bundleIdentifier: string,\n  profile: ProvisioningProfile\n): Promise<ProvisioningProfileInfo | null> {\n  if (!profile.provisioningProfileId) {\n    Log.log(\n      chalk.yellow('Provisioning Profile: cannot look up profile on Apple Servers - there is no id')\n    );\n    return null;\n  }\n\n  const spinner = ora(`Getting Provisioning Profile info from Apple's Servers...\\n`).start();\n  const ppManager = new ProvisioningProfileManager(appleCtx);\n  const profilesFromApple = await ppManager.list(bundleIdentifier);\n\n  const configuredProfileFromApple = profilesFromApple.find(\n    appleProfile => appleProfile.provisioningProfileId === profile.provisioningProfileId\n  );\n\n  if (!configuredProfileFromApple) {\n    spinner.fail(\n      `Provisioning Profile: ${profile.provisioningProfileId} does not exist on Apple Servers`\n    );\n    return null;\n  }\n\n  spinner.succeed(\n    `Successfully fetched Provisioning Profile ${profile.provisioningProfileId} from Apple Servers`\n  );\n  return configuredProfileFromApple;\n}\n\nexport async function configureAndUpdateProvisioningProfile(\n  ctx: Context,\n  app: AppLookupParams,\n  distCert: DistCert,\n  profileFromApple: ProvisioningProfileInfo\n) {\n  // configure profile on Apple's Server to use our distCert\n  const ppManager = new ProvisioningProfileManager(ctx.appleCtx);\n  const updatedProfile = await ppManager.useExisting(\n    app.bundleIdentifier,\n    profileFromApple,\n    distCert\n  );\n  Log.log(\n    chalk.green(\n      `Successfully configured Provisioning Profile ${\n        profileFromApple.provisioningProfileId\n      } on Apple Servers with Distribution Certificate ${distCert.certId || ''}`\n    )\n  );\n\n  // Update profile on expo servers\n  await ctx.ios.updateProvisioningProfile(app, updatedProfile);\n  Log.log(\n    chalk.green(\n      `Successfully assigned Provisioning Profile to @${app.accountName}/${app.projectName} (${app.bundleIdentifier})`\n    )\n  );\n}\n\nfunction formatProvisioningProfileFromApple(appleInfo: ProvisioningProfileInfo) {\n  const { expires, provisioningProfileId } = appleInfo;\n  const id = provisioningProfileId ?? '-----';\n  const name = appleInfo.name ?? '-----';\n  const expireString = expires ? new Date(expires * 1000).toDateString() : 'unknown';\n  const details = chalk.green(`\\n    Name: ${name}\\n    Expiry: ${expireString}`);\n  return `Provisioning Profile - ID: ${id}${details}`;\n}\n\nexport async function getProvisioningProfileFromParams(\n  provisioningProfilePath?: string\n): Promise<ProvisioningProfile | null> {\n  if (!provisioningProfilePath) {\n    return null;\n  }\n\n  const provisioningProfile = await fs.readFile(provisioningProfilePath as string, 'base64');\n  const team = provisioningProfileUtils.readAppleTeam(provisioningProfile);\n\n  return {\n    provisioningProfile,\n    ...team,\n  };\n}\n\nexport async function useProvisioningProfileFromParams(\n  ctx: Context,\n  app: AppLookupParams,\n  provisioningProfile: ProvisioningProfile\n): Promise<ProvisioningProfile> {\n  const distCert = await ctx.ios.getDistCert(app);\n  assert(distCert, 'missing distribution certificate');\n\n  const isValid = await validateProfileWithoutApple(\n    provisioningProfile,\n    distCert,\n    app.bundleIdentifier\n  );\n  if (!isValid) {\n    throw new Error('Specified invalid Provisioning Profile');\n  }\n\n  return await ctx.ios.updateProvisioningProfile(app, provisioningProfile);\n}\n"],"mappings":"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"}