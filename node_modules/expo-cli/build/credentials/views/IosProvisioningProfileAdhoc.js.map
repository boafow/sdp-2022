{"version":3,"file":"IosProvisioningProfileAdhoc.js","names":["CreateOrReuseProvisioningProfileAdhoc","constructor","app","options","distCertSerialNumber","udids","assignProvisioningProfile","ctx","provisioningProfile","ios","updateProvisioningProfile","Log","log","chalk","green","provisioningProfileId","accountName","projectName","bundleIdentifier","createOrReuse","ensureAppleCtx","ppManager","ProvisioningProfileAdhocManager","appleCtx","open","user","Error"],"sources":["../../../src/credentials/views/IosProvisioningProfileAdhoc.ts"],"sourcesContent":["import chalk from 'chalk';\n\nimport { ProvisioningProfile } from '../../appleApi';\nimport { ProvisioningProfileAdhocManager } from '../../appleApi/provisioningProfileAdhoc';\nimport Log from '../../log';\nimport { AppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\n\nexport type ProvisioningProfileAdhocOptions = {\n  distCertSerialNumber: string;\n  udids: string[];\n};\n\nexport class CreateOrReuseProvisioningProfileAdhoc implements IView {\n  private distCertSerialNumber: string;\n  private udids: string[];\n\n  constructor(private app: AppLookupParams, options: ProvisioningProfileAdhocOptions) {\n    const { distCertSerialNumber, udids } = options;\n    this.distCertSerialNumber = distCertSerialNumber;\n    this.udids = udids;\n  }\n\n  async assignProvisioningProfile(ctx: Context, provisioningProfile: ProvisioningProfile) {\n    await ctx.ios.updateProvisioningProfile(this.app, provisioningProfile);\n    Log.log(\n      chalk.green(\n        `Successfully assigned Provisioning Profile id: ${provisioningProfile.provisioningProfileId} to @${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`\n      )\n    );\n  }\n\n  async createOrReuse(ctx: Context): Promise<ProvisioningProfile> {\n    await ctx.ensureAppleCtx();\n    const ppManager = new ProvisioningProfileAdhocManager(ctx.appleCtx);\n    return await ppManager.createOrReuse(\n      this.udids,\n      this.app.bundleIdentifier,\n      this.distCertSerialNumber\n    );\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    const provisioningProfile = await this.createOrReuse(ctx);\n    await this.assignProvisioningProfile(ctx, provisioningProfile);\n    return null;\n  }\n}\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAGA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAA4B;AAAA;AAAA;AAAA;AASrB,MAAMA,qCAAqC,CAAkB;EAIlEC,WAAW,CAASC,GAAoB,EAAEC,OAAwC,EAAE;IAAA,KAAhED,GAAoB,GAApBA,GAAoB;IAAA;IAAA;IACtC,MAAM;MAAEE,oBAAoB;MAAEC;IAAM,CAAC,GAAGF,OAAO;IAC/C,IAAI,CAACC,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACC,KAAK,GAAGA,KAAK;EACpB;EAEA,MAAMC,yBAAyB,CAACC,GAAY,EAAEC,mBAAwC,EAAE;IACtF,MAAMD,GAAG,CAACE,GAAG,CAACC,yBAAyB,CAAC,IAAI,CAACR,GAAG,EAAEM,mBAAmB,CAAC;IACtEG,cAAG,CAACC,GAAG,CACLC,gBAAK,CAACC,KAAK,CACR,kDAAiDN,mBAAmB,CAACO,qBAAsB,QAAO,IAAI,CAACb,GAAG,CAACc,WAAY,IAAG,IAAI,CAACd,GAAG,CAACe,WAAY,KAAI,IAAI,CAACf,GAAG,CAACgB,gBAAiB,GAAE,CACjL,CACF;EACH;EAEA,MAAMC,aAAa,CAACZ,GAAY,EAAgC;IAC9D,MAAMA,GAAG,CAACa,cAAc,EAAE;IAC1B,MAAMC,SAAS,GAAG,KAAIC,2DAA+B,EAACf,GAAG,CAACgB,QAAQ,CAAC;IACnE,OAAO,MAAMF,SAAS,CAACF,aAAa,CAClC,IAAI,CAACd,KAAK,EACV,IAAI,CAACH,GAAG,CAACgB,gBAAgB,EACzB,IAAI,CAACd,oBAAoB,CAC1B;EACH;EAEA,MAAMoB,IAAI,CAACjB,GAAY,EAAyB;IAC9C,IAAI,CAACA,GAAG,CAACkB,IAAI,EAAE;MACb,MAAM,IAAIC,KAAK,CAAE,6CAA4C,CAAC;IAChE;IAEA,MAAMlB,mBAAmB,GAAG,MAAM,IAAI,CAACW,aAAa,CAACZ,GAAG,CAAC;IACzD,MAAM,IAAI,CAACD,yBAAyB,CAACC,GAAG,EAAEC,mBAAmB,CAAC;IAC9D,OAAO,IAAI;EACb;AACF;AAAC"}