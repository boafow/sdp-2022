{"version":3,"file":"SetupIosPush.js","names":["SetupIosPush","constructor","app","open","ctx","user","Error","appCredentials","ios","getAppCredentials","deprecatedPushId","credentials","pushId","deprecatedPushP12","pushP12","deprecatedPushPassword","pushPassword","nonInteractive","CommandError","confirm","confirmAsync","message","Log","log","configuredPushKey","getPushKey","isValid","iosPushView","validatePushKey","CreateOrReusePushKey"],"sources":["../../../src/credentials/views/SetupIosPush.ts"],"sourcesContent":["import CommandError from '../../CommandError';\nimport Log from '../../log';\nimport { confirmAsync } from '../../utils/prompts';\nimport { AppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport * as iosPushView from './IosPushCredentials';\n\nexport class SetupIosPush implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    // TODO: Remove this on Nov 2020 when Apple no longer accepts deprecated push certs\n    const appCredentials = await ctx.ios.getAppCredentials(this.app);\n    const deprecatedPushId = appCredentials?.credentials?.pushId;\n    const deprecatedPushP12 = appCredentials?.credentials?.pushP12;\n    const deprecatedPushPassword = appCredentials?.credentials?.pushPassword;\n    if (deprecatedPushId && deprecatedPushP12 && deprecatedPushPassword) {\n      if (ctx.nonInteractive) {\n        throw new CommandError(\n          'NON_INTERACTIVE',\n          \"We've detected legacy Push Certificates on file. Start the CLI without the '--non-interactive' flag to upgrade to the newer standard.\"\n        );\n      }\n\n      const confirm = await confirmAsync({\n        message: `We've detected legacy Push Certificates on file. Would you like to upgrade to the newer standard?`,\n      });\n      if (!confirm) {\n        Log.log(`Using Deprecated Push Cert: ${deprecatedPushId} on file`);\n        return null;\n      }\n    }\n\n    const configuredPushKey = await ctx.ios.getPushKey(this.app);\n\n    if (configuredPushKey) {\n      // we dont need to setup if we have a valid push key on file\n      const isValid = await iosPushView.validatePushKey(ctx, configuredPushKey);\n      if (isValid) {\n        return null;\n      }\n    }\n\n    return new iosPushView.CreateOrReusePushKey(this.app);\n  }\n}\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAGA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAoD;AAAA;AAAA;AAE7C,MAAMA,YAAY,CAAkB;EACzCC,WAAW,CAASC,GAAoB,EAAE;IAAA,KAAtBA,GAAoB,GAApBA,GAAoB;EAAG;EAE3C,MAAMC,IAAI,CAACC,GAAY,EAAyB;IAAA;IAC9C,IAAI,CAACA,GAAG,CAACC,IAAI,EAAE;MACb,MAAM,IAAIC,KAAK,CAAE,6CAA4C,CAAC;IAChE;;IAEA;IACA,MAAMC,cAAc,GAAG,MAAMH,GAAG,CAACI,GAAG,CAACC,iBAAiB,CAAC,IAAI,CAACP,GAAG,CAAC;IAChE,MAAMQ,gBAAgB,GAAGH,cAAc,aAAdA,cAAc,gDAAdA,cAAc,CAAEI,WAAW,0DAA3B,sBAA6BC,MAAM;IAC5D,MAAMC,iBAAiB,GAAGN,cAAc,aAAdA,cAAc,iDAAdA,cAAc,CAAEI,WAAW,2DAA3B,uBAA6BG,OAAO;IAC9D,MAAMC,sBAAsB,GAAGR,cAAc,aAAdA,cAAc,iDAAdA,cAAc,CAAEI,WAAW,2DAA3B,uBAA6BK,YAAY;IACxE,IAAIN,gBAAgB,IAAIG,iBAAiB,IAAIE,sBAAsB,EAAE;MACnE,IAAIX,GAAG,CAACa,cAAc,EAAE;QACtB,MAAM,KAAIC,uBAAY,EACpB,iBAAiB,EACjB,uIAAuI,CACxI;MACH;MAEA,MAAMC,OAAO,GAAG,MAAM,IAAAC,uBAAY,EAAC;QACjCC,OAAO,EAAG;MACZ,CAAC,CAAC;MACF,IAAI,CAACF,OAAO,EAAE;QACZG,cAAG,CAACC,GAAG,CAAE,+BAA8Bb,gBAAiB,UAAS,CAAC;QAClE,OAAO,IAAI;MACb;IACF;IAEA,MAAMc,iBAAiB,GAAG,MAAMpB,GAAG,CAACI,GAAG,CAACiB,UAAU,CAAC,IAAI,CAACvB,GAAG,CAAC;IAE5D,IAAIsB,iBAAiB,EAAE;MACrB;MACA,MAAME,OAAO,GAAG,MAAMC,WAAW,GAACC,eAAe,CAACxB,GAAG,EAAEoB,iBAAiB,CAAC;MACzE,IAAIE,OAAO,EAAE;QACX,OAAO,IAAI;MACb;IACF;IAEA,OAAO,KAAIC,WAAW,GAACE,oBAAoB,EAAC,IAAI,CAAC3B,GAAG,CAAC;EACvD;AACF;AAAC"}