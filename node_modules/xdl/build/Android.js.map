{"version":3,"file":"Android.js","names":["_lastUrl","_isAdbOwner","BEGINNING_OF_ADB_ERROR_MESSAGE","CANT_START_ACTIVITY_ERROR","INSTALL_WARNING_TIMEOUT","EMULATOR_MAX_WAIT_TIMEOUT","whichEmulator","process","env","ANDROID_HOME","whichADB","getEmulatorsAsync","stdout","spawnAsync","split","os","EOL","filter","Boolean","map","name","type","isBooted","isAuthorized","getAbdNameForEmulatorIdAsync","emulatorId","trim","getAdbOutputAsync","shift","getAllAvailableDevicesAsync","bootedDevices","getAttachedDevicesAsync","data","connectedNames","offlineEmulators","includes","allDevices","concat","length","genymotionMessage","Error","isBootAnimationCompleteAsync","pid","props","getPropertyDataForDeviceAsync","PROP_BOOT_ANIMATION_STATE","match","startEmulatorAsync","device","Logger","global","info","chalk","bold","emulatorProcess","child_process","spawn","stdio","detached","unref","Promise","resolve","reject","waitTimer","setInterval","connected","find","stopWaiting","maxTimer","setTimeout","manualCommand","stopWaitingAndReject","clearTimeout","clearInterval","message","on","output","splitItems","replace","attachedDevices","slice","line","devicePromises","deviceInfo","modelItem","all","isPlatformSupported","platform","adbAlreadyRunning","adb","result","lines","stderr","e","errorMessage","startsWith","substring","args","Binaries","addToPathAsync","alreadyRunning","Env","isDebug","join","signal","isAbortError","getAdbFileOutputAsync","encoding","execFileSync","_isDeviceAuthorizedAsync","isInstalledAsync","androidPackage","packages","adbPidArgs","i","_isExpoInstalledAsync","ensureDevClientInstalledAsync","applicationId","learnMore","isDevClientInstalledAsync","getExpoVersionAsync","regex","regexMatch","exec","isClientOutdatedAsync","sdkVersion","versions","Versions","versionsAsync","clientForSdk","getClientForSDK","latestVersionForSdk","version","androidVersion","installedVersion","semver","lt","installExpoAsync","url","warningTimer","setWarningTimer","notifications","code","LoadingEvent","START_PROGRESS_BAR","path","downloadApkAsync","progress","TICK_PROGRESS_BAR","STOP_PROGRESS_BAR","START_LOADING","installOnDeviceAsync","binaryPath","STOP_LOADING","isDeviceBootedAsync","devices","uninstallExpoAsync","isInstalled","error","upgradeExpoAsync","attemptToStartEmulatorOrAssertAsync","_openUrlAsync","openClient","indexOf","openProject","getUnixPID","port","activateEmulatorWindowAsync","androidPid","osascript","execAsync","openAppAsync","launchActivity","XDLError","logUnauthorized","warn","dim","hasPromptedToUpgrade","isManagedProjectAsync","projectRoot","AndroidConfig","Paths","getProjectPathOrThrowAsync","openUrlAsync","isDetached","devClient","exp","bootedDevice","underline","installedExpo","clientApplicationId","installExpoIfNeeded","shouldInstall","promptKey","confirm","Prompts","confirmAsync","initial","androidClient","getClientApplicationId","isManaged","android","package","resolveApplicationIdAsync","getAppBuildGradleFilePath","isInterstitiaLPageEnabled","isDevClientPackageInstalled","isDevClientInstalled","newProjectUrl","constructDeepLinkAsync","undefined","debug","Analytics","logEvent","sdkVersionString","sdkVersionsAsync","androidClientUrl","androidClientVersion","applicationIdFromGradle","Package","getApplicationIdAsync","filePath","getAndroidManifestAsync","androidManifest","Manifest","readAndroidManifestAsync","getMainActivityOrThrow","manifest","$","getConfig","skipSDKVersionRequirement","scheme","shouldGenerateInterstitialPage","UrlUtils","constructLoadingUrlAsync","catch","openProjectAsync","shouldPrompt","startAdbReverseAsync","projectUrl","booted","success","promptForDeviceAsync","gray","openWebProjectAsync","Webpack","getUrlAsync","packagerInfo","ProjectSettings","readPackagerInfoAsync","expRc","readExpRcAsync","userDefinedAdbReversePorts","extraAdbReversePorts","adbReversePorts","packagerPort","expoServerPort","adbReverse","stopAdbReverseAsync","adbReverseRemove","options","push","splashScreenDPIConstraints","dpi","sizeMultiplier","checkSplashScreenImages","gteSdkVersion","splashScreenMode","splash","resizeMode","generalSplashImagePath","image","italic","generalSplashImage","ImageUtils","getImageDimensionsAsync","androidSplash","androidSplashImages","imageRelativePath","splashImage","width","height","expectedWidth","expectedHeight","sizeMatches","some","maybeStopAdbDaemonAsync","nameStyleForDevice","isActive","text","pauseInteractions","value","prompts","limit","choices","item","format","title","suggest","input","RegExp","choice","test","resumeInteractions","DeviceABI","deviceProperties","PROP_SDK_VERSION","PROP_API_VERSION","PROP_CPU_NAME","PROP_CPU_ABILIST_NAME","LOWEST_SUPPORTED_EXPO_API_VERSION","getDeviceSDKVersionAsync","getPropertyForDeviceAsync","getDeviceAPIVersionAsync","parseInt","getDeviceABIsAsync","cpuAbilist","abi","shouldRefresh","prop","propCommand","results","toString","parseAdbDeviceProperties","devicePropertiesString","properties","propertyExp","matchAll"],"sources":["../src/Android.ts"],"sourcesContent":["import { ExpoConfig, getConfig, readExpRcAsync } from '@expo/config';\nimport { AndroidConfig } from '@expo/config-plugins';\nimport * as osascript from '@expo/osascript';\nimport spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport child_process, { execFileSync } from 'child_process';\nimport trim from 'lodash/trim';\nimport os from 'os';\nimport prompts from 'prompts';\nimport semver from 'semver';\n\nimport {\n  Analytics,\n  Binaries,\n  downloadApkAsync,\n  Env,\n  ImageUtils,\n  isDevClientPackageInstalled,\n  learnMore,\n  LoadingEvent,\n  Logger,\n  ProjectSettings,\n  Prompts,\n  UrlUtils,\n  Versions,\n  Webpack,\n  XDLError,\n} from './internal';\n\nexport type Device = {\n  pid?: string;\n  name: string;\n  type: 'emulator' | 'device';\n  isBooted: boolean;\n  isAuthorized: boolean;\n};\n\nlet _lastUrl: string | null = null;\nlet _isAdbOwner: boolean | null = null;\n\nconst BEGINNING_OF_ADB_ERROR_MESSAGE = 'error: ';\nconst CANT_START_ACTIVITY_ERROR = 'Activity not started, unable to resolve Intent';\n\nconst INSTALL_WARNING_TIMEOUT = 60 * 1000;\n\nconst EMULATOR_MAX_WAIT_TIMEOUT = 60 * 1000 * 3;\n\nfunction whichEmulator(): string {\n  if (process.env.ANDROID_HOME) {\n    return `${process.env.ANDROID_HOME}/emulator/emulator`;\n  }\n  return 'emulator';\n}\n\nfunction whichADB(): string {\n  if (process.env.ANDROID_HOME) {\n    return `${process.env.ANDROID_HOME}/platform-tools/adb`;\n  }\n  return 'adb';\n}\n\n/**\n * Returns a list of emulator names.\n */\nasync function getEmulatorsAsync(): Promise<Device[]> {\n  try {\n    const { stdout } = await spawnAsync(whichEmulator(), ['-list-avds']);\n    return stdout\n      .split(os.EOL)\n      .filter(Boolean)\n      .map(name => ({\n        name,\n        type: 'emulator',\n        // unsure from this\n        isBooted: false,\n        isAuthorized: true,\n      }));\n  } catch {\n    return [];\n  }\n}\n\n/**\n * Return the Emulator name for an emulator ID, this can be used to determine if an emulator is booted.\n *\n * @param emulatorId a value like `emulator-5554` from `abd devices`\n */\nasync function getAbdNameForEmulatorIdAsync(emulatorId: string): Promise<string | null> {\n  return (\n    trim(await getAdbOutputAsync(['-s', emulatorId, 'emu', 'avd', 'name']))\n      .split(/\\r?\\n/)\n      .shift() ?? null\n  );\n}\n\nexport async function getAllAvailableDevicesAsync(): Promise<Device[]> {\n  const bootedDevices = await getAttachedDevicesAsync();\n\n  const data = await getEmulatorsAsync();\n  const connectedNames = bootedDevices.map(({ name }) => name);\n\n  const offlineEmulators = data\n    .filter(({ name }) => !connectedNames.includes(name))\n    .map(({ name, type }) => {\n      return {\n        name,\n        type,\n        isBooted: false,\n        // TODO: Are emulators always authorized?\n        isAuthorized: true,\n      };\n    });\n\n  const allDevices = bootedDevices.concat(offlineEmulators);\n\n  if (!allDevices.length) {\n    const genymotionMessage = `https://developer.android.com/studio/run/device.html#developer-device-options. If you are using Genymotion go to Settings -> ADB, select \"Use custom Android SDK tools\", and point it at your Android SDK directory.`;\n    throw new Error(\n      `No Android connected device found, and no emulators could be started automatically.\\nPlease connect a device or create an emulator (https://docs.expo.dev/workflow/android-studio-emulator).\\nThen follow the instructions here to enable USB debugging:\\n${genymotionMessage}`\n    );\n  }\n\n  return allDevices;\n}\n\n/**\n * Returns true when a device's splash screen animation has stopped.\n * This can be used to detect when a device is fully booted and ready to use.\n *\n * @param pid\n */\nasync function isBootAnimationCompleteAsync(pid?: string): Promise<boolean> {\n  try {\n    const props = await getPropertyDataForDeviceAsync({ pid }, PROP_BOOT_ANIMATION_STATE);\n    return !!props[PROP_BOOT_ANIMATION_STATE].match(/stopped/);\n  } catch {\n    return false;\n  }\n}\n\nasync function startEmulatorAsync(device: Pick<Device, 'name'>): Promise<Device> {\n  Logger.global.info(`\\u203A Opening emulator ${chalk.bold(device.name)}`);\n\n  // Start a process to open an emulator\n  const emulatorProcess = child_process.spawn(\n    whichEmulator(),\n    [\n      `@${device.name}`,\n      // disable animation for faster boot -- this might make it harder to detect if it mounted properly tho\n      //'-no-boot-anim'\n      // '-google-maps-key' -- TODO: Use from config\n    ],\n    {\n      stdio: 'ignore',\n      detached: true,\n    }\n  );\n\n  emulatorProcess.unref();\n\n  return new Promise<Device>((resolve, reject) => {\n    const waitTimer = setInterval(async () => {\n      const bootedDevices = await getAttachedDevicesAsync();\n      const connected = bootedDevices.find(({ name }) => name === device.name);\n      if (connected) {\n        const isBooted = await isBootAnimationCompleteAsync(connected.pid);\n        if (isBooted) {\n          stopWaiting();\n          resolve(connected);\n        }\n      }\n    }, 1000);\n\n    // Reject command after timeout\n    const maxTimer = setTimeout(() => {\n      const manualCommand = `${whichEmulator()} @${device.name}`;\n      stopWaitingAndReject(\n        `It took too long to start the Android emulator: ${device.name}. You can try starting the emulator manually from the terminal with: ${manualCommand}`\n      );\n    }, EMULATOR_MAX_WAIT_TIMEOUT);\n\n    const stopWaiting = () => {\n      clearTimeout(maxTimer);\n      clearInterval(waitTimer);\n    };\n\n    const stopWaitingAndReject = (message: string) => {\n      stopWaiting();\n      reject(new Error(message));\n      clearInterval(waitTimer);\n    };\n\n    emulatorProcess.on('error', ({ message }) => stopWaitingAndReject(message));\n\n    emulatorProcess.on('exit', () => {\n      const manualCommand = `${whichEmulator()} @${device.name}`;\n      stopWaitingAndReject(\n        `The emulator (${device.name}) quit before it finished opening. You can try starting the emulator manually from the terminal with: ${manualCommand}`\n      );\n    });\n  });\n}\n\n// TODO: This is very expensive for some operations.\nexport async function getAttachedDevicesAsync(): Promise<Device[]> {\n  const output = await getAdbOutputAsync(['devices', '-l']);\n\n  const splitItems = output.trim().replace(/\\n$/, '').split(os.EOL);\n  // First line is `\"List of devices attached\"`, remove it\n  // @ts-ignore: todo\n  const attachedDevices: {\n    props: string[];\n    type: Device['type'];\n    isAuthorized: Device['isAuthorized'];\n  }[] = splitItems\n    .slice(1, splitItems.length)\n    .map(line => {\n      // unauthorized: ['FA8251A00719', 'unauthorized', 'usb:338690048X', 'transport_id:5']\n      // authorized: ['FA8251A00719', 'device', 'usb:336592896X', 'product:walleye', 'model:Pixel_2', 'device:walleye', 'transport_id:4']\n      // emulator: ['emulator-5554', 'offline', 'transport_id:1']\n      const props = line.split(' ').filter(Boolean);\n\n      const isAuthorized = props[1] !== 'unauthorized';\n      const type = line.includes('emulator') ? 'emulator' : 'device';\n      return { props, type, isAuthorized };\n    })\n    .filter(({ props: [pid] }) => !!pid);\n\n  const devicePromises = attachedDevices.map<Promise<Device>>(async props => {\n    const {\n      type,\n      props: [pid, ...deviceInfo],\n      isAuthorized,\n    } = props;\n\n    let name: string | null = null;\n\n    if (type === 'device') {\n      if (isAuthorized) {\n        // Possibly formatted like `model:Pixel_2`\n        // Transform to `Pixel_2`\n        const modelItem = deviceInfo.find(info => info.includes('model:'));\n        if (modelItem) {\n          name = modelItem.replace('model:', '');\n        }\n      }\n      // unauthorized devices don't have a name available to read\n      if (!name) {\n        // Device FA8251A00719\n        name = `Device ${pid}`;\n      }\n    } else {\n      // Given an emulator pid, get the emulator name which can be used to start the emulator later.\n      name = (await getAbdNameForEmulatorIdAsync(pid)) ?? '';\n    }\n\n    return {\n      pid,\n      name,\n      type,\n      isAuthorized,\n      isBooted: true,\n    };\n  });\n\n  return Promise.all(devicePromises);\n}\n\nexport function isPlatformSupported(): boolean {\n  return (\n    process.platform === 'darwin' || process.platform === 'win32' || process.platform === 'linux'\n  );\n}\n\nasync function adbAlreadyRunning(adb: string): Promise<boolean> {\n  try {\n    const result = await spawnAsync(adb, ['start-server']);\n    const lines = trim(result.stderr).split(/\\r?\\n/);\n    return lines.includes('* daemon started successfully') === false;\n  } catch (e: any) {\n    let errorMessage = trim(e.stderr || e.stdout);\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    e.message = errorMessage;\n    throw e;\n  }\n}\n\nexport async function getAdbOutputAsync(args: string[]): Promise<string> {\n  await Binaries.addToPathAsync('adb');\n  const adb = whichADB();\n\n  if (_isAdbOwner === null) {\n    const alreadyRunning = await adbAlreadyRunning(adb);\n    _isAdbOwner = alreadyRunning === false;\n  }\n\n  if (Env.isDebug()) {\n    Logger.global.info([adb, ...args].join(' '));\n  }\n  try {\n    const result = await spawnAsync(adb, args);\n    return result.output.join('\\n');\n  } catch (e: any) {\n    // User pressed ctrl+c to cancel the process...\n    if (e.signal === 'SIGINT') {\n      e.isAbortError = true;\n    }\n    // TODO: Support heap corruption for adb 29 (process exits with code -1073740940) (windows and linux)\n    let errorMessage = (e.stderr || e.stdout || e.message).trim();\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    e.message = errorMessage;\n    throw e;\n  }\n}\n\nexport async function getAdbFileOutputAsync(args: string[], encoding?: 'latin1') {\n  await Binaries.addToPathAsync('adb');\n  const adb = whichADB();\n\n  if (_isAdbOwner === null) {\n    const alreadyRunning = await adbAlreadyRunning(adb);\n    _isAdbOwner = alreadyRunning === false;\n  }\n\n  try {\n    return await execFileSync(adb, args, {\n      encoding,\n      stdio: 'pipe',\n    });\n  } catch (e: any) {\n    let errorMessage = (e.stderr || e.stdout || e.message).trim();\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    e.message = errorMessage;\n    throw e;\n  }\n}\n\nasync function _isDeviceAuthorizedAsync(device: Device): Promise<boolean> {\n  // TODO: Get the latest version of the device in case isAuthorized changes.\n  return device.isAuthorized;\n}\n\nasync function isInstalledAsync(device: Device, androidPackage: string): Promise<boolean> {\n  const packages = await getAdbOutputAsync(\n    adbPidArgs(device.pid, 'shell', 'pm', 'list', 'packages', androidPackage)\n  );\n\n  const lines = packages.split(/\\r?\\n/);\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (line === `package:${androidPackage}`) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// Expo installed\nasync function _isExpoInstalledAsync(device: Device) {\n  return await isInstalledAsync(device, 'host.exp.exponent');\n}\n\nasync function ensureDevClientInstalledAsync(device: Device, applicationId: string): Promise<void> {\n  if (!(await isInstalledAsync(device, applicationId))) {\n    throw new Error(\n      `The development client (${applicationId}) for this project is not installed. ` +\n        `Please build and install the client on the device first.\\n${learnMore(\n          'https://docs.expo.dev/clients/distribution-for-android/'\n        )}`\n    );\n  }\n}\n\nasync function isDevClientInstalledAsync(device: Device, applicationId: string): Promise<boolean> {\n  return await isInstalledAsync(device, applicationId);\n}\n\nasync function getExpoVersionAsync(device: Device): Promise<string | null> {\n  const info = await getAdbOutputAsync(\n    adbPidArgs(device.pid, 'shell', 'dumpsys', 'package', 'host.exp.exponent')\n  );\n\n  const regex = /versionName=([0-9.]+)/;\n  const regexMatch = regex.exec(info);\n  if (!regexMatch || regexMatch.length < 2) {\n    return null;\n  }\n\n  return regexMatch[1];\n}\n\nasync function isClientOutdatedAsync(device: Device, sdkVersion?: string): Promise<boolean> {\n  const versions = await Versions.versionsAsync();\n  const clientForSdk = await getClientForSDK(sdkVersion);\n  const latestVersionForSdk = clientForSdk?.version ?? versions.androidVersion;\n  const installedVersion = await getExpoVersionAsync(device);\n  return !installedVersion || semver.lt(installedVersion, latestVersionForSdk);\n}\n\nexport async function installExpoAsync({\n  device,\n  url,\n  version,\n}: {\n  device: Device;\n  url?: string;\n  version?: string;\n}) {\n  let warningTimer: NodeJS.Timeout;\n  const setWarningTimer = () => {\n    if (warningTimer) {\n      clearTimeout(warningTimer);\n    }\n    return setTimeout(() => {\n      Logger.global.info('');\n      Logger.global.info(\n        'This download is taking longer than expected. You can also try downloading the clients from the website at https://expo.dev/tools'\n      );\n    }, INSTALL_WARNING_TIMEOUT);\n  };\n\n  Logger.notifications.info(\n    { code: LoadingEvent.START_PROGRESS_BAR },\n    'Downloading the Expo Go app [:bar] :percent :etas'\n  );\n\n  warningTimer = setWarningTimer();\n  const path = await downloadApkAsync(url, progress => {\n    Logger.notifications.info({ code: LoadingEvent.TICK_PROGRESS_BAR }, progress);\n  });\n\n  Logger.notifications.info({ code: LoadingEvent.STOP_PROGRESS_BAR });\n\n  const message = version\n    ? `Installing Expo Go ${version} on ${device.name}`\n    : `Installing Expo Go on ${device.name}`;\n\n  Logger.notifications.info({ code: LoadingEvent.START_LOADING }, message);\n  warningTimer = setWarningTimer();\n  const result = await installOnDeviceAsync(device, { binaryPath: path });\n  Logger.notifications.info({ code: LoadingEvent.STOP_LOADING });\n\n  clearTimeout(warningTimer);\n  return result;\n}\n\nexport async function installOnDeviceAsync(\n  device: Pick<Device, 'pid'>,\n  { binaryPath }: { binaryPath: string }\n) {\n  return await getAdbOutputAsync(adbPidArgs(device.pid, 'install', '-r', '-d', binaryPath));\n}\n\nexport async function isDeviceBootedAsync({\n  name,\n}: { name?: string } = {}): Promise<Device | null> {\n  const devices = await getAttachedDevicesAsync();\n\n  if (!name) {\n    return devices[0] ?? null;\n  }\n\n  return devices.find(device => device.name === name) ?? null;\n}\n\nexport async function uninstallExpoAsync(device: Device): Promise<string | undefined> {\n  Logger.global.info('Uninstalling Expo Go from Android device.');\n\n  // we need to check if its installed, else we might bump into \"Failure [DELETE_FAILED_INTERNAL_ERROR]\"\n  const isInstalled = await _isExpoInstalledAsync(device);\n  if (!isInstalled) {\n    return;\n  }\n\n  try {\n    return await getAdbOutputAsync(adbPidArgs(device.pid, 'uninstall', 'host.exp.exponent'));\n  } catch (e: any) {\n    Logger.global.error(\n      'Could not uninstall Expo Go from your device, please uninstall Expo Go manually and try again.'\n    );\n    throw e;\n  }\n}\n\nexport async function upgradeExpoAsync({\n  url,\n  version,\n  device,\n}: {\n  url?: string;\n  version?: string;\n  device?: Device | null;\n} = {}): Promise<boolean> {\n  try {\n    if (!device) {\n      device = (await getAttachedDevicesAsync())[0];\n      if (!device) {\n        throw new Error('no devices connected');\n      }\n    }\n    device = await attemptToStartEmulatorOrAssertAsync(device);\n    if (!device) {\n      return false;\n    }\n\n    await uninstallExpoAsync(device);\n    await installExpoAsync({ device, url, version });\n    if (_lastUrl) {\n      Logger.global.info(`\\u203A Opening ${_lastUrl} in Expo.`);\n      await getAdbOutputAsync([\n        'shell',\n        'am',\n        'start',\n        '-a',\n        'android.intent.action.VIEW',\n        '-d',\n        _lastUrl,\n      ]);\n      _lastUrl = null;\n    }\n\n    return true;\n  } catch (e: any) {\n    Logger.global.error(e.message);\n    return false;\n  }\n}\n\nasync function _openUrlAsync({\n  pid,\n  url,\n  applicationId,\n}: {\n  pid: string;\n  url: string;\n  applicationId: string;\n}) {\n  // NOTE(brentvatne): temporary workaround! launch Expo Go first, then\n  // launch the project!\n  // https://github.com/expo/expo/issues/7772\n  // adb shell monkey -p host.exp.exponent -c android.intent.category.LAUNCHER 1\n  // Note: this is not needed in Expo Development Client, it only applies to Expo Go\n  if (applicationId === 'host.exp.exponent') {\n    const openClient = await getAdbOutputAsync(\n      adbPidArgs(\n        pid,\n        'shell',\n        'monkey',\n        '-p',\n        applicationId,\n        '-c',\n        'android.intent.category.LAUNCHER',\n        '1'\n      )\n    );\n    if (openClient.includes(CANT_START_ACTIVITY_ERROR)) {\n      throw new Error(openClient.substring(openClient.indexOf('Error: ')));\n    }\n  }\n\n  const openProject = await getAdbOutputAsync(\n    adbPidArgs(pid, 'shell', 'am', 'start', '-a', 'android.intent.action.VIEW', '-d', url)\n  );\n  if (openProject.includes(CANT_START_ACTIVITY_ERROR)) {\n    throw new Error(openProject.substring(openProject.indexOf('Error: ')));\n  }\n\n  return openProject;\n}\n\nfunction getUnixPID(port: number | string) {\n  return execFileSync('lsof', [`-i:${port}`, '-P', '-t', '-sTCP:LISTEN'], {\n    encoding: 'utf8',\n    stdio: ['pipe', 'pipe', 'ignore'],\n  })\n    .split('\\n')[0]\n    .trim();\n}\n\nexport async function activateEmulatorWindowAsync(device: Pick<Device, 'type' | 'pid'>) {\n  if (\n    // only mac is supported for now.\n    process.platform !== 'darwin' ||\n    // can only focus emulators\n    device.type !== 'emulator'\n  ) {\n    return;\n  }\n\n  // Google Emulator ID: `emulator-5554` -> `5554`\n  const androidPid = device.pid!.match(/-(\\d+)/)?.[1];\n  if (!androidPid) {\n    return;\n  }\n  // Unix PID\n  const pid = getUnixPID(androidPid);\n\n  try {\n    await osascript.execAsync(`\n  tell application \"System Events\"\n    set frontmost of the first process whose unix id is ${pid} to true\n  end tell`);\n  } catch {\n    // noop -- this feature is very specific and subject to failure.\n  }\n}\n\n/**\n * @param device Android device to open on\n * @param props.launchActivity Activity to launch `[application identifier]/.[main activity name]`, ex: `com.bacon.app/.MainActivity`\n */\nexport async function openAppAsync(\n  device: Pick<Device, 'pid' | 'type'>,\n  {\n    launchActivity,\n  }: {\n    launchActivity: string;\n  }\n) {\n  const openProject = await getAdbOutputAsync(\n    adbPidArgs(\n      device.pid,\n      'shell',\n      'am',\n      'start',\n      '-a',\n      'android.intent.action.RUN',\n      // FLAG_ACTIVITY_SINGLE_TOP -- If set, the activity will not be launched if it is already running at the top of the history stack.\n      '-f',\n      '0x20000000',\n      // Activity to open first: com.bacon.app/.MainActivity\n      '-n',\n      launchActivity\n    )\n  );\n\n  // App is not installed or main activity cannot be found\n  if (openProject.match(/Error: Activity class .* does not exist./g)) {\n    throw new XDLError('APP_NOT_INSTALLED', openProject.substring(openProject.indexOf('Error: ')));\n  }\n\n  await activateEmulatorWindowAsync(device);\n\n  return openProject;\n}\n\nexport async function attemptToStartEmulatorOrAssertAsync(device: Device): Promise<Device | null> {\n  // TODO: Add a light-weight method for checking since a device could disconnect.\n\n  if (!(await isDeviceBootedAsync(device))) {\n    device = await startEmulatorAsync(device);\n  }\n\n  if (!(await _isDeviceAuthorizedAsync(device))) {\n    logUnauthorized(device);\n    return null;\n  }\n\n  return device;\n}\n\nfunction logUnauthorized(device: Device) {\n  Logger.global.warn(\n    `\\nThis computer is not authorized for developing on ${chalk.bold(device.name)}. ${chalk.dim(\n      learnMore('https://expo.fyi/authorize-android-device')\n    )}`\n  );\n}\n\n// Keep a list of simulator UDIDs so we can prevent asking multiple times if a user wants to upgrade.\n// This can prevent annoying interactions when they don't want to upgrade for whatever reason.\nconst hasPromptedToUpgrade: Record<string, boolean> = {};\n\nasync function isManagedProjectAsync(projectRoot: string) {\n  try {\n    await AndroidConfig.Paths.getProjectPathOrThrowAsync(projectRoot);\n    return false;\n  } catch {\n    return true;\n  }\n}\n\nasync function openUrlAsync({\n  url,\n  device,\n  isDetached = false,\n  sdkVersion,\n  devClient = false,\n  exp,\n  projectRoot,\n}: {\n  url: string;\n  isDetached?: boolean;\n  device: Device;\n  sdkVersion?: string;\n  devClient?: boolean;\n  exp?: ExpoConfig;\n  projectRoot: string;\n}): Promise<void> {\n  const bootedDevice = await attemptToStartEmulatorOrAssertAsync(device);\n  if (!bootedDevice) {\n    return;\n  }\n  Logger.global.info(`\\u203A Opening ${chalk.underline(url)} on ${chalk.bold(bootedDevice.name)}`);\n\n  await activateEmulatorWindowAsync(bootedDevice);\n\n  device = bootedDevice;\n  let installedExpo = false;\n  let clientApplicationId = 'host.exp.exponent';\n\n  const installExpoIfNeeded = async (device: Device) => {\n    let shouldInstall = !(await _isExpoInstalledAsync(device));\n    const promptKey = device.pid ?? 'unknown';\n    if (\n      !shouldInstall &&\n      !hasPromptedToUpgrade[promptKey] &&\n      (await isClientOutdatedAsync(device, sdkVersion))\n    ) {\n      // Only prompt once per device, per run.\n      hasPromptedToUpgrade[promptKey] = true;\n      const confirm = await Prompts.confirmAsync({\n        initial: true,\n        message: `Expo Go on ${device.name} (${device.type}) is outdated, would you like to upgrade?`,\n      });\n      if (confirm) {\n        await uninstallExpoAsync(device);\n        shouldInstall = true;\n      }\n    }\n\n    if (shouldInstall) {\n      const androidClient = await getClientForSDK(sdkVersion);\n      await installExpoAsync({ device, ...androidClient });\n      installedExpo = true;\n    }\n  };\n\n  const getClientApplicationId = async () => {\n    let applicationId;\n    const isManaged = await isManagedProjectAsync(projectRoot);\n    if (isManaged) {\n      applicationId = exp?.android?.package;\n      if (!applicationId) {\n        throw new Error(\n          `Could not find property android.package in app.config.js/app.json. This setting is required to launch the app.`\n        );\n      }\n    } else {\n      applicationId = await resolveApplicationIdAsync(projectRoot);\n      if (!applicationId) {\n        throw new Error(\n          `Could not find applicationId in ${AndroidConfig.Paths.getAppBuildGradleFilePath(\n            projectRoot\n          )}`\n        );\n      }\n    }\n    return applicationId;\n  };\n\n  try {\n    if (devClient) {\n      clientApplicationId = await getClientApplicationId();\n      await ensureDevClientInstalledAsync(device, clientApplicationId);\n    } else if (\n      Env.isInterstitiaLPageEnabled() &&\n      !devClient &&\n      isDevClientPackageInstalled(projectRoot)\n    ) {\n      await installExpoIfNeeded(device);\n\n      let applicationId: string | undefined;\n      try {\n        applicationId = await getClientApplicationId();\n      } catch (e: any) {\n        Logger.global.warn(e);\n      }\n\n      const isDevClientInstalled = applicationId\n        ? await isDevClientInstalledAsync(device, applicationId)\n        : false;\n\n      if (isDevClientInstalled) {\n        // Everything is installed, we can present the interstitial page.\n        clientApplicationId = ''; // it will open browser\n      } else {\n        // The development build isn't available. So let's fall back to Expo Go.\n        Logger.global.warn(\n          `\\u203A The 'expo-dev-client' package is installed, but a development build isn't available.\\nYour app will open in Expo Go instead. If you want to use the development build, please install it on the simulator first.\\n${learnMore(\n            'https://docs.expo.dev/development/build/'\n          )}`\n        );\n\n        const newProjectUrl = await constructDeepLinkAsync(projectRoot, undefined, false, false);\n        if (!newProjectUrl) {\n          // This shouldn't happen.\n          throw Error('Could not generate a deep link for your project.');\n        }\n        url = newProjectUrl;\n        Logger.global.debug(`iOS project url: ${url}`);\n        _lastUrl = url;\n      }\n    } else if (!isDetached) {\n      await installExpoIfNeeded(device);\n      _lastUrl = url;\n      // _checkExpoUpToDateAsync(); // let this run in background\n    }\n\n    try {\n      await _openUrlAsync({ pid: device.pid!, url, applicationId: clientApplicationId });\n    } catch (e: any) {\n      if (isDetached) {\n        e.message = `Error running app. Have you installed the app already using Android Studio? Since you are detached you must build manually. ${e.message}`;\n      } else {\n        e.message = `Error running app. ${e.message}`;\n      }\n\n      throw e;\n    }\n\n    if (device.type === 'emulator') {\n      // TODO: Bring the emulator window to the front.\n    }\n\n    Analytics.logEvent('Open Url on Device', {\n      platform: 'android',\n      installedExpo,\n    });\n  } catch (e: any) {\n    e.message = `Error running adb: ${e.message}`;\n    throw e;\n  }\n}\n\nasync function getClientForSDK(sdkVersionString?: string) {\n  if (!sdkVersionString) {\n    return null;\n  }\n\n  const sdkVersion = (await Versions.sdkVersionsAsync())[sdkVersionString];\n  if (!sdkVersion) {\n    return null;\n  }\n\n  return {\n    url: sdkVersion.androidClientUrl,\n    version: sdkVersion.androidClientVersion,\n  };\n}\n\nexport async function resolveApplicationIdAsync(projectRoot: string): Promise<string | null> {\n  try {\n    const applicationIdFromGradle = await AndroidConfig.Package.getApplicationIdAsync(projectRoot);\n    if (applicationIdFromGradle) {\n      return applicationIdFromGradle;\n    }\n  } catch {}\n\n  try {\n    const filePath = await AndroidConfig.Paths.getAndroidManifestAsync(projectRoot);\n    const androidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(filePath);\n    // Assert MainActivity defined.\n    await AndroidConfig.Manifest.getMainActivityOrThrow(androidManifest);\n    if (androidManifest.manifest?.$?.package) {\n      return androidManifest.manifest.$.package;\n    }\n  } catch {}\n\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  return exp.android?.package ?? null;\n}\n\nasync function constructDeepLinkAsync(\n  projectRoot: string,\n  scheme?: string,\n  devClient?: boolean,\n  shouldGenerateInterstitialPage: boolean = true\n): Promise<string | null> {\n  if (\n    Env.isInterstitiaLPageEnabled() &&\n    !devClient &&\n    isDevClientPackageInstalled(projectRoot) &&\n    shouldGenerateInterstitialPage\n  ) {\n    return UrlUtils.constructLoadingUrlAsync(projectRoot, 'android');\n  } else {\n    return await UrlUtils.constructDeepLinkAsync(projectRoot, {\n      scheme,\n    }).catch(e => {\n      if (devClient) {\n        return null;\n      }\n      throw e;\n    });\n  }\n}\n\nexport async function openProjectAsync({\n  projectRoot,\n  shouldPrompt,\n  devClient = false,\n  device,\n  scheme,\n  applicationId,\n  launchActivity,\n}: {\n  projectRoot: string;\n  shouldPrompt?: boolean;\n  devClient?: boolean;\n  device?: Device;\n  scheme?: string;\n  applicationId?: string | null;\n  launchActivity?: string;\n}): Promise<{ success: true; url: string } | { success: false; error: Error | string }> {\n  await startAdbReverseAsync(projectRoot);\n\n  const projectUrl = await constructDeepLinkAsync(projectRoot, scheme, devClient);\n\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n\n  // Resolve device\n  if (device) {\n    const booted = await attemptToStartEmulatorOrAssertAsync(device);\n    if (!booted) {\n      return { success: false, error: 'escaped' };\n    }\n    device = booted;\n  } else {\n    const devices = await getAllAvailableDevicesAsync();\n    let booted: Device | null = devices[0];\n    if (shouldPrompt) {\n      booted = await promptForDeviceAsync(devices);\n    }\n    if (!booted) {\n      return { success: false, error: 'escaped' };\n    }\n    device = booted;\n  }\n\n  // No URL, and is devClient\n  if (!projectUrl) {\n    if (!launchActivity) {\n      applicationId = applicationId ?? (await resolveApplicationIdAsync(projectRoot));\n      if (!applicationId) {\n        return {\n          success: false,\n          error:\n            'Cannot resolve application identifier or URI scheme to open the native Android app.\\nBuild the native app with `expo run:android` or `eas build -p android`',\n        };\n      }\n      launchActivity = `${applicationId}/.MainActivity`;\n    }\n\n    try {\n      await openAppAsync(device, {\n        launchActivity,\n      });\n    } catch (error: any) {\n      let errorMessage = `Couldn't open Android app with activity \"${launchActivity}\" on device \"${device.name}\".`;\n      if (error instanceof XDLError && error.code === 'APP_NOT_INSTALLED') {\n        errorMessage += `\\nThe app might not be installed, try installing it with: ${chalk.bold(\n          `expo run:android -d ${device.name}`\n        )}`;\n      }\n      errorMessage += chalk.gray(`\\n${error.message}`);\n      error.message = errorMessage;\n      return { success: false, error };\n    }\n    return {\n      success: true,\n      // TODO: Remove this hack\n      url: '',\n    };\n  }\n\n  try {\n    await openUrlAsync({\n      url: projectUrl,\n      device,\n      isDetached: !!exp.isDetached,\n      sdkVersion: exp.sdkVersion,\n      devClient,\n      exp,\n      projectRoot,\n    });\n    return { success: true, url: projectUrl };\n  } catch (e: any) {\n    if (e.isAbortError) {\n      // Don't log anything when the user cancelled the process\n      return { success: false, error: 'escaped' };\n    } else {\n      e.message = `Couldn't start project on Android: ${e.message}`;\n    }\n    return { success: false, error: e };\n  }\n}\n\nexport async function openWebProjectAsync({\n  projectRoot,\n  shouldPrompt,\n}: {\n  projectRoot: string;\n  shouldPrompt?: boolean;\n}): Promise<{ success: true; url: string } | { success: false; error: string }> {\n  try {\n    await startAdbReverseAsync(projectRoot);\n\n    const projectUrl = await Webpack.getUrlAsync(projectRoot);\n    if (projectUrl === null) {\n      return {\n        success: false,\n        error: `The web project has not been started yet`,\n      };\n    }\n    const devices = await getAllAvailableDevicesAsync();\n    let device: Device | null = devices[0];\n    if (shouldPrompt) {\n      device = await promptForDeviceAsync(devices);\n    }\n    if (!device) {\n      return { success: false, error: 'escaped' };\n    }\n\n    await openUrlAsync({ url: projectUrl, device, isDetached: true, projectRoot });\n    return { success: true, url: projectUrl };\n  } catch (e: any) {\n    return { success: false, error: `Couldn't open the web project on Android: ${e.message}` };\n  }\n}\n\n// Adb reverse\nexport async function startAdbReverseAsync(projectRoot: string): Promise<boolean> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const expRc = await readExpRcAsync(projectRoot);\n  const userDefinedAdbReversePorts = expRc.extraAdbReversePorts || [];\n\n  const adbReversePorts = [\n    packagerInfo.packagerPort,\n    packagerInfo.expoServerPort,\n    ...userDefinedAdbReversePorts,\n  ].filter(Boolean);\n\n  const devices = await getAttachedDevicesAsync();\n  for (const device of devices) {\n    for (const port of adbReversePorts) {\n      if (!(await adbReverse({ device, port }))) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nexport async function stopAdbReverseAsync(projectRoot: string): Promise<void> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const expRc = await readExpRcAsync(projectRoot);\n  const userDefinedAdbReversePorts = expRc.extraAdbReversePorts || [];\n\n  const adbReversePorts = [\n    packagerInfo.packagerPort,\n    packagerInfo.expoServerPort,\n    ...userDefinedAdbReversePorts,\n  ].filter(Boolean);\n\n  const devices = await getAttachedDevicesAsync();\n  for (const device of devices) {\n    for (const port of adbReversePorts) {\n      await adbReverseRemove({ device, port });\n    }\n  }\n}\n\nasync function adbReverse({ device, port }: { device: Device; port: number }): Promise<boolean> {\n  if (!(await _isDeviceAuthorizedAsync(device))) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(adbPidArgs(device.pid, 'reverse', `tcp:${port}`, `tcp:${port}`));\n    return true;\n  } catch (e: any) {\n    Logger.global.warn(`Couldn't adb reverse: ${e.message}`);\n    return false;\n  }\n}\n\nasync function adbReverseRemove({\n  device,\n  port,\n}: {\n  device: Device;\n  port: number;\n}): Promise<boolean> {\n  if (!(await _isDeviceAuthorizedAsync(device))) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(adbPidArgs(device.pid, 'reverse', '--remove', `tcp:${port}`));\n    return true;\n  } catch (e: any) {\n    // Don't send this to warn because we call this preemptively sometimes\n    Logger.global.debug(`Couldn't adb reverse remove: ${e.message}`);\n    return false;\n  }\n}\n\nfunction adbPidArgs(pid: Device['pid'], ...options: string[]): string[] {\n  const args = [];\n  if (pid) {\n    args.push('-s', pid);\n  }\n  return args.concat(options);\n}\n\ntype DPIConstraint = {\n  dpi: 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\n  sizeMultiplier: number;\n};\n\nconst splashScreenDPIConstraints: readonly DPIConstraint[] = [\n  {\n    dpi: 'mdpi',\n    sizeMultiplier: 1,\n  },\n  {\n    dpi: 'hdpi',\n    sizeMultiplier: 1.5,\n  },\n  {\n    dpi: 'xhdpi',\n    sizeMultiplier: 2,\n  },\n  {\n    dpi: 'xxhdpi',\n    sizeMultiplier: 3,\n  },\n  {\n    dpi: 'xxxhdpi',\n    sizeMultiplier: 4,\n  },\n];\n\n/**\n * Checks whether `resizeMode` is set to `native` and if `true` analyzes provided images for splashscreen\n * providing `Logger` feedback upon problems.\n * @param projectRoot - directory of the expo project\n * @since SDK33\n */\nexport async function checkSplashScreenImages(projectRoot: string): Promise<void> {\n  const { exp } = getConfig(projectRoot);\n\n  // return before SDK33\n  if (!Versions.gteSdkVersion(exp, '33.0.0')) {\n    return;\n  }\n\n  const splashScreenMode = exp.android?.splash?.resizeMode ?? exp.splash?.resizeMode ?? 'contain';\n\n  // only mode `native` is handled by this check\n  if (splashScreenMode === 'contain' || splashScreenMode === 'cover') {\n    return;\n  }\n\n  const generalSplashImagePath = exp.splash?.image;\n  if (!generalSplashImagePath) {\n    Logger.global.warn(\n      `Couldn't read '${chalk.italic('splash.image')}' from ${chalk.italic(\n        'app.json'\n      )}. Provide asset that would serve as baseline splash image.`\n    );\n    return;\n  }\n  const generalSplashImage = await ImageUtils.getImageDimensionsAsync(\n    projectRoot,\n    generalSplashImagePath\n  );\n  if (!generalSplashImage) {\n    Logger.global.warn(\n      `Couldn't read dimensions of provided splash image '${chalk.italic(\n        generalSplashImagePath\n      )}'. Does the file exist?`\n    );\n    return;\n  }\n\n  const androidSplash = exp.android?.splash;\n  const androidSplashImages = [];\n  for (const { dpi, sizeMultiplier } of splashScreenDPIConstraints) {\n    const imageRelativePath = androidSplash?.[dpi];\n    if (imageRelativePath) {\n      const splashImage = await ImageUtils.getImageDimensionsAsync(projectRoot, imageRelativePath);\n      if (!splashImage) {\n        Logger.global.warn(\n          `Couldn't read dimensions of provided splash image '${chalk.italic(\n            imageRelativePath\n          )}'. Does the file exist?`\n        );\n        continue;\n      }\n      const { width, height } = splashImage;\n      const expectedWidth = sizeMultiplier * generalSplashImage.width;\n      const expectedHeight = sizeMultiplier * generalSplashImage.height;\n      androidSplashImages.push({\n        dpi,\n        width,\n        height,\n        expectedWidth,\n        expectedHeight,\n        sizeMatches: width === expectedWidth && height === expectedHeight,\n      });\n    }\n  }\n\n  if (androidSplashImages.length === 0) {\n    Logger.global\n      .warn(`Splash resizeMode is set to 'native', but you haven't provided any images for different DPIs.\nBe aware that your splash image will be used as xxxhdpi asset and its ${chalk.bold(\n      'actual size will be different'\n    )} depending on device's DPI.\nSee https://docs.expo.dev/guides/splash-screens/#splash-screen-api-limitations-on-android for more information`);\n    return;\n  }\n\n  if (androidSplashImages.some(({ sizeMatches }) => !sizeMatches)) {\n    Logger.global\n      .warn(`Splash resizeMode is set to 'native' and you've provided different images for different DPIs,\nbut their sizes mismatch expected ones: [dpi: provided (expected)] ${androidSplashImages\n      .map(\n        ({ dpi, width, height, expectedWidth, expectedHeight }) =>\n          `${dpi}: ${width}x${height} (${expectedWidth}x${expectedHeight})`\n      )\n      .join(', ')}\nSee https://docs.expo.dev/guides/splash-screens/#splash-screen-api-limitations-on-android for more information`);\n  }\n}\n\nexport async function maybeStopAdbDaemonAsync() {\n  if (_isAdbOwner !== true) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(['kill-server']);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction nameStyleForDevice(device: Device) {\n  const isActive = device.isBooted;\n  if (!isActive) {\n    // Use no style changes for a disconnected device that is available to be opened.\n    return (text: string) => text;\n  }\n  // A device that is connected and ready to be used should be bolded to match iOS.\n  if (device.isAuthorized) {\n    return chalk.bold;\n  }\n  // Devices that are unauthorized and connected cannot be used, but they are connected so gray them out.\n  return (text: string) => chalk.bold(chalk.gray(text));\n}\n\nexport async function promptForDeviceAsync(devices: Device[]): Promise<Device | null> {\n  // TODO: provide an option to add or download more simulators\n\n  // Pause interactions on the TerminalUI\n  Prompts.pauseInteractions();\n\n  const { value } = await prompts({\n    type: 'autocomplete',\n    name: 'value',\n    limit: 11,\n    message: 'Select a device/emulator',\n    choices: devices.map(item => {\n      const format = nameStyleForDevice(item);\n      const type = item.isAuthorized ? item.type : 'unauthorized';\n      return {\n        title: `${format(item.name)} ${chalk.dim(`(${type})`)}`,\n        value: item.name,\n      };\n    }),\n    suggest: (input: any, choices: any) => {\n      const regex = new RegExp(input, 'i');\n      return choices.filter((choice: any) => regex.test(choice.title));\n    },\n  });\n\n  // Resume interactions on the TerminalUI\n  Prompts.resumeInteractions();\n\n  const device = value ? devices.find(({ name }) => name === value)! : null;\n\n  if (device?.isAuthorized === false) {\n    logUnauthorized(device);\n    return null;\n  }\n\n  return device;\n}\n\nexport enum DeviceABI {\n  // The arch specific android target platforms are soft-deprecated.\n  // Instead of using TargetPlatform as a combination arch + platform\n  // the code will be updated to carry arch information in [DarwinArch]\n  // and [AndroidArch].\n  arm = 'arm',\n  arm64 = 'arm64',\n  x64 = 'x64',\n  x86 = 'x86',\n  armeabiV7a = 'armeabi-v7a',\n  armeabi = 'armeabi',\n  universal = 'universal',\n}\n\ntype DeviceProperties = Record<string, string>;\nconst deviceProperties: Record<string, DeviceProperties> = {};\n\nconst PROP_SDK_VERSION = 'ro.build.version.release';\n// Can sometimes be null\nconst PROP_API_VERSION = 'ro.build.version.sdk';\n// http://developer.android.com/ndk/guides/abis.html\nconst PROP_CPU_NAME = 'ro.product.cpu.abi';\nconst PROP_CPU_ABILIST_NAME = 'ro.product.cpu.abilist';\nconst PROP_BOOT_ANIMATION_STATE = 'init.svc.bootanim';\n\nconst LOWEST_SUPPORTED_EXPO_API_VERSION = 21;\n\n/**\n * @returns string like '11' (i.e. Android 11)\n */\nexport async function getDeviceSDKVersionAsync(\n  device: Pick<Device, 'name' | 'pid'>\n): Promise<string> {\n  return await getPropertyForDeviceAsync(device, PROP_SDK_VERSION);\n}\n\n/**\n * @returns number like `30` (i.e. API 30)\n */\nexport async function getDeviceAPIVersionAsync(\n  device: Pick<Device, 'name' | 'pid'>\n): Promise<number> {\n  const sdkVersion =\n    (await getPropertyForDeviceAsync(device, PROP_API_VERSION)) ??\n    LOWEST_SUPPORTED_EXPO_API_VERSION;\n  return parseInt(sdkVersion, 10);\n}\n\nexport async function getDeviceABIsAsync(\n  device: Pick<Device, 'name' | 'pid'>\n): Promise<DeviceABI[]> {\n  const cpuAbilist = await getPropertyForDeviceAsync(device, PROP_CPU_ABILIST_NAME);\n\n  if (cpuAbilist) {\n    return cpuAbilist.trim().split(',') as DeviceABI[];\n  }\n\n  const abi = (await getPropertyForDeviceAsync(device, PROP_CPU_NAME)) as DeviceABI;\n  return [abi];\n}\n\nexport async function getPropertyForDeviceAsync(\n  device: Pick<Device, 'name' | 'pid'>,\n  name: string,\n  shouldRefresh?: boolean\n): Promise<string> {\n  if (shouldRefresh) {\n    delete deviceProperties[device.name];\n  }\n\n  if (deviceProperties[device.name] == null) {\n    try {\n      deviceProperties[device.name] = await getPropertyDataForDeviceAsync(device);\n    } catch (error: any) {\n      // TODO: Ensure error has message and not stderr\n      Logger.global.error(\n        `Failed to get properties for device \"${device.name}\" (${device.pid}): ${error.message}`\n      );\n    }\n  }\n  return deviceProperties[device.name][name];\n}\n\nasync function getPropertyDataForDeviceAsync(\n  device: Pick<Device, 'pid'>,\n  prop?: string\n): Promise<DeviceProperties> {\n  // @ts-ignore\n  const propCommand = adbPidArgs(...[device.pid, 'shell', 'getprop', prop].filter(Boolean));\n  try {\n    // Prevent reading as UTF8.\n    const results = (await getAdbFileOutputAsync(propCommand, 'latin1')).toString('latin1');\n    // Like:\n    // [wifi.direct.interface]: [p2p-dev-wlan0]\n    // [wifi.interface]: [wlan0]\n\n    if (prop) {\n      return {\n        [prop]: results,\n      };\n    }\n    return parseAdbDeviceProperties(results);\n  } catch (error: any) {\n    // TODO: Ensure error has message and not stderr\n    throw new Error(`Failed to get properties for device (${device.pid}): ${error.message}`);\n  }\n}\n\nexport function parseAdbDeviceProperties(devicePropertiesString: string) {\n  const properties: DeviceProperties = {};\n  const propertyExp = /\\[(.*?)\\]: \\[(.*?)\\]/gm;\n  for (const match of devicePropertiesString.matchAll(propertyExp)) {\n    properties[match[1]] = match[2];\n  }\n  return properties;\n}\n"],"mappings":"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"}