{"version":3,"file":"EmbeddedAssets.js","names":["PLACEHOLDER_URL","FYI_URL","configureAsync","config","_maybeWriteArtifactsToDiskAsync","_maybeConfigureExpoKitEmbeddedAssetsAsync","_maybeRunModifiedExpoUpdatesPluginAsync","getEmbeddedManifestPath","platform","projectRoot","exp","ios","publishManifestPath","_getDefaultEmbeddedManifestPath","android","path","join","_getDefaultEmbeddedAssetDir","_getDefaultEmbeddedBundlePath","iosSupportingDirectory","getIOSPaths","Error","shouldEmbedAssetsForExpoUpdates","pkg","target","dependencies","expoUpdatesVersion","semver","coerce","satisfies","fs","existsSync","iosManifest","iosBundle","androidManifest","androidBundle","androidBundlePath","androidManifestPath","iosBundlePath","iosManifestPath","defaultAndroidDir","defaultIosDir","ensureDir","logger","global","warn","publishBundlePath","writeArtifactSafelyAsync","JSON","stringify","releaseChannel","androidManifestUrl","context","StandaloneContext","createUserContext","supportingDirectory","IosWorkspace","getPaths","IosPlist","modifyAsync","shellPlist","constantsPath","ExponentTools","deleteLinesInFileAsync","regexFileAsync","bundleUrl","iosManifestUrl","isLikelyFirstIOSPublish","expoPlistPath","expoPlistForProject","plist","parse","readFileSync","currentlyConfiguredExpoPlist","IOSConfig","Updates","setUpdatesConfig","Config","UPDATE_URL","RELEASE_CHANNEL","configuredIOSUpdatesURL","writeFileSync","build","SDK_VERSION","RUNTIME_VERSION","key","currentlyConfiguredValue","inferredValue","message","WarningAggregator","addWarningIOS","isLikelyFirstAndroidPublish","androidManifestXmlPath","AndroidManifestKeyForUpdateURL","AndroidConfig","currentlyConfiguredAndroidManifest","Manifest","readAndroidManifestAsync","currentConfiguredManifestApplication","getMainApplicationOrThrow","currentlyConfiguredMetaDataAttributes","map","md","inferredAndroidManifest","inferredMainApplication","addMetaDataItemToMainApplication","currentlyConfiguredAndroidUpdateURL","find","x","writeAndroidManifestAsync","inferredMetaDataAttributes","addWarningAndroid","platformSpecificMessage","getConfig","skipSDKVersionRequirement","projectName","name","iosProjectDirectory","XcodeUtils","sanitizedName","iconPath"],"sources":["../src/EmbeddedAssets.ts"],"sourcesContent":["import { ExpoAppManifest, getConfig, PackageJSONConfig, ProjectTarget } from '@expo/config';\nimport { AndroidConfig, IOSConfig, WarningAggregator } from '@expo/config-plugins';\nimport plist from '@expo/plist';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport semver from 'semver';\n\nimport {\n  ExponentTools,\n  IosPlist,\n  IosWorkspace,\n  Logger as logger,\n  StandaloneContext,\n  writeArtifactSafelyAsync,\n} from './internal';\n\nconst PLACEHOLDER_URL = 'YOUR-APP-URL-HERE';\nconst FYI_URL = 'https://expo.fyi/expo-updates-config';\n\nexport type EmbeddedAssetsConfiguration = {\n  projectRoot: string;\n  pkg: PackageJSONConfig;\n  exp: ExpoAppManifest;\n  releaseChannel?: string;\n  iosManifestUrl: string;\n  iosManifest: any;\n  iosBundle: string | Uint8Array;\n  androidManifestUrl: string;\n  androidManifest: any;\n  androidBundle: string | Uint8Array;\n  target: ProjectTarget;\n};\n\nexport async function configureAsync(config: EmbeddedAssetsConfiguration) {\n  await _maybeWriteArtifactsToDiskAsync(config);\n  await _maybeConfigureExpoKitEmbeddedAssetsAsync(config);\n  await _maybeRunModifiedExpoUpdatesPluginAsync(config);\n}\n\nexport function getEmbeddedManifestPath(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  if (platform === 'ios') {\n    return exp.ios && exp.ios.publishManifestPath\n      ? exp.ios.publishManifestPath\n      : _getDefaultEmbeddedManifestPath(platform, projectRoot, exp);\n  } else if (platform === 'android') {\n    return exp.android && exp.android.publishManifestPath\n      ? exp.android.publishManifestPath\n      : _getDefaultEmbeddedManifestPath(platform, projectRoot, exp);\n  }\n  return _getDefaultEmbeddedManifestPath(platform, projectRoot, exp);\n}\n\nfunction _getDefaultEmbeddedManifestPath(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  return path.join(_getDefaultEmbeddedAssetDir(platform, projectRoot, exp), 'app.manifest');\n}\n\nfunction _getDefaultEmbeddedBundlePath(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  return path.join(_getDefaultEmbeddedAssetDir(platform, projectRoot, exp), 'app.bundle');\n}\n\nfunction _getDefaultEmbeddedAssetDir(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  if (platform === 'ios') {\n    const { iosSupportingDirectory } = getIOSPaths(projectRoot);\n    return iosSupportingDirectory;\n  } else if (platform === 'android') {\n    return path.join(projectRoot, 'android', 'app', 'src', 'main', 'assets');\n  } else {\n    throw new Error('Embedding assets is not supported for platform ' + platform);\n  }\n}\n\nexport function shouldEmbedAssetsForExpoUpdates(\n  projectRoot: string,\n  exp: ExpoAppManifest,\n  pkg: PackageJSONConfig,\n  target: ProjectTarget\n): boolean {\n  if (!pkg.dependencies?.['expo-updates'] || target !== 'bare') {\n    return false;\n  }\n\n  // semver.coerce can return null\n  const expoUpdatesVersion = semver.coerce(pkg.dependencies['expo-updates']);\n\n  // expo-updates 0.1.x relies on expo-cli automatically embedding the manifest and bundle\n  if (expoUpdatesVersion && semver.satisfies(expoUpdatesVersion, '~0.1.0')) {\n    return true;\n  }\n\n  // We also want to support developers who had expo-updates 0.1.x and upgraded but still rely on\n  // expo-cli's automatic embedding. If the files already exist we can assume we need to update them\n  if (\n    fs.existsSync(_getDefaultEmbeddedBundlePath('android', projectRoot, exp)) ||\n    fs.existsSync(_getDefaultEmbeddedManifestPath('android', projectRoot, exp)) ||\n    fs.existsSync(_getDefaultEmbeddedBundlePath('ios', projectRoot, exp)) ||\n    fs.existsSync(_getDefaultEmbeddedManifestPath('ios', projectRoot, exp))\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nasync function _maybeWriteArtifactsToDiskAsync(config: EmbeddedAssetsConfiguration) {\n  const {\n    projectRoot,\n    pkg,\n    exp,\n    iosManifest,\n    iosBundle,\n    androidManifest,\n    androidBundle,\n    target,\n  } = config;\n\n  let androidBundlePath;\n  let androidManifestPath;\n  let iosBundlePath;\n  let iosManifestPath;\n\n  if (shouldEmbedAssetsForExpoUpdates(projectRoot, exp, pkg, target)) {\n    const defaultAndroidDir = _getDefaultEmbeddedAssetDir('android', projectRoot, exp);\n    const defaultIosDir = _getDefaultEmbeddedAssetDir('ios', projectRoot, exp);\n\n    await fs.ensureDir(defaultIosDir);\n    await fs.ensureDir(defaultAndroidDir);\n\n    androidBundlePath = _getDefaultEmbeddedBundlePath('android', projectRoot, exp);\n    androidManifestPath = _getDefaultEmbeddedManifestPath('android', projectRoot, exp);\n    iosBundlePath = _getDefaultEmbeddedBundlePath('ios', projectRoot, exp);\n    iosManifestPath = _getDefaultEmbeddedManifestPath('ios', projectRoot, exp);\n\n    if (!fs.existsSync(iosBundlePath) || !fs.existsSync(iosManifestPath)) {\n      logger.global.warn(\n        'Creating app.manifest and app.bundle inside of your ios/<project>/Supporting directory.\\nBe sure to add these files to your Xcode project. More info at https://expo.fyi/embedded-assets'\n      );\n    }\n  }\n\n  // allow custom overrides\n  if (exp.android?.publishBundlePath) {\n    androidBundlePath = exp.android.publishBundlePath;\n  }\n  if (exp.android?.publishManifestPath) {\n    androidManifestPath = exp.android.publishManifestPath;\n  }\n  if (exp.ios?.publishBundlePath) {\n    iosBundlePath = exp.ios.publishBundlePath;\n  }\n  if (exp.ios?.publishManifestPath) {\n    iosManifestPath = exp.ios.publishManifestPath;\n  }\n\n  if (androidBundlePath) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishBundlePath',\n      androidBundlePath,\n      androidBundle\n    );\n  }\n\n  if (androidManifestPath) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishManifestPath',\n      androidManifestPath,\n      JSON.stringify(androidManifest)\n    );\n  }\n\n  if (iosBundlePath) {\n    await writeArtifactSafelyAsync(projectRoot, 'ios.publishBundlePath', iosBundlePath, iosBundle);\n  }\n\n  if (iosManifestPath) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishManifestPath',\n      iosManifestPath,\n      JSON.stringify(iosManifest)\n    );\n  }\n}\n\nasync function _maybeConfigureExpoKitEmbeddedAssetsAsync(config: EmbeddedAssetsConfiguration) {\n  const { projectRoot, exp, releaseChannel, androidManifestUrl, androidManifest } = config;\n\n  const context = StandaloneContext.createUserContext(projectRoot, exp);\n  const { supportingDirectory } = IosWorkspace.getPaths(context);\n\n  // iOS ExpoKit\n  if (releaseChannel && fs.existsSync(path.join(supportingDirectory, 'EXShell.plist'))) {\n    // This is an ExpoKit app, set properties in EXShell.plist\n    await IosPlist.modifyAsync(supportingDirectory, 'EXShell', (shellPlist: any) => {\n      shellPlist.releaseChannel = releaseChannel;\n      return shellPlist;\n    });\n  }\n\n  // Android ExpoKit\n  const constantsPath = path.join(\n    projectRoot,\n    'android',\n    'app',\n    'src',\n    'main',\n    'java',\n    'host',\n    'exp',\n    'exponent',\n    'generated',\n    'AppConstants.java'\n  );\n  if (fs.existsSync(constantsPath)) {\n    // This is an ExpoKit app\n    // We need to add EmbeddedResponse instances on Android to tell the runtime\n    // that the shell app manifest and bundle is packaged.\n    await ExponentTools.deleteLinesInFileAsync(\n      `START EMBEDDED RESPONSES`,\n      `END EMBEDDED RESPONSES`,\n      constantsPath\n    );\n    await ExponentTools.regexFileAsync(\n      '// ADD EMBEDDED RESPONSES HERE',\n      `\n      // ADD EMBEDDED RESPONSES HERE\n      // START EMBEDDED RESPONSES\n      embeddedResponses.add(new Constants.EmbeddedResponse(\"${androidManifestUrl}\", \"assets://shell-app-manifest.json\", \"application/json\"));\n      embeddedResponses.add(new Constants.EmbeddedResponse(\"${androidManifest.bundleUrl}\", \"assets://shell-app.bundle\", \"application/javascript\"));\n      // END EMBEDDED RESPONSES`,\n      constantsPath\n    );\n    if (releaseChannel) {\n      await ExponentTools.regexFileAsync(\n        /RELEASE_CHANNEL = \"[^\"]*\"/,\n        `RELEASE_CHANNEL = \"${releaseChannel}\"`,\n        constantsPath\n      );\n    }\n  }\n}\n\n/**\n * Guess if this is a user's first publish and run a slightly modified expo-updates plugin.\n * If it is not their first publish and a config mismatch is noticed, log warnings.\n */\nasync function _maybeRunModifiedExpoUpdatesPluginAsync(config: EmbeddedAssetsConfiguration) {\n  if (!config.pkg.dependencies?.['expo-updates'] || config.target === 'managed') {\n    return;\n  }\n\n  const { projectRoot, exp, releaseChannel, iosManifestUrl, androidManifestUrl } = config;\n\n  const { iosSupportingDirectory: supportingDirectory } = getIOSPaths(projectRoot);\n\n  // iOS expo-updates\n  let isLikelyFirstIOSPublish = false;\n  const expoPlistPath = path.join(supportingDirectory, 'Expo.plist');\n  if (fs.existsSync(expoPlistPath)) {\n    let expoPlistForProject = plist.parse(await fs.readFileSync(expoPlistPath, 'utf8'));\n    const currentlyConfiguredExpoPlist = { ...expoPlistForProject };\n\n    // The username is only used for defining a default updates URL.\n    // Since we overwrite the URL below the username is superfluous.\n    expoPlistForProject = IOSConfig.Updates.setUpdatesConfig(\n      projectRoot,\n      exp,\n      expoPlistForProject,\n      /*expoUsername*/ null\n    );\n\n    // overwrite the URL defined in IOSConfig.Updates.setUpdatesConfig\n    expoPlistForProject[IOSConfig.Updates.Config.UPDATE_URL] = iosManifestUrl;\n    // set a release channel (not done in updates plugin)\n    if (releaseChannel) {\n      expoPlistForProject[IOSConfig.Updates.Config.RELEASE_CHANNEL] = releaseChannel;\n    }\n\n    // If we guess that this is a users first publish, modify the native code to match\n    // what is configured.\n    const configuredIOSUpdatesURL =\n      currentlyConfiguredExpoPlist[IOSConfig.Updates.Config.UPDATE_URL];\n    if (configuredIOSUpdatesURL === PLACEHOLDER_URL) {\n      isLikelyFirstIOSPublish = true;\n      fs.writeFileSync(expoPlistPath, plist.build(expoPlistForProject));\n    } else {\n      // Log warnings if this is not the first publish and critical properties seem misconfigured\n      const {\n        UPDATE_URL,\n        SDK_VERSION,\n        RUNTIME_VERSION,\n        RELEASE_CHANNEL,\n      } = IOSConfig.Updates.Config;\n      for (const key of [UPDATE_URL, SDK_VERSION, RUNTIME_VERSION, RELEASE_CHANNEL]) {\n        let currentlyConfiguredValue = currentlyConfiguredExpoPlist[key];\n        const inferredValue = expoPlistForProject[key];\n        if (key === RELEASE_CHANNEL && inferredValue) {\n          // A client with an undefined release channel is mapped to\n          // 'default' in the server, so avoid logging an unneccessary warning.\n          currentlyConfiguredValue = currentlyConfiguredValue ?? 'default';\n        }\n        if (currentlyConfiguredValue !== inferredValue) {\n          let message: string;\n          switch (key) {\n            case RELEASE_CHANNEL: {\n              message = `The value passed to the --release-channel flag is to \"${inferredValue}\", but it is set to \"${currentlyConfiguredValue}\".`;\n              break;\n            }\n            case UPDATE_URL:\n            case SDK_VERSION:\n            case RUNTIME_VERSION:\n            default:\n              message = `${key} is inferred to be \"${inferredValue}\", but it is set to \"${currentlyConfiguredValue}\".`;\n          }\n          WarningAggregator.addWarningIOS(`Expo.plist key: \"${key}\"`, message, FYI_URL);\n        }\n      }\n    }\n  }\n\n  // Android expo-updates\n  let isLikelyFirstAndroidPublish = false;\n  const androidManifestXmlPath = path.join(\n    projectRoot,\n    'android',\n    'app',\n    'src',\n    'main',\n    'AndroidManifest.xml'\n  );\n  const AndroidManifestKeyForUpdateURL = AndroidConfig.Updates.Config.UPDATE_URL;\n  if (fs.existsSync(androidManifestXmlPath)) {\n    const currentlyConfiguredAndroidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(\n      androidManifestXmlPath\n    );\n    const currentConfiguredManifestApplication = AndroidConfig.Manifest.getMainApplicationOrThrow(\n      currentlyConfiguredAndroidManifest\n    );\n    const currentlyConfiguredMetaDataAttributes =\n      currentConfiguredManifestApplication['meta-data']?.map(md => md['$']) ?? [];\n\n    // The username is only used for defining a default updates URL.\n    // Since we overwrite the URL below the username is superfluous.\n    const inferredAndroidManifest = AndroidConfig.Updates.setUpdatesConfig(\n      projectRoot,\n      exp,\n      currentlyConfiguredAndroidManifest,\n      /*username*/ null\n    );\n    const inferredMainApplication = AndroidConfig.Manifest.getMainApplicationOrThrow(\n      inferredAndroidManifest\n    );\n    // overwrite the URL defined in AndroidConfig.Updates.setUpdatesConfig\n    AndroidConfig.Manifest.addMetaDataItemToMainApplication(\n      inferredMainApplication,\n      AndroidManifestKeyForUpdateURL,\n      androidManifestUrl\n    );\n    // set a release channel (not done in updates plugin)\n    if (releaseChannel) {\n      AndroidConfig.Manifest.addMetaDataItemToMainApplication(\n        inferredMainApplication,\n        AndroidConfig.Updates.Config.RELEASE_CHANNEL,\n        releaseChannel\n      );\n    }\n\n    // If we guess that this is a users first publish, modify the native code to match\n    // what is configured.\n    const currentlyConfiguredAndroidUpdateURL = currentlyConfiguredMetaDataAttributes.find(\n      x => x['android:name'] === AndroidConfig.Updates.Config.UPDATE_URL\n    )?.['android:value'];\n    if (currentlyConfiguredAndroidUpdateURL === PLACEHOLDER_URL) {\n      isLikelyFirstAndroidPublish = true;\n      await AndroidConfig.Manifest.writeAndroidManifestAsync(\n        androidManifestXmlPath,\n        inferredAndroidManifest\n      );\n    } else {\n      // Log warnings if this is not the first publish and critical properties seem misconfigured\n      const inferredMainApplication = AndroidConfig.Manifest.getMainApplicationOrThrow(\n        inferredAndroidManifest\n      );\n      const inferredMetaDataAttributes = inferredMainApplication['meta-data']?.map(md => md['$'])!;\n\n      const {\n        UPDATE_URL,\n        SDK_VERSION,\n        RUNTIME_VERSION,\n        RELEASE_CHANNEL,\n      } = AndroidConfig.Updates.Config;\n      for (const key of [UPDATE_URL, SDK_VERSION, RUNTIME_VERSION, RELEASE_CHANNEL]) {\n        const inferredValue = inferredMetaDataAttributes.find(x => x['android:name'] === key)?.[\n          'android:value'\n        ];\n        let currentlyConfiguredValue = currentlyConfiguredMetaDataAttributes.find(\n          x => x['android:name'] === key\n        )?.['android:value'];\n        if (key === RELEASE_CHANNEL && inferredValue) {\n          // A client with an undefined release channel is mapped to\n          // 'default' in the server, so avoid logging an unneccessary warning.\n          currentlyConfiguredValue = currentlyConfiguredValue ?? 'default';\n        }\n        if (inferredValue !== currentlyConfiguredValue) {\n          let message: string;\n          switch (key) {\n            case RELEASE_CHANNEL: {\n              message = `The value passed to the --release-channel flag is \"${inferredValue}\", but it is set to \"${currentlyConfiguredValue}\".`;\n              break;\n            }\n            case UPDATE_URL:\n            case SDK_VERSION:\n            case RUNTIME_VERSION:\n            default:\n              message = `The inferred value is \"${inferredValue}\", but it is set to \"${currentlyConfiguredValue}\".`;\n          }\n          WarningAggregator.addWarningAndroid(`AndroidManifest.xml key \"${key}\"`, message, FYI_URL);\n        }\n      }\n    }\n  }\n\n  if (isLikelyFirstIOSPublish || isLikelyFirstAndroidPublish) {\n    let platformSpecificMessage: string;\n\n    if (isLikelyFirstIOSPublish && !isLikelyFirstAndroidPublish) {\n      platformSpecificMessage =\n        '🚀 It looks like this your first iOS publish for this project! ' +\n        `We've automatically set some configuration values in Expo.plist. `;\n    } else if (!isLikelyFirstIOSPublish && isLikelyFirstAndroidPublish) {\n      platformSpecificMessage =\n        '🚀 It looks like this your first Android publish for this project! ' +\n        `We've automatically set some configuration values in AndroidManifest.xml. `;\n    } else {\n      platformSpecificMessage =\n        '🚀 It looks like this your first publish for this project! ' +\n        `We've automatically set some configuration values in Expo.plist and AndroidManifest.xml. `;\n    }\n\n    logger.global.warn(\n      platformSpecificMessage +\n        `You'll need to make and release a new build before your users can download the update ` +\n        'you just published.'\n    );\n  }\n}\n\n/** The code below here is duplicated from expo-cli currently **/\n\n// TODO: it's silly and kind of fragile that we look at app config to determine\n// the ios project paths. Overall this function needs to be revamped, just a\n// placeholder for now! Make this more robust when we support applying config\n// at any time (currently it's only applied on eject).\nexport function getIOSPaths(projectRoot: string) {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  const projectName = exp.name;\n  if (!projectName) {\n    throw new Error('Your project needs a name in app.json/app.config.js.');\n  }\n\n  const iosProjectDirectory = path.join(\n    projectRoot,\n    'ios',\n    IOSConfig.XcodeUtils.sanitizedName(projectName)\n  );\n  const iosSupportingDirectory = path.join(\n    projectRoot,\n    'ios',\n    IOSConfig.XcodeUtils.sanitizedName(projectName),\n    'Supporting'\n  );\n  const iconPath = path.join(iosProjectDirectory, 'Assets.xcassets', 'AppIcon.appiconset');\n\n  return {\n    projectName,\n    iosProjectDirectory,\n    iosSupportingDirectory,\n    iconPath,\n  };\n}\n"],"mappings":"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"}