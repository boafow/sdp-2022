{"version":3,"file":"ProjectAssets.js","names":["EXPO_CDN","resolveGoogleServicesFile","projectRoot","manifest","android","googleServicesFile","contents","fs","readFile","path","resolve","ios","getAssetFieldPathsForManifestAsync","sdkAssetFieldPaths","ExpSchema","getAssetSchemasAsync","sdkVersion","filter","assetSchema","get","resolveManifestAssets","resolver","strict","assetSchemas","urls","Promise","all","map","manifestField","pathOrURL","test","existsSync","err","Error","localAssetPath","forEach","index","set","e","logMethod","ProjectUtils","logWarning","logError","message","_configureExpForAssets","exp","assets","assetBundlePatterns","fullPatterns","p","join","logger","global","info","bundledAssets","Set","asset","file","files","shouldBundle","__packager_asset","some","minimatch","logDebug","fileHashes","hash","add","type","publishAssetsAsync","options","exportAssetsAsync","hostedUrl","assetPath","outputDir","bundles","experimentalBundle","assert","uniqBy","Object","values","flatMap","bundle","assetCdnPath","urljoin","collectAssets","length","saveAssetsAsync","uploadAssetsAsync","quiet","fetchMissingAssetsAsync","paths","user","UserManager","ensureLoggedInAsync","api","ApiV2","clientForUser","result","postAsync","keys","metas","metadata","missing","key","exists","logAssetTask","action","pathName","relativePath","replace","collectAssetPaths","keyChunks","chunk","formData","FormData","append","createReadStream","uploadFormDataAsync","promises","push","copy","hostedAssetPrefix","manifestAssets","absolutePath","md5hex"],"sources":["../src/ProjectAssets.ts"],"sourcesContent":["import { ExpoAppManifest, ExpoConfig } from '@expo/config';\nimport { BundleAssetWithFileHashes, BundleOutput } from '@expo/dev-server';\nimport assert from 'assert';\nimport FormData from 'form-data';\nimport fs from 'fs-extra';\nimport chunk from 'lodash/chunk';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\nimport uniqBy from 'lodash/uniqBy';\nimport md5hex from 'md5hex';\nimport minimatch from 'minimatch';\nimport path from 'path';\nimport urljoin from 'url-join';\n\nimport { ApiV2, ExpSchema, Logger as logger, ProjectUtils, UserManager } from './internal';\n\nconst EXPO_CDN = 'https://classic-assets.eascdn.net';\n\ntype ManifestAsset = { fileHashes: string[]; files: string[]; hash: string };\n\nexport type Asset = ManifestAsset | BundleAssetWithFileHashes;\n\ntype ManifestResolutionError = Error & {\n  localAssetPath?: string;\n  manifestField?: string;\n};\n\ntype BundlesByPlatform = { android?: BundleOutput; ios?: BundleOutput };\n\ntype ExportAssetsOptions = {\n  projectRoot: string;\n  exp: ExpoAppManifest;\n  hostedUrl: string;\n  assetPath: string;\n  bundles: BundlesByPlatform;\n  outputDir?: string;\n  experimentalBundle?: boolean;\n};\n\nexport async function resolveGoogleServicesFile(projectRoot: string, manifest: ExpoConfig) {\n  if (manifest.android?.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.android.googleServicesFile),\n      'utf8'\n    );\n    manifest.android.googleServicesFile = contents;\n  }\n  if (manifest.ios?.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.ios.googleServicesFile),\n      'base64'\n    );\n    manifest.ios.googleServicesFile = contents;\n  }\n}\n\n/**\n * Get all fields in the manifest that match assets, then filter the ones that aren't set.\n *\n * @param manifest\n * @returns Asset fields that the user has set like [\"icon\", \"splash.image\", ...]\n */\nasync function getAssetFieldPathsForManifestAsync(manifest: ExpoConfig): Promise<string[]> {\n  // String array like [\"icon\", \"notification.icon\", \"loading.icon\", \"loading.backgroundImage\", \"ios.icon\", ...]\n  const sdkAssetFieldPaths = await ExpSchema.getAssetSchemasAsync(manifest.sdkVersion);\n  return sdkAssetFieldPaths.filter(assetSchema => get(manifest, assetSchema));\n}\n\nexport async function resolveManifestAssets({\n  projectRoot,\n  manifest,\n  resolver,\n  strict = false,\n}: {\n  projectRoot: string;\n  manifest: ExpoConfig;\n  resolver: (assetPath: string) => Promise<string>;\n  strict?: boolean;\n}) {\n  try {\n    // Asset fields that the user has set like [\"icon\", \"splash.image\"]\n    const assetSchemas = await getAssetFieldPathsForManifestAsync(manifest);\n    // Get the URLs\n    const urls = await Promise.all(\n      assetSchemas.map(async manifestField => {\n        const pathOrURL = get(manifest, manifestField);\n        if (/^https?:\\/\\//.test(pathOrURL)) {\n          // It's a remote URL\n          return pathOrURL;\n        } else if (fs.existsSync(path.resolve(projectRoot, pathOrURL))) {\n          return await resolver(pathOrURL);\n        } else {\n          const err: ManifestResolutionError = new Error('Could not resolve local asset.');\n          err.localAssetPath = pathOrURL;\n          err.manifestField = manifestField;\n          throw err;\n        }\n      })\n    );\n\n    // Set the corresponding URL fields\n    assetSchemas.forEach((manifestField, index: number) =>\n      set(manifest, `${manifestField}Url`, urls[index])\n    );\n  } catch (e: any) {\n    let logMethod = ProjectUtils.logWarning;\n    if (strict) {\n      logMethod = ProjectUtils.logError;\n    }\n    if (e.localAssetPath) {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Unable to resolve asset \"${e.localAssetPath}\" from \"${e.manifestField}\" in your app.json or app.config.js`\n      );\n    } else {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Warning: Unable to resolve manifest assets. Icons might not work. ${e.message}.`\n      );\n    }\n\n    if (strict) {\n      throw new Error('Resolving assets failed.');\n    }\n  }\n}\n\n/**\n * Configures exp, preparing it for asset export\n *\n * @modifies {exp}\n *\n */\nasync function _configureExpForAssets(projectRoot: string, exp: ExpoAppManifest, assets: Asset[]) {\n  // Add google services file if it exists\n  await resolveGoogleServicesFile(projectRoot, exp);\n\n  // Convert asset patterns to a list of asset strings that match them.\n  // Assets strings are formatted as `asset_<hash>.<type>` and represent\n  // the name that the file will have in the app bundle. The `asset_` prefix is\n  // needed because android doesn't support assets that start with numbers.\n  if (exp.assetBundlePatterns) {\n    const fullPatterns: string[] = exp.assetBundlePatterns.map((p: string) =>\n      path.join(projectRoot, p)\n    );\n    // Only log the patterns in debug mode, if they aren't already defined in the app.json, then all files will be targeted.\n    logger.global.info('\\nProcessing asset bundle patterns:');\n    fullPatterns.forEach(p => logger.global.info('- ' + p));\n\n    // The assets returned by the RN packager has duplicates so make sure we\n    // only bundle each once.\n    const bundledAssets = new Set<string>();\n    for (const asset of assets) {\n      const file = asset.files && asset.files[0];\n      const shouldBundle =\n        '__packager_asset' in asset &&\n        asset.__packager_asset &&\n        file &&\n        fullPatterns.some((p: string) => minimatch(file, p));\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `${shouldBundle ? 'Include' : 'Exclude'} asset ${file}`\n      );\n      if (shouldBundle) {\n        asset.fileHashes.forEach(hash =>\n          bundledAssets.add(\n            'asset_' + hash + ('type' in asset && asset.type ? '.' + asset.type : '')\n          )\n        );\n      }\n    }\n    exp.bundledAssets = [...bundledAssets];\n    delete exp.assetBundlePatterns;\n  }\n\n  return exp;\n}\n\nexport async function publishAssetsAsync(\n  options: Pick<ExportAssetsOptions, 'projectRoot' | 'exp' | 'bundles'>\n) {\n  return exportAssetsAsync({\n    ...options,\n    hostedUrl: EXPO_CDN,\n    assetPath: '~assets',\n  });\n}\n\nexport async function exportAssetsAsync({\n  projectRoot,\n  exp,\n  hostedUrl,\n  assetPath,\n  outputDir,\n  bundles,\n  experimentalBundle,\n}: ExportAssetsOptions) {\n  logger.global.info('Analyzing assets');\n\n  let assets: Asset[];\n  if (experimentalBundle) {\n    assert(outputDir, 'outputDir must be specified when exporting to EAS');\n    assets = uniqBy(\n      Object.values(bundles).flatMap(bundle => bundle!.assets),\n      asset => asset.hash\n    );\n  } else {\n    const assetCdnPath = urljoin(hostedUrl, assetPath);\n    assets = await collectAssets(projectRoot, exp, assetCdnPath, bundles);\n  }\n\n  logger.global.info('Saving assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    if (outputDir) {\n      await saveAssetsAsync(projectRoot, assets, outputDir);\n    } else {\n      // No output directory defined, use remote url.\n      await uploadAssetsAsync(projectRoot, assets);\n    }\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return { exp, assets };\n}\n\n/**\n * Collect list of assets missing on host\n *\n * @param paths asset paths found locally that need to be uploaded.\n */\nasync function fetchMissingAssetsAsync(paths: string[]): Promise<string[]> {\n  const user = await UserManager.ensureLoggedInAsync();\n  const api = ApiV2.clientForUser(user);\n  const result = await api.postAsync('assets/metadata', { keys: paths });\n\n  const metas = result.metadata;\n  const missing = paths.filter(key => !metas[key].exists);\n  return missing;\n}\n\nfunction logAssetTask(projectRoot: string, action: 'uploading' | 'saving', pathName: string) {\n  ProjectUtils.logDebug(projectRoot, 'expo', `${action} ${pathName}`);\n\n  const relativePath = pathName.replace(projectRoot, '');\n  logger.global.info({ quiet: true }, `${action} ${relativePath}`);\n}\n\n// TODO(jesse): Add analytics for upload\nasync function uploadAssetsAsync(projectRoot: string, assets: Asset[]) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = collectAssetPaths(assets);\n\n  const missing = await fetchMissingAssetsAsync(Object.keys(paths));\n\n  if (missing.length === 0) {\n    logger.global.info({ quiet: true }, `No assets changed, skipped.`);\n    return;\n  }\n\n  const keyChunks = chunk(missing, 5);\n\n  // Upload them in chunks of 5 to prevent network and system issues.\n  for (const keys of keyChunks) {\n    const formData = new FormData();\n    for (const key of keys) {\n      const pathName = paths[key];\n\n      logAssetTask(projectRoot, 'uploading', pathName);\n\n      formData.append(key, fs.createReadStream(pathName), pathName);\n    }\n\n    // TODO: Document what's going on\n    const user = await UserManager.ensureLoggedInAsync();\n    const api = ApiV2.clientForUser(user);\n    await api.uploadFormDataAsync('assets/upload', formData);\n  }\n}\n\nfunction collectAssetPaths(assets: Asset[]): Record<string, string> {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths: { [fileHash: string]: string } = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path: string, index: number) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n  return paths;\n}\n\nasync function saveAssetsAsync(projectRoot: string, assets: Asset[], outputDir: string) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = collectAssetPaths(assets);\n\n  // save files one chunk at a time\n  const keyChunks = chunk(Object.keys(paths), 5);\n  for (const keys of keyChunks) {\n    const promises = [];\n    for (const key of keys) {\n      const pathName = paths[key];\n\n      logAssetTask(projectRoot, 'saving', pathName);\n\n      const assetPath = path.resolve(outputDir, 'assets', key);\n\n      // copy file over to assetPath\n      promises.push(fs.copy(pathName, assetPath));\n    }\n    await Promise.all(promises);\n  }\n  logger.global.info('Files successfully saved.');\n}\n\n/**\n * Collects all the assets declared in the android app, ios app and manifest\n *\n * @param {string} hostedAssetPrefix\n *    The path where assets are hosted (ie) http://xxx.cloudfront.com/assets/\n *\n * @modifies {exp} Replaces relative asset paths in the manifest with hosted URLS\n *\n */\nasync function collectAssets(\n  projectRoot: string,\n  exp: ExpoAppManifest,\n  hostedAssetPrefix: string,\n  bundles: BundlesByPlatform\n): Promise<Asset[]> {\n  // Resolve manifest assets to their hosted URL and add them to the list of assets to\n  // be uploaded. Modifies exp.\n  const manifestAssets: Asset[] = [];\n  await resolveManifestAssets({\n    projectRoot,\n    manifest: exp,\n    async resolver(assetPath) {\n      const absolutePath = path.resolve(projectRoot, assetPath);\n      const contents = await fs.readFile(absolutePath);\n      const hash = md5hex(contents);\n      manifestAssets.push({ files: [absolutePath], fileHashes: [hash], hash });\n      return urljoin(hostedAssetPrefix, hash);\n    },\n    strict: true,\n  });\n\n  return [...Object.values(bundles).flatMap(bundle => bundle!.assets), ...manifestAssets];\n}\n"],"mappings":"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"}