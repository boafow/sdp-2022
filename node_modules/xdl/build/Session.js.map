{"version":3,"file":"Session.js","names":["_newIdentifier","type","bytes","uuidv4","Buffer","alloc","base64","toString","slug","replace","substring","clientIdAsync","clientId","UserSettings","getAsync","setClientIdAsync","token","setAsync"],"sources":["../src/Session.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nimport { UserSettings } from './internal';\n\nfunction _newIdentifier(type = 'c') {\n  const bytes = uuidv4(null, Buffer.alloc(16));\n  const base64 = bytes.toString('base64');\n  const slug = base64\n    // Replace + with - (see RFC 4648, sec. 5)\n    .replace(/\\+/g, '-')\n    // Replace / with _ (see RFC 4648, sec. 5)\n    .replace(/\\//g, '_')\n    // Drop '==' padding\n    .substring(0, 22);\n  return type + '_' + slug;\n}\n\nexport async function clientIdAsync(): Promise<string> {\n  let clientId = await UserSettings.getAsync('accessToken', null);\n  if (clientId === null) {\n    clientId = _newIdentifier();\n    await setClientIdAsync(clientId);\n  }\n  return clientId;\n}\n\nexport async function setClientIdAsync(token: string) {\n  await UserSettings.setAsync('accessToken', token);\n  return token;\n}\n"],"mappings":";;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA,SAASA,cAAc,CAACC,IAAI,GAAG,GAAG,EAAE;EAClC,MAAMC,KAAK,GAAG,IAAAC,UAAM,EAAC,IAAI,EAAEC,MAAM,CAACC,KAAK,CAAC,EAAE,CAAC,CAAC;EAC5C,MAAMC,MAAM,GAAGJ,KAAK,CAACK,QAAQ,CAAC,QAAQ,CAAC;EACvC,MAAMC,IAAI,GAAGF;EACX;EAAA,CACCG,OAAO,CAAC,KAAK,EAAE,GAAG;EACnB;EAAA,CACCA,OAAO,CAAC,KAAK,EAAE,GAAG;EACnB;EAAA,CACCC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;EACnB,OAAOT,IAAI,GAAG,GAAG,GAAGO,IAAI;AAC1B;AAEO,eAAeG,aAAa,GAAoB;EACrD,IAAIC,QAAQ,GAAG,MAAMC,wBAAY,CAACC,QAAQ,CAAC,aAAa,EAAE,IAAI,CAAC;EAC/D,IAAIF,QAAQ,KAAK,IAAI,EAAE;IACrBA,QAAQ,GAAGZ,cAAc,EAAE;IAC3B,MAAMe,gBAAgB,CAACH,QAAQ,CAAC;EAClC;EACA,OAAOA,QAAQ;AACjB;AAEO,eAAeG,gBAAgB,CAACC,KAAa,EAAE;EACpD,MAAMH,wBAAY,CAACI,QAAQ,CAAC,aAAa,EAAED,KAAK,CAAC;EACjD,OAAOA,KAAK;AACd"}