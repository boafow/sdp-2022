{"version":3,"file":"SimControl.js","names":["getDefaultSimulatorDeviceUDIDAsync","stdout","defaultDeviceUDID","spawnAsync","trim","getContainerPathAsync","udid","bundleIdentifier","CoreSimulator","isEnabled","xcrunAsync","deviceUDIDOrBooted","error","stderr","match","waitForDeviceToBootAsync","waitForActionAsync","action","bootAsync","openURLAsync","options","url","runBootAsync","openBundleIdAsync","device","getDeviceInfoAsync","catch","state","profileMethod","isSimulatorBootedAsync","getBootedSimulatorsAsync","simulatorDeviceInfo","listAsync","Object","values","devices","reduce","prev","runtime","concat","filter","find","bootedDevice","installAsync","simctlAsync","dir","uninstallAsync","parseSimControlJSONResults","input","JSON","parse","message","Logger","global","type","query","result","info","keys","runtimeSuffix","split","pop","osType","osVersionComponents","osVersion","join","sims","windowName","name","listSimulatorDevicesAsync","listDevicesAsync","AppleDevice","results","getConnectedDevices","map","DeviceName","ProductType","model","ProductVersion","deviceType","UniqueDeviceID","output","text","includes","lines","line","metadata","push","shutdownAsync","e","updatePermissionsAsync","permission","setAppearanceAsync","theme","eraseAsync","eraseAllAsync","addMediaAsync","mediaPath","captureScreenAsync","captureType","outputFilePath","path","extname","deleteUnavailableAsync","command","args","xcrunWithLogging","Boolean","isLicenseOutOfDate","lower","toLowerCase","isXcrunInstalledAsync","execSync","stdio","debug","parseXcrunError","XDLError","chalk","bold","Array","isArray"],"sources":["../src/SimControl.ts"],"sourcesContent":["import spawnAsync, { SpawnOptions, SpawnResult } from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport { execSync } from 'child_process';\nimport path from 'path';\n\nimport { waitForActionAsync } from './apple/utils/waitForActionAsync';\nimport { AppleDevice, CoreSimulator, Logger, XDLError } from './internal';\nimport { profileMethod } from './utils/profileMethod';\n\ntype DeviceState = 'Shutdown' | 'Booted';\n\nexport type SimulatorDevice = {\n  availabilityError: 'runtime profile not found';\n  /**\n   * '/Users/name/Library/Developer/CoreSimulator/Devices/00E55DC0-0364-49DF-9EC6-77BE587137D4/data'\n   */\n  dataPath: string;\n  /**\n   * '/Users/name/Library/Logs/CoreSimulator/00E55DC0-0364-49DF-9EC6-77BE587137D4'\n   */\n  logPath: string;\n  /**\n   * '00E55DC0-0364-49DF-9EC6-77BE587137D4'\n   */\n  udid: string;\n  /**\n   * com.apple.CoreSimulator.SimRuntime.tvOS-13-4\n   */\n  runtime: string;\n  isAvailable: boolean;\n  /**\n   * 'com.apple.CoreSimulator.SimDeviceType.Apple-TV-1080p'\n   */\n  deviceTypeIdentifier: string;\n  state: DeviceState;\n  /**\n   * 'Apple TV'\n   */\n  name: string;\n\n  osType: OSType;\n  /**\n   * '13.4'\n   */\n  osVersion: string;\n  /**\n   * 'iPhone 11 (13.6)'\n   */\n  windowName: string;\n};\n\nexport type XCTraceDevice = {\n  /**\n   * '00E55DC0-0364-49DF-9EC6-77BE587137D4'\n   */\n  udid: string;\n  /**\n   * 'Apple TV'\n   */\n  name: string;\n\n  deviceType: 'device' | 'catalyst';\n  /**\n   * '13.4'\n   */\n  osVersion: string;\n};\n\ntype OSType = 'iOS' | 'tvOS' | 'watchOS' | 'macOS';\n\ntype PermissionName =\n  | 'all'\n  | 'calendar'\n  | 'contacts-limited'\n  | 'contacts'\n  | 'location'\n  | 'location-always'\n  | 'photos-add'\n  | 'photos'\n  | 'media-library'\n  | 'microphone'\n  | 'motion'\n  | 'reminders'\n  | 'siri';\n\ntype SimulatorDeviceList = {\n  devices: {\n    [runtime: string]: SimulatorDevice[];\n  };\n};\n\nexport async function getDefaultSimulatorDeviceUDIDAsync() {\n  try {\n    const { stdout: defaultDeviceUDID } = await spawnAsync('defaults', [\n      'read',\n      'com.apple.iphonesimulator',\n      'CurrentDeviceUDID',\n    ]);\n    return defaultDeviceUDID.trim();\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Returns the local path for the installed tar.app. Returns null when the app isn't installed.\n *\n * @param props.udid device udid.\n * @param props.bundleIdentifier bundle identifier for app\n * @returns local file path to installed app binary, e.g. '/Users/evanbacon/Library/Developer/CoreSimulator/Devices/EFEEA6EF-E3F5-4EDE-9B72-29EAFA7514AE/data/Containers/Bundle/Application/FA43A0C6-C2AD-442D-B8B1-EAF3E88CF3BF/Exponent-2.21.3.tar.app'\n */\nexport async function getContainerPathAsync({\n  udid,\n  bundleIdentifier,\n}: {\n  udid: string;\n  bundleIdentifier: string;\n}): Promise<string | null> {\n  if (CoreSimulator.isEnabled()) {\n    return CoreSimulator.getContainerPathAsync({ udid, bundleIdentifier });\n  }\n  try {\n    const { stdout } = await xcrunAsync([\n      'simctl',\n      'get_app_container',\n      deviceUDIDOrBooted(udid),\n      bundleIdentifier,\n    ]);\n    return stdout.trim();\n  } catch (error: any) {\n    if (error.stderr?.match(/No such file or directory/)) {\n      return null;\n    }\n    throw error;\n  }\n}\n\nexport async function waitForDeviceToBootAsync({\n  udid,\n}: Pick<SimulatorDevice, 'udid'>): Promise<SimulatorDevice | null> {\n  return waitForActionAsync<SimulatorDevice | null>({\n    action: () => bootAsync({ udid }),\n  });\n}\n\nexport async function openURLAsync(options: { udid?: string; url: string }): Promise<void> {\n  try {\n    // Skip logging since this is likely to fail.\n    await xcrunAsync(['simctl', 'openurl', deviceUDIDOrBooted(options.udid), options.url]);\n  } catch (error: any) {\n    if (!error.stderr?.match(/Unable to lookup in current state: Shut/)) {\n      throw error;\n    }\n    // If the device was in a weird in-between state (\"Shutting Down\" or \"Shutdown\"), then attempt to reboot it and try again.\n    // This can happen when quitting the Simulator app, and immediately pressing `i` to reopen the project.\n\n    // First boot the simulator\n    await runBootAsync({ udid: deviceUDIDOrBooted(options.udid) });\n\n    // Finally, try again...\n    return await openURLAsync(options);\n  }\n}\n\nexport async function openBundleIdAsync(options: {\n  udid?: string;\n  bundleIdentifier: string;\n}): Promise<SpawnResult> {\n  return xcrunAsync([\n    'simctl',\n    'launch',\n    deviceUDIDOrBooted(options.udid),\n    options.bundleIdentifier,\n  ]);\n}\n\n// This will only boot in headless mode if the Simulator app is not running.\nexport async function bootAsync({ udid }: { udid: string }): Promise<SimulatorDevice | null> {\n  if (CoreSimulator.isEnabled()) {\n    const device = await CoreSimulator.getDeviceInfoAsync({ udid }).catch(() => null);\n    if (device?.state === 'Booted') {\n      return device;\n    }\n    await runBootAsync({ udid });\n    return await profileMethod(CoreSimulator.getDeviceInfoAsync)({ udid });\n  }\n\n  // TODO: Deprecate\n  await runBootAsync({ udid });\n  return await isSimulatorBootedAsync({ udid });\n}\n\nasync function getBootedSimulatorsAsync(): Promise<SimulatorDevice[]> {\n  const simulatorDeviceInfo = await listAsync('devices');\n  return Object.values(simulatorDeviceInfo.devices).reduce((prev, runtime) => {\n    return prev.concat(runtime.filter(device => device.state === 'Booted'));\n  }, []);\n}\n\nasync function isSimulatorBootedAsync({\n  udid,\n}: {\n  udid?: string;\n}): Promise<SimulatorDevice | null> {\n  // Simulators can be booted even if the app isn't running :(\n  const devices = await getBootedSimulatorsAsync();\n  if (udid) {\n    return devices.find(bootedDevice => bootedDevice.udid === udid) ?? null;\n  } else {\n    return devices[0] ?? null;\n  }\n}\n\nexport async function runBootAsync({ udid }: { udid: string }) {\n  try {\n    // Skip logging since this is likely to fail.\n    await xcrunAsync(['simctl', 'boot', udid]);\n  } catch (error: any) {\n    if (!error.stderr?.match(/Unable to boot device in current state: Booted/)) {\n      throw error;\n    }\n  }\n}\n\nexport async function installAsync(options: { udid: string; dir: string }): Promise<any> {\n  return simctlAsync(['install', deviceUDIDOrBooted(options.udid), options.dir]);\n}\n\nexport async function uninstallAsync(options: {\n  udid?: string;\n  bundleIdentifier: string;\n}): Promise<any> {\n  return simctlAsync(['uninstall', deviceUDIDOrBooted(options.udid), options.bundleIdentifier]);\n}\n\nfunction parseSimControlJSONResults(input: string): any {\n  try {\n    return JSON.parse(input);\n  } catch (error: any) {\n    // Nov 15, 2020: Observed this can happen when opening the simulator and the simulator prompts the user to update the XC command line tools.\n    // Unexpected token I in JSON at position 0\n    if (error.message.match('Unexpected token')) {\n      Logger.global.error(`Apple's simctl returned malformed JSON:\\n${input}`);\n    }\n    throw error;\n  }\n}\n\n// TODO: Compare with\n// const results = await SimControl.xcrunAsync(['instruments', '-s']);\nexport async function listAsync(\n  type: 'devices' | 'devicetypes' | 'runtimes' | 'pairs',\n  query?: string | 'available'\n): Promise<SimulatorDeviceList> {\n  const result = await simctlAsync(['list', type, '--json', query]);\n  const info = parseSimControlJSONResults(result.stdout) as SimulatorDeviceList;\n\n  for (const runtime of Object.keys(info.devices)) {\n    // Given a string like 'com.apple.CoreSimulator.SimRuntime.tvOS-13-4'\n    const runtimeSuffix = runtime.split('com.apple.CoreSimulator.SimRuntime.').pop()!;\n    // Create an array [tvOS, 13, 4]\n    const [osType, ...osVersionComponents] = runtimeSuffix.split('-');\n    // Join the end components [13, 4] -> '13.4'\n    const osVersion = osVersionComponents.join('.');\n    const sims = info.devices[runtime];\n    for (const device of sims) {\n      device.runtime = runtime;\n      device.osVersion = osVersion;\n      device.windowName = `${device.name} (${osVersion})`;\n      device.osType = osType as OSType;\n    }\n  }\n  return info;\n}\n\nexport async function listSimulatorDevicesAsync() {\n  if (CoreSimulator.isEnabled()) {\n    return CoreSimulator.listDevicesAsync();\n  }\n  const simulatorDeviceInfo = await listAsync('devices');\n  return Object.values(simulatorDeviceInfo.devices).reduce((prev, runtime) => {\n    return prev.concat(runtime);\n  }, []);\n}\n\n/**\n * Get a list of all connected devices.\n */\nexport async function listDevicesAsync(): Promise<XCTraceDevice[]> {\n  if (AppleDevice.isEnabled()) {\n    const results = await AppleDevice.getConnectedDevices();\n    // TODO: Add support for osType (ipad, watchos, etc)\n    return results.map(device => ({\n      // TODO: Better name\n      name: device.DeviceName ?? device.ProductType ?? 'unknown ios device',\n      model: device.ProductType,\n      osVersion: device.ProductVersion,\n      deviceType: 'device',\n      udid: device.UniqueDeviceID,\n    }));\n  }\n\n  const { output } = await xcrunAsync(['xctrace', 'list', 'devices']);\n\n  const text = output.join('');\n  const devices: XCTraceDevice[] = [];\n  if (!text.includes('== Simulators ==')) {\n    return [];\n  }\n\n  const lines = text.split('\\n');\n  for (const line of lines) {\n    if (line === '== Simulators ==') {\n      break;\n    }\n    const device = line.match(/(.*?) (\\(([0-9.]+)\\) )?\\(([0-9A-F-]+)\\)/i);\n    if (device) {\n      const [, name, , osVersion, udid] = device;\n      const metadata: XCTraceDevice = {\n        name,\n        udid,\n        osVersion: osVersion ?? '??',\n        deviceType: osVersion ? 'device' : 'catalyst',\n      };\n\n      devices.push(metadata);\n    }\n  }\n\n  return devices;\n}\n\nexport async function shutdownAsync(udid?: string) {\n  try {\n    return simctlAsync(['shutdown', deviceUDIDOrBooted(udid)]);\n  } catch (e: any) {\n    if (!e.message?.includes('No devices are booted.')) {\n      throw e;\n    }\n  }\n  return null;\n}\n\n// Some permission changes will terminate the application if running\nexport async function updatePermissionsAsync(\n  udid: string,\n  action: 'grant' | 'revoke' | 'reset',\n  permission: PermissionName,\n  bundleIdentifier?: string\n) {\n  return simctlAsync(['privacy', deviceUDIDOrBooted(udid), action, permission, bundleIdentifier]);\n}\n\nexport async function setAppearanceAsync(udid: string, theme: 'light' | 'dark') {\n  return simctlAsync(['ui', deviceUDIDOrBooted(udid), theme]);\n}\n\n// Cannot be invoked unless the simulator is `shutdown`\nexport async function eraseAsync(udid: string) {\n  return simctlAsync(['erase', deviceUDIDOrBooted(udid)]);\n}\n\nexport async function eraseAllAsync() {\n  return simctlAsync(['erase', 'all']);\n}\n\n// Add photos and videos to the simulator's gallery\nexport async function addMediaAsync(udid: string, mediaPath: string) {\n  return simctlAsync(['addmedia', deviceUDIDOrBooted(udid), mediaPath]);\n}\n\nexport async function captureScreenAsync(\n  udid: string,\n  captureType: 'screenshot' | 'recordVideo',\n  outputFilePath: string\n) {\n  return simctlAsync([\n    'io',\n    deviceUDIDOrBooted(udid),\n    captureType,\n    `—type=${path.extname(outputFilePath)}`,\n    outputFilePath,\n  ]);\n}\n\n// Clear all unused simulators\nexport async function deleteUnavailableAsync() {\n  return simctlAsync(['delete', 'unavailable']);\n}\n\nexport async function simctlAsync(\n  [command, ...args]: (string | undefined)[],\n  options?: SpawnOptions\n): Promise<SpawnResult> {\n  return xcrunWithLogging(\n    // @ts-ignore\n    ['simctl', command, ...args.filter(Boolean)],\n    options\n  );\n}\n\nfunction deviceUDIDOrBooted(udid?: string): string {\n  return udid ? udid : 'booted';\n}\n\nexport function isLicenseOutOfDate(text: string) {\n  if (!text) {\n    return false;\n  }\n\n  const lower = text.toLowerCase();\n  return lower.includes('xcode') && lower.includes('license');\n}\n\nexport async function isXcrunInstalledAsync() {\n  try {\n    execSync('xcrun --version', { stdio: 'ignore' });\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport async function xcrunAsync(args: string[], options?: SpawnOptions) {\n  Logger.global.debug('Running: xcrun ' + args.join(' '));\n  try {\n    return await spawnAsync('xcrun', args, options);\n  } catch (e: any) {\n    throw parseXcrunError(e);\n  }\n}\n\nexport function parseXcrunError(e: any): Error {\n  if (isLicenseOutOfDate(e.stdout) || isLicenseOutOfDate(e.stderr)) {\n    return new XDLError(\n      'XCODE_LICENSE_NOT_ACCEPTED',\n      'Xcode license is not accepted. Please run `sudo xcodebuild -license`.'\n    );\n  } else if (e.stderr?.includes('not a developer tool or in PATH')) {\n    return new XDLError(\n      'SIMCTL_NOT_AVAILABLE',\n      `You may need to run ${chalk.bold(\n        'sudo xcode-select -s /Applications/Xcode.app'\n      )} and try again.`\n    );\n  }\n  // Attempt to craft a better error message...\n  if (Array.isArray(e.output)) {\n    e.message += '\\n' + e.output.join('\\n').trim();\n  } else if (e.stderr) {\n    e.message += '\\n' + e.stderr;\n  }\n  return e;\n}\n\nexport async function xcrunWithLogging(\n  args: string[],\n  options?: SpawnOptions\n): Promise<SpawnResult> {\n  try {\n    return await xcrunAsync(args, options);\n  } catch (e: any) {\n    Logger.global.error(`Error running \\`xcrun ${args.join(' ')}\\`: ${e.stderr || e.message}`);\n    throw e;\n  }\n}\n"],"mappings":"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"}