{"version":3,"file":"User.js","names":["ANONYMOUS_USERNAME","UserManagerInstance","Semaphore","_getSessionLock","acquire","currentUser","_currentUser","accessToken","sessionSecret","userData","_readUserData","e","Logger","global","warn","release","getGlobalInstance","__globalInstance","initialize","getProjectOwner","user","exp","kind","owner","XDLError","username","loginAsync","loginType","loginArgs","Error","apiAnonymous","ApiV2Client","clientForUser","loginResp","postAsync","password","otp","error","_getProfileAsync","currentConnection","registerAsync","actor","getCurrentUserAsync","logoutAsync","registeredUser","createOrUpdateUserAsync","connection","email","givenName","familyName","console","message","ensureLoggedInAsync","ConnectionStatus","isOffline","silent","_interactiveAuthenticationCallbackAsync","setInteractiveAuthenticationCallback","callback","auth","UserSettings","getAsync","isEmpty","options","data","code","getCurrentUserOnlyAsync","getCurrentRobotUserOnlyAsync","getCurrentUsernameAsync","token","getSessionAsync","api","updatedUser","_prepareAuth0Profile","_parseAuth0Profile","Analytics","logEvent","userId","deleteKeyAsync","getFeatureGatingAsync","featureGates","FeatureGating","FeatureGateEnvOverrides","forgotPasswordAsync","usernameOrEmail","user_type","setAsync","UnifiedAnalytics","identifyUser","userType","primaryAccountId","rawProfile","Object","keys","reduce","p","key","camelCase","niceProfile","snakeCase"],"sources":["../src/User.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport camelCase from 'lodash/camelCase';\nimport isEmpty from 'lodash/isEmpty';\nimport snakeCase from 'lodash/snakeCase';\n\nimport {\n  Analytics,\n  ApiV2 as ApiV2Client,\n  ConnectionStatus,\n  FeatureGateEnvOverrides,\n  FeatureGating,\n  Logger,\n  Semaphore,\n  UnifiedAnalytics,\n  UserData,\n  UserSettings,\n  XDLError,\n} from './internal';\n\nexport type User = {\n  kind: 'user';\n  // required\n  username: string;\n  nickname: string;\n  userId: string;\n  picture: string;\n  // optional\n  email?: string;\n  emailVerified?: boolean;\n  givenName?: string;\n  familyName?: string;\n  userMetadata: {\n    onboarded: boolean;\n    legacy?: boolean;\n  };\n  // auth methods\n  currentConnection: ConnectionType;\n  sessionSecret?: string;\n  accessToken?: string;\n};\n\nexport type RobotUser = {\n  kind: 'robot';\n  // required\n  userId: string;\n  username: string; // backwards compatible to show in current UI -- based on given name or placeholder\n  // optional\n  givenName?: string;\n  // auth methods\n  currentConnection: ConnectionType;\n  sessionSecret?: never; // robot users only use accessToken -- this prevents some extraneous typecasting\n  accessToken?: string;\n};\n\nexport type LegacyUser = {\n  kind: 'legacyUser';\n  username: string;\n  userMetadata: {\n    legacy: boolean;\n    needsPasswordMigration: boolean;\n  };\n};\n\nexport type UserOrLegacyUser = User | LegacyUser;\n\nexport type ConnectionType =\n  | 'Access-Token-Authentication'\n  | 'Username-Password-Authentication'\n  | 'facebook'\n  | 'google-oauth2'\n  | 'github';\n\nexport type RegistrationData = {\n  username: string;\n  password: string;\n  email?: string;\n  givenName?: string;\n  familyName?: string;\n};\n\n// note: user-token isn't listed here because it's a non-persistent pre-authenticated method\nexport type LoginType = 'user-pass' | 'facebook' | 'google' | 'github';\n\nexport const ANONYMOUS_USERNAME = 'anonymous';\n\nexport class UserManagerInstance {\n  _currentUser: User | RobotUser | null = null;\n  _getSessionLock = new Semaphore();\n  _interactiveAuthenticationCallbackAsync?: () => Promise<User>;\n\n  static getGlobalInstance() {\n    if (!__globalInstance) {\n      __globalInstance = new UserManagerInstance();\n    }\n    return __globalInstance;\n  }\n\n  initialize() {\n    this._currentUser = null;\n    this._getSessionLock = new Semaphore();\n  }\n\n  /**\n   * Get the account and project name using a user and Expo config.\n   * This will validate if the owner field is set when using a robot account.\n   */\n  getProjectOwner(user: User | RobotUser, exp: ExpoConfig): string {\n    if (user.kind === 'robot' && !exp.owner) {\n      throw new XDLError(\n        'ROBOT_OWNER_ERROR',\n        'The \"owner\" manifest property is required when using robot users. See: https://docs.expo.dev/versions/latest/config/app/#owner'\n      );\n    }\n\n    return exp.owner || user.username;\n  }\n\n  /**\n   * Logs in a user for a given login type.\n   *\n   * Valid login types are:\n   *  - \"user-pass\": Username and password authentication\n   *\n   * If the login type is \"user-pass\", we directly make the request to www\n   * to login a user.\n   */\n  async loginAsync(\n    loginType: LoginType,\n    loginArgs?: { username: string; password: string; otp?: string }\n  ): Promise<User> {\n    if (loginType === 'user-pass') {\n      if (!loginArgs) {\n        throw new Error(`The 'user-pass' login type requires a username and password.`);\n      }\n      const apiAnonymous = ApiV2Client.clientForUser();\n      const loginResp = await apiAnonymous.postAsync('auth/loginAsync', {\n        username: loginArgs.username,\n        password: loginArgs.password,\n        otp: loginArgs.otp,\n      });\n      if (loginResp.error) {\n        throw new XDLError('INVALID_USERNAME_PASSWORD', loginResp['error_description']);\n      }\n      const user = await this._getProfileAsync({\n        currentConnection: 'Username-Password-Authentication',\n        sessionSecret: loginResp.sessionSecret,\n      });\n      return user as User;\n    } else {\n      throw new Error(`Invalid login type provided. Must be 'user-pass'.`);\n    }\n  }\n\n  async registerAsync(\n    userData: RegistrationData,\n    user: UserOrLegacyUser | null = null\n  ): Promise<User> {\n    let actor: UserOrLegacyUser | RobotUser | null = user;\n\n    if (!actor) {\n      actor = await this.getCurrentUserAsync();\n    }\n\n    if (actor) {\n      await this.logoutAsync();\n      actor = null;\n    }\n\n    try {\n      // Create or update the profile\n      let registeredUser = await this.createOrUpdateUserAsync({\n        connection: 'Username-Password-Authentication', // Always create/update username password\n        email: userData.email,\n        givenName: userData.givenName,\n        familyName: userData.familyName,\n        username: userData.username,\n        password: userData.password,\n      });\n\n      registeredUser = await this.loginAsync('user-pass', {\n        username: userData.username,\n        password: userData.password,\n      });\n\n      return registeredUser;\n    } catch (e: any) {\n      console.error(e);\n      throw new XDLError('REGISTRATION_ERROR', 'Error registering user: ' + e.message);\n    }\n  }\n\n  /**\n   * Ensure user is logged in and has a valid token.\n   *\n   * If there are any issues with the login, this method throws.\n   */\n  async ensureLoggedInAsync(): Promise<User | RobotUser> {\n    if (ConnectionStatus.isOffline()) {\n      throw new XDLError('NETWORK_REQUIRED', \"Can't verify user without network access\");\n    }\n\n    let user = await this.getCurrentUserAsync({ silent: true });\n    if (!user && this._interactiveAuthenticationCallbackAsync) {\n      user = await this._interactiveAuthenticationCallbackAsync();\n    }\n    if (!user) {\n      throw new XDLError('NOT_LOGGED_IN', 'Not logged in');\n    }\n    return user;\n  }\n\n  setInteractiveAuthenticationCallback(callback: () => Promise<User>) {\n    this._interactiveAuthenticationCallbackAsync = callback;\n  }\n\n  async _readUserData(): Promise<UserData | null> {\n    let auth = await UserSettings.getAsync('auth', null);\n    if (isEmpty(auth)) {\n      // XXX(ville):\n      // We sometimes read an empty string from ~/.expo/state.json,\n      // even though it has valid credentials in it.\n      // We don't know why.\n      // An empty string can't be parsed as JSON, so an empty default object is returned.\n      // In this case, retrying usually helps.\n      auth = await UserSettings.getAsync('auth', null);\n    }\n    if (typeof auth === 'undefined') {\n      return null;\n    }\n    return auth;\n  }\n\n  /**\n   * Returns cached user data without hitting our backend. Only works for 'Username-Password-Authentication' flow. Does not work with 'Access-Token-Authentication' flow.\n   */\n  getCachedUserDataAsync = async (): Promise<UserData | null> => {\n    await this._getSessionLock.acquire();\n\n    try {\n      const currentUser = this._currentUser;\n      // If user is cached and there is an accessToken or sessionSecret, return the user\n      if (currentUser && (currentUser.accessToken || currentUser.sessionSecret)) {\n        return currentUser;\n      }\n\n      const userData = await this._readUserData();\n\n      // // No token, no session, no current user. Need to login\n      if (!userData?.sessionSecret) {\n        return null;\n      }\n\n      return userData;\n    } catch (e: any) {\n      Logger.global.warn(e);\n      return null;\n    } finally {\n      this._getSessionLock.release();\n    }\n  };\n\n  /**\n   * Get the current user based on the available token.\n   * If there is no current token, returns null.\n   */\n  async getCurrentUserAsync(options?: { silent?: boolean }): Promise<User | RobotUser | null> {\n    await this._getSessionLock.acquire();\n\n    try {\n      const currentUser = this._currentUser;\n\n      // If user is cached and there is an accessToken or sessionSecret, return the user\n      if (currentUser && (currentUser.accessToken || currentUser.sessionSecret)) {\n        return currentUser;\n      }\n\n      if (ConnectionStatus.isOffline()) {\n        return null;\n      }\n\n      const data = await this._readUserData();\n      const accessToken = UserSettings.accessToken();\n\n      // No token, no session, no current user. Need to login\n      if (!accessToken && !data?.sessionSecret) {\n        return null;\n      }\n\n      try {\n        if (accessToken) {\n          return await this._getProfileAsync({\n            accessToken,\n            currentConnection: 'Access-Token-Authentication',\n          });\n        }\n\n        return await this._getProfileAsync({\n          currentConnection: data?.currentConnection,\n          sessionSecret: data?.sessionSecret,\n        });\n      } catch (e: any) {\n        if (!(options && options.silent)) {\n          Logger.global.warn('Fetching the user profile failed');\n          Logger.global.warn(e);\n        }\n        if (e.code === 'UNAUTHORIZED_ERROR') {\n          return null;\n        }\n        throw e;\n      }\n    } finally {\n      this._getSessionLock.release();\n    }\n  }\n\n  /**\n   * Get the current user and check if it's a robot.\n   * If the user is not a robot, it will throw an error.\n   */\n  async getCurrentUserOnlyAsync(): Promise<User | null> {\n    const user = await this.getCurrentUserAsync();\n    if (user && user.kind !== 'user') {\n      throw new XDLError('ROBOT_ACCOUNT_ERROR', 'This action is not supported for robot users.');\n    }\n    return user;\n  }\n\n  /**\n   * Get the current user and check if it's a robot.\n   * If the user is not a robot, it will throw an error.\n   */\n  async getCurrentRobotUserOnlyAsync(): Promise<RobotUser | null> {\n    const user = await this.getCurrentUserAsync();\n    if (user && user.kind !== 'robot') {\n      throw new XDLError('USER_ACCOUNT_ERROR', 'This action is not supported for normal users.');\n    }\n    return user;\n  }\n\n  async getCurrentUsernameAsync(): Promise<string | null> {\n    const token = UserSettings.accessToken();\n    if (token) {\n      const user = await this.getCurrentUserAsync();\n      if (user?.username) {\n        return user.username;\n      }\n    }\n    const data = await this._readUserData();\n    if (data?.username) {\n      return data.username;\n    }\n    return null;\n  }\n\n  async getSessionAsync(): Promise<{ sessionSecret?: string; accessToken?: string } | null> {\n    const token = UserSettings.accessToken();\n    if (token) {\n      return { accessToken: token };\n    }\n    const data = await this._readUserData();\n    if (data?.sessionSecret) {\n      return { sessionSecret: data.sessionSecret };\n    }\n    return null;\n  }\n\n  /**\n   * Create or update a user.\n   */\n  async createOrUpdateUserAsync(userData: object): Promise<User | null> {\n    let currentUser = this._currentUser;\n    if (!currentUser) {\n      // attempt to get the current user\n      currentUser = await this.getCurrentUserAsync();\n    }\n\n    if (currentUser?.kind === 'robot') {\n      throw new XDLError('ROBOT_ACCOUNT_ERROR', 'This action is not available for robot users');\n    }\n\n    const api = ApiV2Client.clientForUser(currentUser);\n\n    const { user: updatedUser } = await api.postAsync('auth/createOrUpdateUser', {\n      userData: _prepareAuth0Profile(userData),\n    });\n\n    this._currentUser = {\n      ...this._currentUser,\n      ..._parseAuth0Profile(updatedUser),\n      kind: 'user',\n    } as User;\n\n    return this._currentUser;\n  }\n\n  /**\n   * Logout\n   */\n  async logoutAsync(): Promise<void> {\n    if (this._currentUser?.kind === 'robot') {\n      throw new XDLError('ROBOT_ACCOUNT_ERROR', 'This action is not available for robot users');\n    }\n\n    // Only send logout events events for users without access tokens\n    if (this._currentUser && !this._currentUser?.accessToken) {\n      Analytics.logEvent('Logout', {\n        userId: this._currentUser.userId,\n        currentConnection: this._currentUser.currentConnection,\n      });\n    }\n\n    this._currentUser = null;\n\n    // Delete saved auth info\n    await UserSettings.deleteKeyAsync('auth');\n  }\n\n  async getFeatureGatingAsync(): Promise<FeatureGating> {\n    const user = await this.ensureLoggedInAsync();\n    const api = ApiV2Client.clientForUser(user);\n    const { featureGates } = await api.getAsync('auth/user-feature-gates');\n    return new FeatureGating(featureGates, new FeatureGateEnvOverrides());\n  }\n\n  /**\n   * Forgot Password\n   */\n  async forgotPasswordAsync(usernameOrEmail: string): Promise<void> {\n    const apiAnonymous = ApiV2Client.clientForUser();\n    return apiAnonymous.postAsync('auth/forgotPasswordAsync', {\n      usernameOrEmail,\n    });\n  }\n\n  /**\n   * Get profile given token data. Errors if token is not valid or if no\n   * user profile is returned.\n   *\n   * This method is called by all public authentication methods of `UserManager`\n   * except `logoutAsync`. Therefore, we use this method as a way to:\n   *  - update the UserSettings store with the current token and user id\n   *  - update UserManager._currentUser\n   *  - Fire login analytics events\n   *\n   * Also updates UserManager._currentUser.\n   *\n   * @private\n   */\n  async _getProfileAsync({\n    currentConnection,\n    sessionSecret,\n    accessToken,\n  }: {\n    currentConnection?: ConnectionType;\n    sessionSecret?: string;\n    accessToken?: string;\n  }): Promise<User | RobotUser> {\n    let user;\n    const api = ApiV2Client.clientForUser({\n      sessionSecret,\n      accessToken,\n    });\n\n    user = await api.getAsync('auth/userInfo');\n\n    if (!user) {\n      throw new Error('Unable to fetch user.');\n    }\n\n    user = {\n      ..._parseAuth0Profile(user),\n      // We need to inherit the \"robot\" type only, the rest is considered \"user\" but returned as \"person\".\n      kind: user.user_type === 'robot' ? 'robot' : 'user',\n      currentConnection,\n      sessionSecret,\n      accessToken,\n    };\n\n    // Create a \"username\" to use in current terminal UI (e.g. expo whoami)\n    if (user.kind === 'robot') {\n      user.username = user.givenName ? `${user.givenName} (robot)` : 'robot';\n    }\n\n    // note: do not persist the authorization token, must be env-var only\n    if (!accessToken) {\n      await UserSettings.setAsync('auth', {\n        userId: user.userId,\n        username: user.username,\n        currentConnection,\n        sessionSecret,\n      });\n    }\n\n    // If no currentUser, or currentUser.id differs from profiles\n    // user id, that means we have a new login\n    if (\n      (!this._currentUser || this._currentUser.userId !== user.userId) &&\n      user.username &&\n      user.username !== ''\n    ) {\n      if (!accessToken) {\n        // Only send login events for users without access tokens\n        Analytics.logEvent('Login', {\n          userId: user.userId,\n          currentConnection: user.currentConnection,\n        });\n      }\n\n      UnifiedAnalytics.identifyUser(user.userId, {\n        userId: user.userId,\n        currentConnection: user.currentConnection,\n        username: user.username,\n        userType: user.kind,\n        primaryAccountId: user.primaryAccountId,\n      });\n\n      Analytics.identifyUser(user.userId, {\n        userId: user.userId,\n        currentConnection: user.currentConnection,\n        username: user.username,\n        userType: user.kind,\n        primaryAccountId: user.primaryAccountId,\n      });\n    }\n\n    this._currentUser = user;\n\n    return user;\n  }\n}\n\nlet __globalInstance: UserManagerInstance | undefined;\nexport default UserManagerInstance.getGlobalInstance();\n\n/** Private Methods **/\nfunction _parseAuth0Profile(rawProfile: any) {\n  if (!rawProfile || typeof rawProfile !== 'object') {\n    return rawProfile;\n  }\n  return Object.keys(rawProfile).reduce((p, key) => {\n    p[camelCase(key)] = _parseAuth0Profile(rawProfile[key]);\n    return p;\n  }, {} as any);\n}\n\nfunction _prepareAuth0Profile(niceProfile: any) {\n  if (typeof niceProfile !== 'object') {\n    return niceProfile;\n  }\n\n  return Object.keys(niceProfile).reduce((p, key) => {\n    p[snakeCase(key)] = _prepareAuth0Profile(niceProfile[key]);\n    return p;\n  }, {} as any);\n}\n"],"mappings":"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"}