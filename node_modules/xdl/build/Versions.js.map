{"version":3,"file":"Versions.js","names":["versionsAsync","options","api","ApiV2Client","versionCache","FsCache","Cacher","getAsync","path","join","__dirname","getenv","boolish","skipCache","clearAsync","sdkVersionsAsync","sdkVersions","releasedSdkVersionsAsync","pickBy","data","_sdkVersionString","releaseNoteUrl","beta","gteSdkVersion","expJson","sdkVersion","semver","gte","XDLError","lteSdkVersion","lte","parseSdkVersionFromTag","tag","startsWith","substring","newestReleasedSdkVersionAsync","betaOptInEnabled","result","highestMajorVersion","version","Object","entries","hasReleaseNotes","isBeta","major","oldestSupportedMajorVersionAsync","supportedVersions","v","isDeprecated","versionNumbers","keys","map","Math","min","canTurtleBuildSdkVersion","platform","valid","getSdkVersionsSupportedByTurtle","supportedVersionsForPlatform","indexOf"],"sources":["../src/Versions.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport getenv from 'getenv';\nimport pickBy from 'lodash/pickBy';\nimport path from 'path';\nimport semver from 'semver';\n\nimport { ApiV2 as ApiV2Client, FsCache, XDLError } from './internal';\n\nexport type SDKVersion = {\n  androidExpoViewUrl?: string;\n  expoReactNativeTag: string;\n  /* deprecated */ exponentReactNativeTag?: string;\n  expokitNpmPackage?: string;\n  facebookReactNativeVersion: string;\n  facebookReactVersion?: string;\n  iosExpoViewUrl?: string;\n  /* deprecated */ iosExponentViewUrl?: string;\n  iosVersion?: string;\n  isDeprecated?: boolean;\n  packagesToInstallWhenEjecting?: { [name: string]: string };\n  releaseNoteUrl?: string;\n  iosClientUrl?: string;\n  iosClientVersion?: string;\n  androidClientUrl?: string;\n  androidClientVersion?: string;\n  relatedPackages?: { [name: string]: string };\n  beta?: boolean;\n};\n\nexport type SDKVersions = { [version: string]: SDKVersion };\ntype TurtleSDKVersions = { android: string[]; ios: string[] };\ntype TurtleSDKVersionsOld = { android: string; ios: string };\n\ntype Versions = {\n  androidUrl: string;\n  androidVersion: string;\n  iosUrl: string;\n  iosVersion: string;\n  sdkVersions: SDKVersions;\n  /* deprecated */ starterApps: unknown;\n  /* deprecated */ templates: unknown[];\n  /* deprecated */ templatesv2: unknown[];\n  turtleSdkVersions: TurtleSDKVersionsOld;\n};\n\nexport async function versionsAsync(options?: { skipCache?: boolean }): Promise<Versions> {\n  const api = new ApiV2Client();\n  const versionCache = new FsCache.Cacher(\n    () => api.getAsync('versions/latest'),\n    'versions.json',\n    0,\n    path.join(__dirname, '../caches/versions.json')\n  );\n\n  // Clear cache when opting in to beta because things can change quickly in beta\n  if (getenv.boolish('EXPO_BETA', false) || options?.skipCache) {\n    versionCache.clearAsync();\n  }\n\n  return await versionCache.getAsync();\n}\n\nexport async function sdkVersionsAsync(): Promise<SDKVersions> {\n  const { sdkVersions } = await versionsAsync();\n  return sdkVersions;\n}\n\n// NOTE(brentvatne): it is possible for an unreleased version to be published to\n// the versions endpoint, but in some cases we only want to list out released\n// versions\nexport async function releasedSdkVersionsAsync(): Promise<SDKVersions> {\n  const sdkVersions = await sdkVersionsAsync();\n  return pickBy(\n    sdkVersions,\n    (data, _sdkVersionString) =>\n      !!data.releaseNoteUrl || (getenv.boolish('EXPO_BETA', false) && data.beta)\n  );\n}\n\nexport function gteSdkVersion(\n  expJson: Pick<ExpoConfig, 'sdkVersion'>,\n  sdkVersion: string\n): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  try {\n    return semver.gte(expJson.sdkVersion, sdkVersion);\n  } catch {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n}\n\nexport function lteSdkVersion(\n  expJson: Pick<ExpoConfig, 'sdkVersion'>,\n  sdkVersion: string\n): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(expJson.sdkVersion, sdkVersion);\n  } catch {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n}\n\nexport function parseSdkVersionFromTag(tag: string): string {\n  if (tag.startsWith('sdk-')) {\n    return tag.substring(4);\n  }\n\n  return tag;\n}\n\n// NOTE(brentvatne): it is possible for an unreleased version to be published to\n// the versions endpoint, but in some cases we need to get the latest *released*\n// version, not just the latest version.\nexport async function newestReleasedSdkVersionAsync(): Promise<{\n  version: string;\n  data: SDKVersion | null;\n}> {\n  const betaOptInEnabled = getenv.boolish('EXPO_BETA', false);\n  const sdkVersions = await sdkVersionsAsync();\n\n  let result = null;\n  let highestMajorVersion = '0.0.0';\n\n  for (const [version, data] of Object.entries(sdkVersions)) {\n    const hasReleaseNotes = !!data.releaseNoteUrl;\n    const isBeta = !!data.beta;\n\n    if (\n      semver.major(version) > semver.major(highestMajorVersion) &&\n      (hasReleaseNotes || (isBeta && betaOptInEnabled))\n    ) {\n      highestMajorVersion = version;\n      result = data;\n    }\n  }\n  return {\n    version: highestMajorVersion,\n    data: result,\n  };\n}\n\nexport async function oldestSupportedMajorVersionAsync(): Promise<number> {\n  const sdkVersions = await sdkVersionsAsync();\n  const supportedVersions = pickBy(sdkVersions, v => !v.isDeprecated);\n  const versionNumbers = Object.keys(supportedVersions).map(version => semver.major(version));\n  return Math.min(...versionNumbers);\n}\n\nexport async function canTurtleBuildSdkVersion(\n  sdkVersion: string,\n  platform: keyof TurtleSDKVersions\n): Promise<boolean> {\n  if (sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  if (semver.valid(sdkVersion) == null) {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `\"${sdkVersion}\" is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n\n  const supportedVersions = await getSdkVersionsSupportedByTurtle();\n  const supportedVersionsForPlatform: string[] = supportedVersions[platform] ?? [];\n  return supportedVersionsForPlatform.indexOf(sdkVersion) !== -1;\n}\n\nasync function getSdkVersionsSupportedByTurtle(): Promise<TurtleSDKVersions> {\n  const api = new ApiV2Client();\n  return await api.getAsync('standalone-build/supportedSDKVersions');\n}\n"],"mappings":"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"}