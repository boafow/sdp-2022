{"version":3,"file":"afc.js","names":["debug","Debug","MAX_OPEN_FILES","AFCClient","ServiceClient","constructor","socket","AFCProtocolClient","getFileInfo","path","resp","protocolClient","sendMessage","operation","AFC_OPS","GET_FILE_INFO","data","toCString","strings","currentString","tokens","forEach","token","push","String","fromCharCode","writeFile","fd","Array","prototype","toString","call","FILE_WRITE","payload","openFile","Buffer","alloc","length","writeUInt32LE","AFC_FILE_OPEN_FLAGS","WRONLY","copy","FILE_OPEN","FILE_OPEN_RES","Error","closeFile","FILE_CLOSE","uploadFile","srcPath","destPath","srcFile","destFile","Promise","all","promisify","fs","readFile","err","makeDirectory","MAKE_DIR","uploadDirectory","numOpenFiles","pendingFileUploads","_this","uploadDir","dirPath","promises","file","readdirSync","filePath","join","remotePath","relative","lstatSync","isDirectory","then","resolve","reject","promise","res","rej","tries","fn","pop","catch","status","AFC_STATUS","NO_RESOURCES","s","buf","len","write","writeUInt8"],"sources":["../../../../../../src/apple/native-run/ios/lib/client/afc.ts"],"sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Debug from 'debug';\nimport * as fs from 'fs';\nimport type * as net from 'net';\nimport * as path from 'path';\nimport { promisify } from 'util';\n\nimport { AFC_FILE_OPEN_FLAGS, AFC_OPS, AFC_STATUS, AFCProtocolClient } from '../protocol/afc';\nimport type { AFCError, AFCResponse } from '../protocol/afc';\nimport { ServiceClient } from './client';\n\nconst debug = Debug('expo:xdl:ios:lib:client:afc');\nconst MAX_OPEN_FILES = 240;\n\nexport class AFCClient extends ServiceClient<AFCProtocolClient> {\n  constructor(public socket: net.Socket) {\n    super(socket, new AFCProtocolClient(socket));\n  }\n\n  async getFileInfo(path: string): Promise<string[]> {\n    debug(`getFileInfo: ${path}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      operation: AFC_OPS.GET_FILE_INFO,\n      data: toCString(path),\n    });\n\n    const strings: string[] = [];\n    let currentString = '';\n    const tokens = resp.data;\n    tokens.forEach(token => {\n      if (token === 0) {\n        strings.push(currentString);\n        currentString = '';\n      } else {\n        currentString += String.fromCharCode(token);\n      }\n    });\n    return strings;\n  }\n\n  async writeFile(fd: Buffer, data: Buffer): Promise<AFCResponse> {\n    debug(`writeFile: ${Array.prototype.toString.call(fd)}`);\n\n    return this.protocolClient.sendMessage({\n      operation: AFC_OPS.FILE_WRITE,\n      data: fd,\n      payload: data,\n    });\n  }\n\n  async openFile(path: string): Promise<Buffer> {\n    debug(`openFile: ${path}`);\n    // mode + path + null terminator\n    const data = Buffer.alloc(8 + path.length + 1);\n    // write mode\n    data.writeUInt32LE(AFC_FILE_OPEN_FLAGS.WRONLY, 0);\n    // then path to file\n    toCString(path).copy(data, 8);\n\n    const resp = await this.protocolClient.sendMessage({\n      operation: AFC_OPS.FILE_OPEN,\n      data,\n    });\n\n    if (resp.operation === AFC_OPS.FILE_OPEN_RES) {\n      return resp.data;\n    }\n\n    throw new Error(\n      `There was an unknown error opening file ${path}, response: ${Array.prototype.toString.call(\n        resp.data\n      )}`\n    );\n  }\n\n  async closeFile(fd: Buffer): Promise<AFCResponse> {\n    debug(`closeFile fd: ${Array.prototype.toString.call(fd)}`);\n    return this.protocolClient.sendMessage({\n      operation: AFC_OPS.FILE_CLOSE,\n      data: fd,\n    });\n  }\n\n  async uploadFile(srcPath: string, destPath: string): Promise<void> {\n    debug(`uploadFile: ${srcPath}`);\n\n    // read local file and get fd of destination\n    const [srcFile, destFile] = await Promise.all([\n      await promisify(fs.readFile)(srcPath),\n      await this.openFile(destPath),\n    ]);\n\n    try {\n      await this.writeFile(destFile, srcFile);\n      await this.closeFile(destFile);\n    } catch (err: any) {\n      await this.closeFile(destFile);\n      throw err;\n    }\n  }\n\n  async makeDirectory(path: string): Promise<AFCResponse> {\n    debug(`makeDirectory: ${path}`);\n\n    return this.protocolClient.sendMessage({\n      operation: AFC_OPS.MAKE_DIR,\n      data: toCString(path),\n    });\n  }\n\n  async uploadDirectory(srcPath: string, destPath: string): Promise<void> {\n    debug(`uploadDirectory: ${srcPath}`);\n    await this.makeDirectory(destPath);\n\n    // AFC doesn't seem to give out more than 240 file handles,\n    // so we delay any requests that would push us over until more open up\n    let numOpenFiles = 0;\n    const pendingFileUploads: (() => void)[] = [];\n    const _this = this;\n    return uploadDir(srcPath);\n\n    async function uploadDir(dirPath: string): Promise<void> {\n      const promises: Promise<void>[] = [];\n      for (const file of fs.readdirSync(dirPath)) {\n        const filePath = path.join(dirPath, file);\n        const remotePath = path.join(destPath, path.relative(srcPath, filePath));\n        if (fs.lstatSync(filePath).isDirectory()) {\n          promises.push(_this.makeDirectory(remotePath).then(() => uploadDir(filePath)));\n        } else {\n          // Create promise to add to promises array\n          // this way it can be resolved once a pending upload has finished\n          let resolve: (val?: any) => void;\n          let reject: (err: AFCError) => void;\n          const promise = new Promise<void>((res, rej) => {\n            resolve = res;\n            reject = rej;\n          });\n          promises.push(promise);\n\n          // wrap upload in a function in case we need to save it for later\n          const uploadFile = (tries = 0) => {\n            numOpenFiles++;\n            _this\n              .uploadFile(filePath, remotePath)\n              .then(() => {\n                resolve();\n                numOpenFiles--;\n                const fn = pendingFileUploads.pop();\n                if (fn) {\n                  fn();\n                }\n              })\n              .catch((err: AFCError) => {\n                // Couldn't get fd for whatever reason, try again\n                // # of retries is arbitrary and can be adjusted\n                if (err.status === AFC_STATUS.NO_RESOURCES && tries < 10) {\n                  debug(`Received NO_RESOURCES from AFC, retrying ${filePath} upload. ${tries}`);\n                  uploadFile(tries++);\n                } else {\n                  numOpenFiles--;\n                  reject(err);\n                }\n              });\n          };\n\n          if (numOpenFiles < MAX_OPEN_FILES) {\n            uploadFile();\n          } else {\n            debug(\n              `numOpenFiles >= ${MAX_OPEN_FILES}, adding to pending queue. Length: ${pendingFileUploads.length}`\n            );\n            pendingFileUploads.push(uploadFile);\n          }\n        }\n      }\n      await Promise.all(promises);\n    }\n  }\n}\n\nfunction toCString(s: string) {\n  const buf = Buffer.alloc(s.length + 1);\n  const len = buf.write(s);\n  buf.writeUInt8(0, len);\n  return buf;\n}\n"],"mappings":"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"}