{"version":3,"file":"lockdownd.js","names":["debug","Debug","isLockdowndServiceResponse","resp","Request","Service","undefined","Port","isLockdowndSessionResponse","isLockdowndAllValuesResponse","Value","isLockdowndValueResponse","Key","isLockdowndQueryTypeResponse","Type","LockdowndClient","ServiceClient","constructor","socket","LockdownProtocolClient","startService","name","protocolClient","sendMessage","port","enableServiceSSL","EnableServiceSSL","ResponseError","startSession","pairRecord","HostID","SystemBUID","EnableSessionSSL","tls","TLSSocket","secureContext","createSecureContext","secureProtocol","cert","RootCertificate","key","RootPrivateKey","getAllValues","getValue","val","queryType","doHandshake"],"sources":["../../../../../../src/apple/native-run/ios/lib/client/lockdownd.ts"],"sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Debug from 'debug';\nimport type * as net from 'net';\nimport * as tls from 'tls';\n\nimport { LockdownProtocolClient } from '../protocol/lockdown';\nimport { ResponseError, ServiceClient } from './client';\nimport type { UsbmuxdPairRecord } from './usbmuxd';\n\nconst debug = Debug('expo:xdl:ios:lib:client:lockdownd');\n\nexport interface DeviceValues {\n  BasebandCertId: number;\n  BasebandKeyHashInformation: {\n    AKeyStatus: number;\n    SKeyHash: Buffer;\n    SKeyStatus: number;\n  };\n  BasebandSerialNumber: Buffer;\n  BasebandVersion: string;\n  BoardId: number;\n  BuildVersion: string;\n  ChipID: number;\n  DeviceClass: string;\n  DeviceColor: string;\n  DeviceName: string;\n  DieID: number;\n  HardwareModel: string;\n  HasSiDP: boolean;\n  PartitionType: string;\n  ProductName: string;\n  ProductType: string;\n  ProductVersion: string;\n  ProductionSOC: boolean;\n  ProtocolVersion: string;\n  TelephonyCapability: boolean;\n  UniqueChipID: number;\n  UniqueDeviceID: string;\n  WiFiAddress: string;\n  [key: string]: any;\n}\n\ninterface LockdowndServiceResponse {\n  Request: 'StartService';\n  Service: string;\n  Port: number;\n  EnableServiceSSL?: boolean; // Only on iOS 13+\n}\n\ninterface LockdowndSessionResponse {\n  Request: 'StartSession';\n  EnableSessionSSL: boolean;\n}\n\ninterface LockdowndAllValuesResponse {\n  Request: 'GetValue';\n  Value: DeviceValues;\n}\n\ninterface LockdowndValueResponse {\n  Request: 'GetValue';\n  Key: string;\n  Value: string;\n}\n\ninterface LockdowndQueryTypeResponse {\n  Request: 'QueryType';\n  Type: string;\n}\n\nfunction isLockdowndServiceResponse(resp: any): resp is LockdowndServiceResponse {\n  return resp.Request === 'StartService' && resp.Service !== undefined && resp.Port !== undefined;\n}\n\nfunction isLockdowndSessionResponse(resp: any): resp is LockdowndSessionResponse {\n  return resp.Request === 'StartSession';\n}\n\nfunction isLockdowndAllValuesResponse(resp: any): resp is LockdowndAllValuesResponse {\n  return resp.Request === 'GetValue' && resp.Value !== undefined;\n}\n\nfunction isLockdowndValueResponse(resp: any): resp is LockdowndValueResponse {\n  return resp.Request === 'GetValue' && resp.Key !== undefined && typeof resp.Value === 'string';\n}\n\nfunction isLockdowndQueryTypeResponse(resp: any): resp is LockdowndQueryTypeResponse {\n  return resp.Request === 'QueryType' && resp.Type !== undefined;\n}\n\nexport class LockdowndClient extends ServiceClient<LockdownProtocolClient> {\n  constructor(public socket: net.Socket) {\n    super(socket, new LockdownProtocolClient(socket));\n  }\n\n  async startService(name: string) {\n    debug(`startService: ${name}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      Request: 'StartService',\n      Service: name,\n    });\n\n    if (isLockdowndServiceResponse(resp)) {\n      return { port: resp.Port, enableServiceSSL: !!resp.EnableServiceSSL };\n    } else {\n      throw new ResponseError(`Error starting service ${name}`, resp);\n    }\n  }\n\n  async startSession(pairRecord: UsbmuxdPairRecord) {\n    debug(`startSession: ${pairRecord}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      Request: 'StartSession',\n      HostID: pairRecord.HostID,\n      SystemBUID: pairRecord.SystemBUID,\n    });\n\n    if (isLockdowndSessionResponse(resp)) {\n      if (resp.EnableSessionSSL) {\n        this.protocolClient.socket = new tls.TLSSocket(this.protocolClient.socket, {\n          secureContext: tls.createSecureContext({\n            secureProtocol: 'TLSv1_method',\n            cert: pairRecord.RootCertificate,\n            key: pairRecord.RootPrivateKey,\n          }),\n        });\n        debug(`Socket upgraded to TLS connection`);\n      }\n      // TODO: save sessionID for StopSession?\n    } else {\n      throw new ResponseError('Error starting session', resp);\n    }\n  }\n\n  async getAllValues() {\n    debug(`getAllValues`);\n\n    const resp = await this.protocolClient.sendMessage({ Request: 'GetValue' });\n\n    if (isLockdowndAllValuesResponse(resp)) {\n      return resp.Value;\n    } else {\n      throw new ResponseError('Error getting lockdown value', resp);\n    }\n  }\n\n  async getValue(val: string) {\n    debug(`getValue: ${val}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      Request: 'GetValue',\n      Key: val,\n    });\n\n    if (isLockdowndValueResponse(resp)) {\n      return resp.Value;\n    } else {\n      throw new ResponseError('Error getting lockdown value', resp);\n    }\n  }\n\n  async queryType() {\n    debug('queryType');\n\n    const resp = await this.protocolClient.sendMessage({\n      Request: 'QueryType',\n    });\n\n    if (isLockdowndQueryTypeResponse(resp)) {\n      return resp.Type;\n    } else {\n      throw new ResponseError('Error getting lockdown query type', resp);\n    }\n  }\n\n  async doHandshake(pairRecord: UsbmuxdPairRecord) {\n    debug('doHandshake');\n\n    // if (await this.lockdownQueryType() !== 'com.apple.mobile.lockdown') {\n    //   throw new Error('Invalid type received from lockdown handshake');\n    // }\n    // await this.getLockdownValue('ProductVersion');\n    // TODO: validate pair and pair\n    await this.startSession(pairRecord);\n  }\n}\n"],"mappings":"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"}