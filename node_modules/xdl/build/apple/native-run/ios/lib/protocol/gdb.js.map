{"version":3,"file":"gdb.js","names":["debug","Debug","ACK_SUCCESS","charCodeAt","GDBProtocolClient","ProtocolClient","constructor","socket","ProtocolReaderFactory","GDBProtocolReader","GDBProtocolWriter","ProtocolReader","callback","onData","data","buffer","Buffer","concat","length","headerSize","parseHeader","packetData","toString","match","body","from","slice","parseBody","err","Error","checksum","msg","validateChecksum","write","cmd","args","encodedArgs","map","arg","join","toUpperCase","checksumStr","calculateChecksum","formattedCmd","cmdStr","i","result","checksumVal","computedChecksum"],"sources":["../../../../../../src/apple/native-run/ios/lib/protocol/gdb.ts"],"sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Debug from 'debug';\nimport type * as net from 'net';\n\nimport type { ProtocolReaderCallback, ProtocolWriter } from './protocol';\nimport { ProtocolClient, ProtocolReader, ProtocolReaderFactory } from './protocol';\n\nconst debug = Debug('expo:xdl:ios:lib:protocol:gdb');\nconst ACK_SUCCESS = '+'.charCodeAt(0);\n\nexport interface GDBMessage {\n  cmd: string;\n  args: string[];\n}\n\nexport class GDBProtocolClient extends ProtocolClient<GDBMessage> {\n  constructor(socket: net.Socket) {\n    super(socket, new ProtocolReaderFactory(GDBProtocolReader), new GDBProtocolWriter());\n  }\n}\n\nexport class GDBProtocolReader extends ProtocolReader {\n  constructor(callback: ProtocolReaderCallback) {\n    super(1 /* \"Header\" is '+' or '-' */, callback);\n  }\n\n  onData(data?: Buffer) {\n    // the GDB protocol does not support body length in its header so we cannot rely on\n    // the parent implementation to determine when a payload is complete\n    try {\n      // if there's data, add it to the existing buffer\n      this.buffer = data ? Buffer.concat([this.buffer, data]) : this.buffer;\n\n      // do we have enough bytes to proceed\n      if (this.buffer.length < this.headerSize) {\n        return; // incomplete header, wait for more\n      }\n\n      // first, check the header\n      if (this.parseHeader(this.buffer) === -1) {\n        // we have a valid header so check the body. GDB packets will always be a leading '$', data bytes,\n        // a trailing '#', and a two digit checksum. minimum valid body is the empty response '$#00'\n        // https://developer.apple.com/library/archive/documentation/DeveloperTools/gdb/gdb/gdb_33.html\n        const packetData = this.buffer.toString().match('\\\\$.*#[0-9a-f]{2}');\n        if (packetData == null) {\n          return; // incomplete body, wait for more\n        }\n        // extract the body and update the buffer\n        const body = Buffer.from(packetData[0]);\n        this.buffer = this.buffer.slice(this.headerSize + body.length);\n        // parse the payload and recurse if there is more data to process\n        this.callback(this.parseBody(body));\n        if (this.buffer.length) {\n          this.onData();\n        }\n      }\n    } catch (err: any) {\n      this.callback(null, err);\n    }\n  }\n\n  parseHeader(data: Buffer) {\n    if (data[0] !== ACK_SUCCESS) {\n      throw new Error('Unsuccessful debugserver response');\n    } // TODO: retry?\n    return -1;\n  }\n\n  parseBody(buffer: Buffer) {\n    debug(`Response body: ${buffer.toString()}`);\n    // check for checksum\n    const checksum = buffer.slice(-3).toString();\n    if (checksum.match(/#[0-9a-f]{2}/)) {\n      // remove '$' prefix and checksum\n      const msg = buffer.slice(1, -3).toString();\n      if (validateChecksum(checksum, msg)) {\n        return msg;\n      } else {\n        throw new Error('Invalid checksum received from debugserver');\n      }\n    } else {\n      throw new Error(\"Didn't receive checksum\");\n    }\n  }\n}\n\nexport class GDBProtocolWriter implements ProtocolWriter {\n  write(socket: net.Socket, msg: GDBMessage) {\n    const { cmd, args } = msg;\n    debug(`Socket write: ${cmd}, args: ${args}`);\n    // hex encode and concat all args\n    const encodedArgs = args\n      .map(arg => Buffer.from(arg).toString('hex'))\n      .join()\n      .toUpperCase();\n    const checksumStr = calculateChecksum(cmd + encodedArgs);\n    const formattedCmd = `$${cmd}${encodedArgs}#${checksumStr}`;\n    socket.write(formattedCmd);\n  }\n}\n\n// hex value of (sum of cmd chars mod 256)\nfunction calculateChecksum(cmdStr: string) {\n  let checksum = 0;\n  for (let i = 0; i < cmdStr.length; i++) {\n    checksum += cmdStr.charCodeAt(i);\n  }\n  let result = (checksum % 256).toString(16);\n  // pad if necessary\n  if (result.length === 1) {\n    result = `0${result}`;\n  }\n  return result;\n}\n\nfunction validateChecksum(checksum: string, msg: string) {\n  // remove '#' from checksum\n  const checksumVal = checksum.slice(1);\n  // remove '$' from msg and calculate its checksum\n  const computedChecksum = calculateChecksum(msg);\n  debug(`Checksum: ${checksumVal}, computed checksum: ${computedChecksum}`);\n  return checksumVal === computedChecksum;\n}\n"],"mappings":"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"}