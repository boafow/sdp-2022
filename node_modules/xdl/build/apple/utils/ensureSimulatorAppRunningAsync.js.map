{"version":3,"file":"ensureSimulatorAppRunningAsync.js","names":["execAsync","promisify","exec","waitForSimulatorAppToStart","waitForActionAsync","interval","action","isSimulatorAppRunningAsync","zeroMeansNo","osascript","trim","error","message","includes","ensureSimulatorAppRunningAsync","udid","Logger","global","info","openSimulatorAppAsync","TimeoutError","args","push","join","killAllAsync","spawnAsync"],"sources":["../../../src/apple/utils/ensureSimulatorAppRunningAsync.ts"],"sourcesContent":["import * as osascript from '@expo/osascript';\nimport spawnAsync from '@expo/spawn-async';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nimport { Logger } from '../../internal';\nimport { TimeoutError, waitForActionAsync } from './waitForActionAsync';\n\nconst execAsync = promisify(exec);\n\nexport async function waitForSimulatorAppToStart(): Promise<boolean> {\n  return waitForActionAsync<boolean>({\n    interval: 50,\n    action: isSimulatorAppRunningAsync,\n  });\n}\n\n/**\n * I think the app can be open while no simulators are booted.\n */\nexport async function isSimulatorAppRunningAsync(): Promise<boolean> {\n  try {\n    const zeroMeansNo = (\n      await osascript.execAsync(\n        'tell app \"System Events\" to count processes whose name is \"Simulator\"'\n      )\n    ).trim();\n    if (zeroMeansNo === '0') {\n      return false;\n    }\n  } catch (error: any) {\n    if (error.message.includes('Application isnâ€™t running')) {\n      return false;\n    }\n    throw error;\n  }\n\n  return true;\n}\n\nexport async function ensureSimulatorAppRunningAsync({ udid }: { udid?: string }) {\n  // Yes, simulators can be booted even if the app isn't running, obviously we'd never want this.\n  if (!(await isSimulatorAppRunningAsync())) {\n    Logger.global.info(`\\u203A Opening the iOS simulator, this might take a moment.`);\n\n    // In theory this would ensure the correct simulator is booted as well.\n    // This isn't theory though, this is Xcode.\n    await openSimulatorAppAsync({ udid });\n    if (!(await waitForSimulatorAppToStart())) {\n      throw new TimeoutError(\n        `Simulator app did not open fast enough. Try opening Simulator first, then running your app.`\n      );\n    }\n  }\n}\n\nexport async function openSimulatorAppAsync({ udid }: { udid?: string }) {\n  const args = ['open', '-a', 'Simulator'];\n  if (udid) {\n    // This has no effect if the app is already running.\n    args.push('--args', '-CurrentDeviceUDID', udid);\n  }\n  await execAsync(args.join(' '));\n}\n\nexport async function killAllAsync() {\n  return await spawnAsync('killAll', ['Simulator']);\n}\n"],"mappings":";;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAwE;AAAA;AAAA;AAExE,MAAMA,SAAS,GAAG,IAAAC,iBAAS,EAACC,qBAAI,CAAC;AAE1B,eAAeC,0BAA0B,GAAqB;EACnE,OAAO,IAAAC,wCAAkB,EAAU;IACjCC,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAEC;EACV,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACO,eAAeA,0BAA0B,GAAqB;EACnE,IAAI;IACF,MAAMC,WAAW,GAAG,CAClB,MAAMC,SAAS,GAACT,SAAS,CACvB,uEAAuE,CACxE,EACDU,IAAI,EAAE;IACR,IAAIF,WAAW,KAAK,GAAG,EAAE;MACvB,OAAO,KAAK;IACd;EACF,CAAC,CAAC,OAAOG,KAAU,EAAE;IACnB,IAAIA,KAAK,CAACC,OAAO,CAACC,QAAQ,CAAC,2BAA2B,CAAC,EAAE;MACvD,OAAO,KAAK;IACd;IACA,MAAMF,KAAK;EACb;EAEA,OAAO,IAAI;AACb;AAEO,eAAeG,8BAA8B,CAAC;EAAEC;AAAwB,CAAC,EAAE;EAChF;EACA,IAAI,EAAE,MAAMR,0BAA0B,EAAE,CAAC,EAAE;IACzCS,kBAAM,CAACC,MAAM,CAACC,IAAI,CAAE,6DAA4D,CAAC;;IAEjF;IACA;IACA,MAAMC,qBAAqB,CAAC;MAAEJ;IAAK,CAAC,CAAC;IACrC,IAAI,EAAE,MAAMZ,0BAA0B,EAAE,CAAC,EAAE;MACzC,MAAM,KAAIiB,kCAAY,EACnB,6FAA4F,CAC9F;IACH;EACF;AACF;AAEO,eAAeD,qBAAqB,CAAC;EAAEJ;AAAwB,CAAC,EAAE;EACvE,MAAMM,IAAI,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,WAAW,CAAC;EACxC,IAAIN,IAAI,EAAE;IACR;IACAM,IAAI,CAACC,IAAI,CAAC,QAAQ,EAAE,oBAAoB,EAAEP,IAAI,CAAC;EACjD;EACA,MAAMf,SAAS,CAACqB,IAAI,CAACE,IAAI,CAAC,GAAG,CAAC,CAAC;AACjC;AAEO,eAAeC,YAAY,GAAG;EACnC,OAAO,MAAM,IAAAC,qBAAU,EAAC,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC;AACnD"}