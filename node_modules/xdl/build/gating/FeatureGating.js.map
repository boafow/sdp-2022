{"version":3,"file":"FeatureGating.js","names":["FeatureGating","constructor","serverValues","envOverrides","isEnabled","experimentKey","process","env","NODE_ENV","FeatureGateTestOverrides","isOverridden","getOverride","featureGateDefaultValueWhenNoServerValue","overrideKeyForScope","key","enabled","scope","Error","setOverride","removeOverride","overrideKeyForScopeAsync","overrideKeyForEachInTest","beforeEach","afterEach"],"sources":["../../src/gating/FeatureGating.ts"],"sourcesContent":["import {\n  featureGateDefaultValueWhenNoServerValue,\n  FeatureGateEnvOverrides,\n  FeatureGateKey,\n  FeatureGateTestOverrides,\n} from '../internal';\n\nexport default class FeatureGating {\n  constructor(\n    private readonly serverValues: { [key: string]: boolean },\n    private readonly envOverrides: FeatureGateEnvOverrides\n  ) {}\n\n  public isEnabled(experimentKey: FeatureGateKey): boolean {\n    if (process.env.NODE_ENV === 'test' && FeatureGateTestOverrides.isOverridden(experimentKey)) {\n      return FeatureGateTestOverrides.getOverride(experimentKey);\n    }\n\n    if (this.envOverrides.isOverridden(experimentKey)) {\n      return this.envOverrides.getOverride(experimentKey);\n    }\n\n    if (experimentKey in this.serverValues) {\n      return this.serverValues[experimentKey];\n    }\n\n    return featureGateDefaultValueWhenNoServerValue[experimentKey];\n  }\n\n  /**\n   * Test gate override methods\n   */\n\n  public static overrideKeyForScope(\n    key: FeatureGateKey,\n    enabled: boolean,\n    scope: () => void\n  ): void {\n    if (process.env.NODE_ENV !== 'test') {\n      throw new Error(`Cannot overrideKeyForScope outside of test environment`);\n    }\n\n    FeatureGateTestOverrides.setOverride(key, enabled);\n    try {\n      scope();\n    } finally {\n      FeatureGateTestOverrides.removeOverride(key);\n    }\n  }\n\n  public static async overrideKeyForScopeAsync(\n    key: FeatureGateKey,\n    enabled: boolean,\n    scope: () => Promise<void>\n  ): Promise<void> {\n    if (process.env.NODE_ENV !== 'test') {\n      throw new Error(`Cannot overrideKeyForScopeAsync outside of test environment`);\n    }\n\n    FeatureGateTestOverrides.setOverride(key, enabled);\n    try {\n      await scope();\n    } finally {\n      FeatureGateTestOverrides.removeOverride(key);\n    }\n  }\n\n  public static overrideKeyForEachInTest(key: FeatureGateKey, enabled: boolean): void {\n    beforeEach(() => FeatureGateTestOverrides.setOverride(key, enabled));\n    afterEach(() => FeatureGateTestOverrides.removeOverride(key));\n  }\n}\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAOe,MAAMA,aAAa,CAAC;EACjCC,WAAW,CACQC,YAAwC,EACxCC,YAAqC,EACtD;IAAA,KAFiBD,YAAwC,GAAxCA,YAAwC;IAAA,KACxCC,YAAqC,GAArCA,YAAqC;EACrD;EAEIC,SAAS,CAACC,aAA6B,EAAW;IACvD,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,IAAIC,oCAAwB,CAACC,YAAY,CAACL,aAAa,CAAC,EAAE;MAC3F,OAAOI,oCAAwB,CAACE,WAAW,CAACN,aAAa,CAAC;IAC5D;IAEA,IAAI,IAAI,CAACF,YAAY,CAACO,YAAY,CAACL,aAAa,CAAC,EAAE;MACjD,OAAO,IAAI,CAACF,YAAY,CAACQ,WAAW,CAACN,aAAa,CAAC;IACrD;IAEA,IAAIA,aAAa,IAAI,IAAI,CAACH,YAAY,EAAE;MACtC,OAAO,IAAI,CAACA,YAAY,CAACG,aAAa,CAAC;IACzC;IAEA,OAAOO,oDAAwC,CAACP,aAAa,CAAC;EAChE;;EAEA;AACF;AACA;;EAEE,OAAcQ,mBAAmB,CAC/BC,GAAmB,EACnBC,OAAgB,EAChBC,KAAiB,EACX;IACN,IAAIV,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAE;MACnC,MAAM,IAAIS,KAAK,CAAE,wDAAuD,CAAC;IAC3E;IAEAR,oCAAwB,CAACS,WAAW,CAACJ,GAAG,EAAEC,OAAO,CAAC;IAClD,IAAI;MACFC,KAAK,EAAE;IACT,CAAC,SAAS;MACRP,oCAAwB,CAACU,cAAc,CAACL,GAAG,CAAC;IAC9C;EACF;EAEA,aAAoBM,wBAAwB,CAC1CN,GAAmB,EACnBC,OAAgB,EAChBC,KAA0B,EACX;IACf,IAAIV,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAE;MACnC,MAAM,IAAIS,KAAK,CAAE,6DAA4D,CAAC;IAChF;IAEAR,oCAAwB,CAACS,WAAW,CAACJ,GAAG,EAAEC,OAAO,CAAC;IAClD,IAAI;MACF,MAAMC,KAAK,EAAE;IACf,CAAC,SAAS;MACRP,oCAAwB,CAACU,cAAc,CAACL,GAAG,CAAC;IAC9C;EACF;EAEA,OAAcO,wBAAwB,CAACP,GAAmB,EAAEC,OAAgB,EAAQ;IAClFO,UAAU,CAAC,MAAMb,oCAAwB,CAACS,WAAW,CAACJ,GAAG,EAAEC,OAAO,CAAC,CAAC;IACpEQ,SAAS,CAAC,MAAMd,oCAAwB,CAACU,cAAc,CAACL,GAAG,CAAC,CAAC;EAC/D;AACF;AAAC"}