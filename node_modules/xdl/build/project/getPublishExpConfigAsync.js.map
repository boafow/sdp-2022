{"version":3,"file":"getPublishExpConfigAsync.js","names":["getPublishExpConfigAsync","projectRoot","options","releaseChannel","XDLError","exp","hooks","runtimeVersion","getConfig","skipSDKVersionRequirement","pkg","isPublicConfig","sdkVersion","Env","maySkipManifestValidation","locales","ExponentTools","getResolvedLocalesAsync"],"sources":["../../src/project/getPublishExpConfigAsync.ts"],"sourcesContent":["import {\n  ExpoAppManifest,\n  ExpoConfig,\n  getConfig,\n  PackageJSONConfig,\n  ProjectTarget,\n} from '@expo/config';\n\nimport { Env, ExponentTools, XDLError } from '../internal';\n\nexport type PublishOptions = {\n  releaseChannel?: string;\n  target?: ProjectTarget;\n  resetCache?: boolean;\n  maxWorkers?: number;\n  quiet?: boolean;\n};\n\nexport async function getPublishExpConfigAsync(\n  projectRoot: string,\n  options: Pick<PublishOptions, 'releaseChannel'> = {}\n): Promise<{\n  exp: ExpoAppManifest;\n  pkg: PackageJSONConfig;\n  hooks: ExpoConfig['hooks'];\n}> {\n  if (options.releaseChannel != null && typeof options.releaseChannel !== 'string') {\n    throw new XDLError('INVALID_OPTIONS', 'releaseChannel must be a string');\n  }\n  options.releaseChannel = options.releaseChannel || 'default';\n\n  // Verify that exp/app.json and package.json exist\n  const {\n    exp: { hooks, runtimeVersion },\n  } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  const { exp, pkg } = getConfig(projectRoot, {\n    isPublicConfig: true,\n    // enforce sdk validation if user is not using runtimeVersion\n    skipSDKVersionRequirement: !!runtimeVersion,\n  });\n  const { sdkVersion } = exp;\n  // Only allow projects to be published with UNVERSIONED if a correct token is set in env\n  if (sdkVersion === 'UNVERSIONED' && !Env.maySkipManifestValidation()) {\n    throw new XDLError('INVALID_OPTIONS', 'Cannot publish with sdkVersion UNVERSIONED.');\n  }\n  exp.locales = await ExponentTools.getResolvedLocalesAsync(projectRoot, exp);\n  return {\n    exp: {\n      ...exp,\n      sdkVersion: sdkVersion!,\n    },\n    pkg,\n    hooks,\n  };\n}\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAQA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAUO,eAAeA,wBAAwB,CAC5CC,WAAmB,EACnBC,OAA+C,GAAG,CAAC,CAAC,EAKnD;EACD,IAAIA,OAAO,CAACC,cAAc,IAAI,IAAI,IAAI,OAAOD,OAAO,CAACC,cAAc,KAAK,QAAQ,EAAE;IAChF,MAAM,KAAIC,oBAAQ,EAAC,iBAAiB,EAAE,iCAAiC,CAAC;EAC1E;EACAF,OAAO,CAACC,cAAc,GAAGD,OAAO,CAACC,cAAc,IAAI,SAAS;;EAE5D;EACA,MAAM;IACJE,GAAG,EAAE;MAAEC,KAAK;MAAEC;IAAe;EAC/B,CAAC,GAAG,IAAAC,mBAAS,EAACP,WAAW,EAAE;IAAEQ,yBAAyB,EAAE;EAAK,CAAC,CAAC;EAC/D,MAAM;IAAEJ,GAAG;IAAEK;EAAI,CAAC,GAAG,IAAAF,mBAAS,EAACP,WAAW,EAAE;IAC1CU,cAAc,EAAE,IAAI;IACpB;IACAF,yBAAyB,EAAE,CAAC,CAACF;EAC/B,CAAC,CAAC;EACF,MAAM;IAAEK;EAAW,CAAC,GAAGP,GAAG;EAC1B;EACA,IAAIO,UAAU,KAAK,aAAa,IAAI,CAACC,eAAG,CAACC,yBAAyB,EAAE,EAAE;IACpE,MAAM,KAAIV,oBAAQ,EAAC,iBAAiB,EAAE,6CAA6C,CAAC;EACtF;EACAC,GAAG,CAACU,OAAO,GAAG,MAAMC,yBAAa,CAACC,uBAAuB,CAAChB,WAAW,EAAEI,GAAG,CAAC;EAC3E,OAAO;IACLA,GAAG,EAAE;MACH,GAAGA,GAAG;MACNO,UAAU,EAAEA;IACd,CAAC;IACDF,GAAG;IACHJ;EACF,CAAC;AACH"}