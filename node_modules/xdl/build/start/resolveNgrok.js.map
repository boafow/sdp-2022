{"version":3,"file":"resolveNgrok.js","names":["NGROK_REQUIRED_VERSION","EXPO_DEBUG","getenv","boolish","_ngrokInstance","resolveNgrokAsync","projectRoot","shouldPrompt","autoInstall","ngrok","findNgrokBinAsync","packageName","delayAsync","answer","Prompts","confirmAsync","message","initial","Logger","global","info","chalk","bold","packageManager","PackageManager","createForProject","silent","addGlobalAsync","e","Error","resolvePackageFromProjectAsync","ngrokPackagePath","resolveFrom","pkg","require","semver","satisfies","version","ngrokPath","debug","resolveGlobalPackageAsync","requireg","resolve","localInstance","globalInstance"],"sources":["../../src/start/resolveNgrok.ts"],"sourcesContent":["import * as PackageManager from '@expo/package-manager';\nimport chalk from 'chalk';\nimport getenv from 'getenv';\n// @ts-ignore\nimport requireg from 'requireg';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\n\nimport { delayAsync, Logger, Prompts } from '../internal';\n\nconst NGROK_REQUIRED_VERSION = '^4.1.0';\nconst EXPO_DEBUG = getenv.boolish('EXPO_DEBUG', false);\nlet _ngrokInstance: any | null = null;\n\nexport interface NgrokOptions {\n  authtoken?: string;\n  port?: string | number | null;\n  host?: string;\n  httpauth?: string;\n  region?: string;\n  configPath?: string;\n\n  proto?: 'http' | 'tcp' | 'tls';\n  addr?: string;\n  inspect?: boolean;\n  auth?: string;\n  host_header?: string;\n  bind_tls?: true | false | 'both';\n  subdomain?: string;\n  hostname?: string;\n  crt?: string;\n  key?: string;\n  client_cas?: string;\n  remote_addr?: string;\n}\n\nexport async function resolveNgrokAsync(\n  projectRoot: string,\n  {\n    shouldPrompt = true,\n    autoInstall = false,\n  }: { shouldPrompt?: boolean; autoInstall?: boolean } = {}\n): Promise<any> {\n  const ngrok = await findNgrokBinAsync(projectRoot);\n\n  if (!ngrok) {\n    const packageName = `@expo/ngrok@${NGROK_REQUIRED_VERSION}`;\n    if (shouldPrompt) {\n      if (!autoInstall) {\n        // Delay the prompt so it doesn't conflict with other dev tool logs\n        await delayAsync(100);\n      }\n      const answer =\n        autoInstall ||\n        (await Prompts.confirmAsync({\n          message: `The package ${packageName} is required to use tunnels, would you like to install it globally?`,\n          initial: true,\n        }));\n      if (answer) {\n        Logger.global.info(`Installing ${packageName} for ${chalk.bold`tunnel`} support...`);\n\n        const packageManager = PackageManager.createForProject(projectRoot, {\n          silent: !EXPO_DEBUG,\n        });\n\n        try {\n          await packageManager.addGlobalAsync(packageName);\n          Logger.global.info(`Successfully installed ${packageName}`);\n        } catch (e: any) {\n          e.message = `Failed to install ${packageName} globally: ${e.message}`;\n          throw e;\n        }\n        return await resolveNgrokAsync(projectRoot, { shouldPrompt: false });\n      }\n    }\n    throw new Error(\n      `Please install ${packageName} and try again, or try using another hosting method like lan or localhost`\n    );\n  }\n  return ngrok;\n}\n\n// Resolve a copy that's installed in the project.\nasync function resolvePackageFromProjectAsync(projectRoot: string) {\n  try {\n    const ngrokPackagePath = resolveFrom(projectRoot, '@expo/ngrok/package.json');\n    const pkg = require(ngrokPackagePath);\n    if (pkg && semver.satisfies(pkg.version, NGROK_REQUIRED_VERSION)) {\n      const ngrokPath = resolveFrom(projectRoot, '@expo/ngrok');\n      Logger.global.debug(`Resolving @expo/ngrok from project: \"${ngrokPath}\"`);\n      return require(ngrokPath);\n    }\n  } catch {}\n  return null;\n}\n\n// Resolve a copy that's installed globally.\nasync function resolveGlobalPackageAsync() {\n  try {\n    // use true to disable the use of local packages.\n    const pkg = requireg('@expo/ngrok/package.json', true);\n    if (semver.satisfies(pkg.version, NGROK_REQUIRED_VERSION)) {\n      Logger.global.debug(\n        `Resolving global @expo/ngrok from: \"${requireg.resolve('@expo/ngrok')}\"`\n      );\n      return requireg('@expo/ngrok', true);\n    }\n  } catch {}\n\n  return null;\n}\n\nasync function findNgrokBinAsync(projectRoot: string): Promise<any> {\n  if (_ngrokInstance) {\n    return _ngrokInstance;\n  }\n\n  const localInstance = await resolvePackageFromProjectAsync(projectRoot);\n  if (localInstance) {\n    _ngrokInstance = localInstance;\n    return _ngrokInstance;\n  }\n\n  const globalInstance = await resolveGlobalPackageAsync();\n  if (globalInstance) {\n    _ngrokInstance = globalInstance;\n    return _ngrokInstance;\n  }\n\n  return null;\n}\n"],"mappings":"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"}