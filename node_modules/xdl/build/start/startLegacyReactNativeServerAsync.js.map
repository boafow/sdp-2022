{"version":3,"file":"startLegacyReactNativeServerAsync.js","names":["treekillAsync","promisify","treekill","METRO_VERBOSE_WARNING","NODE_12_WINDOWS_METRO_ERROR","NODE_12_WINDOWS_METRO_SUGGESTION","_logPackagerOutput","projectRoot","level","data","output","toString","_isIgnorableDuplicateModuleWarning","ProjectUtils","logDebug","_isIgnorableMetroConsoleOutput","_isIgnorableRnpmWarning","includes","logError","replace","test","logInfo","startsWith","reactNativeNodeModulesPath","path","join","reactNativeNodeModulesPattern","escapeRegExp","reactNativeNodeModulesCollisionRegex","RegExp","startReactNativeServerAsync","options","exp","getConfig","verbose","assertValidProjectRoot","stopReactNativeServerAsync","Watchman","addToPathAsync","unblockAndGetVersionAsync","packagerPort","getFreePortAsync","metroPort","customLogReporterPath","require","resolve","__dirname","sourceExtsConfig","isTS","isReact","isModern","sourceExts","target","getBareExtensions","getManagedExtensions","packagerOpts","port","nonPersistent","Versions","gteSdkVersion","lteSdkVersion","assetPlugins","resolveFrom","silent","Error","maxWorkers","userPackagerOpts","config","userSourceExts","Set","undefined","cliOpts","key","val","Object","entries","push","process","env","EXPO_DEBUG","reset","cliPath","packagerProcess","child_process","fork","cwd","NODE_OPTIONS","METRO_NODE_OPTIONS","REACT_NATIVE_APP_ROOT","ELECTRON_RUN_AS_NODE","ProjectSettings","setPackagerInfoAsync","packagerPid","pid","on","stdout","stderr","setEncoding","pipe","split","exitPromise","Promise","reject","once","code","packagerUrl","UrlUtils","constructBundleUrlAsync","urlType","hostType","race","_waitForRunningAsync","packagerInfo","readPackagerInfoAsync","e","url","retries","response","axios","request","responseType","proxy","message","delayAsync"],"sources":["../../src/start/startLegacyReactNativeServerAsync.ts"],"sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport { getBareExtensions, getManagedExtensions } from '@expo/config/paths';\nimport axios from 'axios';\nimport child_process from 'child_process';\nimport escapeRegExp from 'lodash/escapeRegExp';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\nimport split from 'split';\nimport treekill from 'tree-kill';\nimport { promisify } from 'util';\n\nimport {\n  assertValidProjectRoot,\n  delayAsync,\n  getFreePortAsync,\n  ProjectSettings,\n  ProjectUtils,\n  StartDevServerOptions,\n  UrlUtils,\n  Versions,\n  Watchman,\n} from '../internal';\n\nconst treekillAsync = promisify<number, string>(treekill);\n\n// The --verbose flag is intended for react-native-cli/metro, not expo-cli\nconst METRO_VERBOSE_WARNING = 'Run CLI with --verbose flag for more details.';\n\n// Remove these constants and related code when SDK35 isn't supported anymore\n// Context: https://github.com/expo/expo-cli/issues/1074\nconst NODE_12_WINDOWS_METRO_ERROR = `Invalid regular expression: /(.*\\\\__fixtures__\\\\.*|node_modules[\\\\]react[\\\\]dist[\\\\].*|website\\\\node_modules\\\\.*|heapCapture\\\\bundle.js|.*\\\\__tests__\\\\.*)$/: Unterminated character class`;\nconst NODE_12_WINDOWS_METRO_SUGGESTION = `\\nUnable to start the project due to a documented incompatibility between Node 12 LTS and Expo SDK 35 on Windows.\nPlease refer to this GitHub comment for a solution:\nhttps://github.com/expo/expo-cli/issues/1074#issuecomment-559220752\\n`;\n\nfunction _logPackagerOutput(projectRoot: string, level: string, data: object) {\n  let output = data.toString();\n  if (!output) {\n    return;\n  }\n  // Temporarily hide warnings about duplicate providesModule declarations\n  // under react-native\n  if (_isIgnorableDuplicateModuleWarning(projectRoot, level, output)) {\n    ProjectUtils.logDebug(\n      projectRoot,\n      'expo',\n      `Suppressing @providesModule warning: ${output}`,\n      'project-suppress-providesmodule-warning'\n    );\n    return;\n  }\n  if (_isIgnorableMetroConsoleOutput(output) || _isIgnorableRnpmWarning(output)) {\n    ProjectUtils.logDebug(projectRoot, 'expo', output);\n    return;\n  }\n\n  if (output.includes(NODE_12_WINDOWS_METRO_ERROR)) {\n    ProjectUtils.logError(projectRoot, 'expo', NODE_12_WINDOWS_METRO_SUGGESTION);\n    return;\n  }\n\n  if (output.includes(METRO_VERBOSE_WARNING)) {\n    output = output.replace(METRO_VERBOSE_WARNING, '');\n  }\n\n  if (/^Scanning folders for symlinks in /.test(output)) {\n    ProjectUtils.logDebug(projectRoot, 'metro', output);\n    return;\n  }\n  if (level === 'info') {\n    ProjectUtils.logInfo(projectRoot, 'metro', output);\n  } else {\n    ProjectUtils.logError(projectRoot, 'metro', output);\n  }\n}\n\nfunction _isIgnorableMetroConsoleOutput(output: string) {\n  // As of react-native 0.61.x, Metro prints console logs from the device to console, without\n  // passing them through the custom log reporter.\n  //\n  // Managed apps have a separate remote logging implementation included in the Expo SDK,\n  // (see: _handleDeviceLogs), so we can just ignore these device logs from Metro.\n  // if (/^ () /)\n  //\n  // These logs originate from:\n  // https://github.com/facebook/metro/blob/e8181fb9db7db31adf7d1ed9ab840f54449ef238/packages/metro/src/lib/logToConsole.js#L50\n  return /^\\s+(INFO|WARN|LOG|GROUP|DEBUG) /.test(output);\n}\n\nfunction _isIgnorableRnpmWarning(output: string) {\n  return output.startsWith(\n    'warn The following packages use deprecated \"rnpm\" config that will stop working from next release'\n  );\n}\n\nfunction _isIgnorableDuplicateModuleWarning(\n  projectRoot: string,\n  level: string,\n  output: string\n): boolean {\n  if (\n    level !== 'error' ||\n    !output.startsWith('jest-haste-map: @providesModule naming collision:')\n  ) {\n    return false;\n  }\n\n  const reactNativeNodeModulesPath = path.join(\n    projectRoot,\n    'node_modules',\n    'react-native',\n    'node_modules'\n  );\n  const reactNativeNodeModulesPattern = escapeRegExp(reactNativeNodeModulesPath);\n  const reactNativeNodeModulesCollisionRegex = new RegExp(\n    `Paths: ${reactNativeNodeModulesPattern}.+ collides with ${reactNativeNodeModulesPattern}.+`\n  );\n  return reactNativeNodeModulesCollisionRegex.test(output);\n}\n\nexport async function startReactNativeServerAsync({\n  projectRoot,\n  options = {},\n  exp = getConfig(projectRoot).exp,\n  verbose = true,\n}: {\n  projectRoot: string;\n  options: StartDevServerOptions;\n  exp?: ExpoConfig;\n  verbose?: boolean;\n}): Promise<void> {\n  assertValidProjectRoot(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  await Watchman.addToPathAsync(); // Attempt to fix watchman if it's hanging\n  await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  let packagerPort = await getFreePortAsync(options.metroPort || 19001); // Create packager options\n\n  const customLogReporterPath: string = require.resolve(\n    path.join(__dirname, '../../build/reporter')\n  );\n\n  // TODO: Bacon: Support .mjs (short-lived JS modules extension that some packages use)\n  const sourceExtsConfig = { isTS: true, isReact: true, isModern: false };\n  const sourceExts =\n    options.target === 'bare'\n      ? getBareExtensions([], sourceExtsConfig)\n      : getManagedExtensions([], sourceExtsConfig);\n\n  let packagerOpts: { [key: string]: any } = {\n    port: packagerPort,\n    customLogReporterPath,\n    sourceExts,\n  };\n\n  if (options.nonPersistent && !Versions.gteSdkVersion(exp, '33.0.0')) {\n    // Expo SDK -32 | React Native -57\n    packagerOpts.nonPersistent = true;\n  }\n\n  if (!Versions.lteSdkVersion(exp, '32.0.0')) {\n    // Expo SDK +33 | React Native +59.8 (hooks): Add asset plugins\n\n    // starting with SDK 37, we bundle this plugin with the expo-asset package instead of expo,\n    // so check there first and fall back to expo if we can't find it in expo-asset\n    packagerOpts.assetPlugins = resolveFrom.silent(projectRoot, 'expo-asset/tools/hashAssetFiles');\n    if (!packagerOpts.assetPlugins) {\n      packagerOpts.assetPlugins = resolveFrom.silent(projectRoot, 'expo/tools/hashAssetFiles');\n      if (!packagerOpts.assetPlugins) {\n        throw new Error(\n          'Unable to find the expo-asset package in the current project. Install it and try again.'\n        );\n      }\n    }\n  }\n\n  if (options.maxWorkers) {\n    packagerOpts['max-workers'] = options.maxWorkers;\n  }\n\n  if (Versions.lteSdkVersion(exp, '15.0.0')) {\n    // Expo SDK -15 | React Native -42: customLogReporterPath is not supported\n    delete packagerOpts.customLogReporterPath;\n  }\n  const userPackagerOpts = exp.packagerOpts;\n\n  if (userPackagerOpts) {\n    // The RN CLI expects rn-cli.config.js's path to be absolute. We use the\n    // project root to resolve relative paths since that was the original\n    // behavior of the RN CLI.\n    if (userPackagerOpts.config) {\n      userPackagerOpts.config = path.resolve(projectRoot, userPackagerOpts.config);\n    }\n\n    // Provide a fallback if the value isn't given\n    const userSourceExts = userPackagerOpts.sourceExts ?? [];\n\n    packagerOpts = {\n      ...packagerOpts,\n      ...userPackagerOpts,\n      // In order to prevent people from forgetting to include the .expo extension or other things\n      // NOTE(brentvatne): we should probably do away with packagerOpts soon in favor of @expo/metro-config!\n      sourceExts: [...new Set([...packagerOpts.sourceExts, ...userSourceExts])],\n    };\n\n    if (userPackagerOpts.port !== undefined && userPackagerOpts.port !== null) {\n      packagerPort = userPackagerOpts.port;\n    }\n  }\n  const cliOpts = ['start'];\n  for (const [key, val] of Object.entries(packagerOpts)) {\n    // If the packager opt value is boolean, don't set\n    // --[opt] [value], just set '--opt'\n    if (val && typeof val === 'boolean') {\n      cliOpts.push(`--${key}`);\n    } else if (val) {\n      cliOpts.push(`--${key}`, val);\n    }\n  }\n\n  if (process.env.EXPO_DEBUG) {\n    cliOpts.push('--verbose');\n  }\n\n  if (options.reset) {\n    cliOpts.push('--reset-cache');\n  }\n\n  // Get the CLI path\n  const cliPath = resolveFrom(projectRoot, 'react-native/local-cli/cli.js');\n\n  // Run the copy of Node that's embedded in Electron by setting the\n  // ELECTRON_RUN_AS_NODE environment variable\n  // Note: the CLI script sets up graceful-fs and sets ulimit to 4096 in the\n  // child process\n  const packagerProcess = child_process.fork(cliPath, cliOpts, {\n    cwd: projectRoot,\n    env: {\n      ...process.env,\n      NODE_OPTIONS: process.env.METRO_NODE_OPTIONS,\n      REACT_NATIVE_APP_ROOT: projectRoot,\n      ELECTRON_RUN_AS_NODE: '1',\n    },\n    silent: true,\n  });\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort,\n    packagerPid: packagerProcess.pid,\n  }); // TODO: do we need this? don't know if it's ever called\n  process.on('exit', () => {\n    treekill(packagerProcess.pid);\n  });\n  if (!packagerProcess.stdout) {\n    throw new Error('Expected spawned process to have a stdout stream, but none was found.');\n  }\n  if (!packagerProcess.stderr) {\n    throw new Error('Expected spawned process to have a stderr stream, but none was found.');\n  }\n  packagerProcess.stdout.setEncoding('utf8');\n  packagerProcess.stderr.setEncoding('utf8');\n  packagerProcess.stdout.pipe(split()).on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'info', data);\n    }\n  });\n  packagerProcess.stderr.on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'error', data);\n    }\n  });\n  const exitPromise = new Promise<void>((resolve, reject) => {\n    packagerProcess.once('exit', async code => {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Metro Bundler process exited with code ${code}`);\n      if (code) {\n        reject(new Error(`Metro Bundler process exited with code ${code}`));\n      } else {\n        resolve();\n      }\n      try {\n        await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n          packagerPort: null,\n          packagerPid: null,\n        });\n      } catch {}\n    });\n  });\n  const packagerUrl = await UrlUtils.constructBundleUrlAsync(projectRoot, {\n    urlType: 'http',\n    hostType: 'localhost',\n  });\n  await Promise.race([_waitForRunningAsync(projectRoot, `${packagerUrl}/status`), exitPromise]);\n}\n\nexport async function stopReactNativeServerAsync(projectRoot: string): Promise<void> {\n  assertValidProjectRoot(projectRoot);\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort || !packagerInfo.packagerPid) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `No packager found for project at ${projectRoot}.`);\n    return;\n  }\n  ProjectUtils.logDebug(\n    projectRoot,\n    'expo',\n    `Killing packager process tree: ${packagerInfo.packagerPid}`\n  );\n  try {\n    await treekillAsync(packagerInfo.packagerPid, 'SIGKILL');\n  } catch (e: any) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping packager process: ${e.toString()}`);\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort: null,\n    packagerPid: null,\n  });\n}\n\nasync function _waitForRunningAsync(\n  projectRoot: string,\n  url: string,\n  retries: number = 300\n): Promise<true> {\n  try {\n    const response = await axios.request({\n      url,\n      responseType: 'text',\n      proxy: false,\n    });\n    if (/packager-status:running/.test(response.data)) {\n      return true;\n    } else if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. Server response: ${response.data}`\n      );\n    }\n  } catch (e: any) {\n    if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. ${e.message}`\n      );\n    }\n  }\n\n  if (retries <= 0) {\n    throw new Error('Connecting to Metro bundler failed.');\n  } else {\n    await delayAsync(100);\n    return _waitForRunningAsync(projectRoot, url, retries - 1);\n  }\n}\n"],"mappings":"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"}