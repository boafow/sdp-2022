{"version":3,"file":"Semaphore.js","names":["Semaphore","acquire","available","Promise","resolve","resolver","queue","push","release","length","Error","nextResolver","shift"],"sources":["../../src/utils/Semaphore.ts"],"sourcesContent":["export class Semaphore {\n  queue: ((v: boolean) => void)[] = [];\n  available = 1;\n\n  async acquire(): Promise<boolean> {\n    if (this.available > 0) {\n      this.available -= 1;\n      return Promise.resolve(true);\n    }\n\n    // If there is no permit available, we return a promise that resolves once the semaphore gets\n    // signaled enough times that \"available\" is equal to one.\n    return new Promise(resolver => this.queue.push(resolver));\n  }\n\n  release() {\n    this.available += 1;\n\n    if (this.available > 1 && this.queue.length > 0) {\n      throw new Error('this.available should never be > 0 when there is someone waiting.');\n    } else if (this.available === 1 && this.queue.length > 0) {\n      // If there is someone else waiting, immediately consume the permit that was released\n      // at the beginning of this function and let the waiting function resume.\n      this.available -= 1;\n\n      const nextResolver = this.queue.shift();\n      if (nextResolver) {\n        nextResolver(true);\n      }\n    }\n  }\n}\n"],"mappings":";;;;;;;;;AAAO,MAAMA,SAAS,CAAC;EAAA;IAAA,+BACa,EAAE;IAAA,mCACxB,CAAC;EAAA;EAEb,MAAMC,OAAO,GAAqB;IAChC,IAAI,IAAI,CAACC,SAAS,GAAG,CAAC,EAAE;MACtB,IAAI,CAACA,SAAS,IAAI,CAAC;MACnB,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;IAC9B;;IAEA;IACA;IACA,OAAO,IAAID,OAAO,CAACE,QAAQ,IAAI,IAAI,CAACC,KAAK,CAACC,IAAI,CAACF,QAAQ,CAAC,CAAC;EAC3D;EAEAG,OAAO,GAAG;IACR,IAAI,CAACN,SAAS,IAAI,CAAC;IAEnB,IAAI,IAAI,CAACA,SAAS,GAAG,CAAC,IAAI,IAAI,CAACI,KAAK,CAACG,MAAM,GAAG,CAAC,EAAE;MAC/C,MAAM,IAAIC,KAAK,CAAC,mEAAmE,CAAC;IACtF,CAAC,MAAM,IAAI,IAAI,CAACR,SAAS,KAAK,CAAC,IAAI,IAAI,CAACI,KAAK,CAACG,MAAM,GAAG,CAAC,EAAE;MACxD;MACA;MACA,IAAI,CAACP,SAAS,IAAI,CAAC;MAEnB,MAAMS,YAAY,GAAG,IAAI,CAACL,KAAK,CAACM,KAAK,EAAE;MACvC,IAAID,YAAY,EAAE;QAChBA,YAAY,CAAC,IAAI,CAAC;MACpB;IACF;EACF;AACF;AAAC"}