{"version":3,"file":"choosePortAsync.js","names":["choosePortAsync","projectRoot","defaultPort","host","reuseExistingPort","port","freeportAsync","hostnames","isRestricted","process","platform","isRoot","message","chalk","bold","runningProcess","getRunningProcess","pidTag","gray","pid","directory","cyan","command","Logger","global","info","change","confirmAsync","initial","error","code","warn"],"sources":["../../src/utils/choosePortAsync.ts"],"sourcesContent":["import chalk from 'chalk';\nimport freeportAsync from 'freeport-async';\nimport isRoot from 'is-root';\n\nimport Logger from '../Logger';\nimport { confirmAsync } from '../Prompts';\nimport { getRunningProcess } from './getRunningProcess';\n\nexport async function choosePortAsync(\n  projectRoot: string,\n  {\n    defaultPort,\n    host,\n    reuseExistingPort,\n  }: {\n    defaultPort: number;\n    host?: string;\n    reuseExistingPort?: boolean;\n  }\n): Promise<number | null> {\n  try {\n    const port = await freeportAsync(defaultPort, { hostnames: [host ?? null] });\n    if (port === defaultPort) {\n      return port;\n    }\n\n    const isRestricted = process.platform !== 'win32' && defaultPort < 1024 && !isRoot();\n\n    let message = isRestricted\n      ? `Admin permissions are required to run a server on a port below 1024`\n      : `Port ${chalk.bold(defaultPort)} is`;\n\n    const runningProcess = isRestricted ? null : getRunningProcess(defaultPort);\n\n    if (runningProcess) {\n      const pidTag = chalk.gray(`(pid ${runningProcess.pid})`);\n      if (runningProcess.directory === projectRoot) {\n        message += ` running this app in another window`;\n        if (reuseExistingPort) {\n          return null;\n        }\n      } else {\n        message += ` running ${chalk.cyan(runningProcess.command)} in another window`;\n      }\n      message += '\\n' + chalk.gray(`  ${runningProcess.directory} ${pidTag}`);\n    }\n\n    Logger.global.info(`\\u203A ${message}`);\n    const change = await confirmAsync({\n      message: `Use port ${port} instead?`,\n      initial: true,\n    });\n    return change ? port : null;\n  } catch (error: any) {\n    if (error.code === 'ABORTED') {\n      throw error;\n    } else if (error.code === 'NON_INTERACTIVE') {\n      Logger.global.warn(error.message);\n      return null;\n    }\n    throw error;\n  }\n}\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAwD;AAEjD,eAAeA,eAAe,CACnCC,WAAmB,EACnB;EACEC,WAAW;EACXC,IAAI;EACJC;AAKF,CAAC,EACuB;EACxB,IAAI;IACF,MAAMC,IAAI,GAAG,MAAM,IAAAC,wBAAa,EAACJ,WAAW,EAAE;MAAEK,SAAS,EAAE,CAACJ,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAI,IAAI;IAAE,CAAC,CAAC;IAC5E,IAAIE,IAAI,KAAKH,WAAW,EAAE;MACxB,OAAOG,IAAI;IACb;IAEA,MAAMG,YAAY,GAAGC,OAAO,CAACC,QAAQ,KAAK,OAAO,IAAIR,WAAW,GAAG,IAAI,IAAI,CAAC,IAAAS,iBAAM,GAAE;IAEpF,IAAIC,OAAO,GAAGJ,YAAY,GACrB,qEAAoE,GACpE,QAAOK,gBAAK,CAACC,IAAI,CAACZ,WAAW,CAAE,KAAI;IAExC,MAAMa,cAAc,GAAGP,YAAY,GAAG,IAAI,GAAG,IAAAQ,sCAAiB,EAACd,WAAW,CAAC;IAE3E,IAAIa,cAAc,EAAE;MAClB,MAAME,MAAM,GAAGJ,gBAAK,CAACK,IAAI,CAAE,QAAOH,cAAc,CAACI,GAAI,GAAE,CAAC;MACxD,IAAIJ,cAAc,CAACK,SAAS,KAAKnB,WAAW,EAAE;QAC5CW,OAAO,IAAK,qCAAoC;QAChD,IAAIR,iBAAiB,EAAE;UACrB,OAAO,IAAI;QACb;MACF,CAAC,MAAM;QACLQ,OAAO,IAAK,YAAWC,gBAAK,CAACQ,IAAI,CAACN,cAAc,CAACO,OAAO,CAAE,oBAAmB;MAC/E;MACAV,OAAO,IAAI,IAAI,GAAGC,gBAAK,CAACK,IAAI,CAAE,KAAIH,cAAc,CAACK,SAAU,IAAGH,MAAO,EAAC,CAAC;IACzE;IAEAM,iBAAM,CAACC,MAAM,CAACC,IAAI,CAAE,UAASb,OAAQ,EAAC,CAAC;IACvC,MAAMc,MAAM,GAAG,MAAM,IAAAC,uBAAY,EAAC;MAChCf,OAAO,EAAG,YAAWP,IAAK,WAAU;MACpCuB,OAAO,EAAE;IACX,CAAC,CAAC;IACF,OAAOF,MAAM,GAAGrB,IAAI,GAAG,IAAI;EAC7B,CAAC,CAAC,OAAOwB,KAAU,EAAE;IACnB,IAAIA,KAAK,CAACC,IAAI,KAAK,SAAS,EAAE;MAC5B,MAAMD,KAAK;IACb,CAAC,MAAM,IAAIA,KAAK,CAACC,IAAI,KAAK,iBAAiB,EAAE;MAC3CP,iBAAM,CAACC,MAAM,CAACO,IAAI,CAACF,KAAK,CAACjB,OAAO,CAAC;MACjC,OAAO,IAAI;IACb;IACA,MAAMiB,KAAK;EACb;AACF"}