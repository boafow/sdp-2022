{"version":3,"file":"getRunningProcess.js","names":["defaultOptions","encoding","stdio","getPID","port","execFileSync","split","trim","getPackageName","packageRoot","packageJson","path","join","require","name","getProcessCommand","pid","procDirectory","results","execSync","replace","getDirectoryOfProcessById","processId","getRunningProcess","directory","command"],"sources":["../../src/utils/getRunningProcess.ts"],"sourcesContent":["import { execFileSync, execSync, ExecSyncOptionsWithStringEncoding } from 'child_process';\nimport * as path from 'path';\n\nconst defaultOptions: ExecSyncOptionsWithStringEncoding = {\n  encoding: 'utf8',\n  stdio: ['pipe', 'pipe', 'ignore'],\n};\n\nfunction getPID(port: number) {\n  return execFileSync('lsof', [`-i:${port}`, '-P', '-t', '-sTCP:LISTEN'], defaultOptions)\n    .split('\\n')[0]\n    .trim();\n}\n\nfunction getPackageName(packageRoot: string): string | null {\n  const packageJson = path.join(packageRoot.trim(), 'package.json');\n  try {\n    return require(packageJson).name || null;\n  } catch {\n    return null;\n  }\n}\n\nfunction getProcessCommand(pid: string, procDirectory: string): string {\n  const results = execSync(`ps -o command -p ${pid} | sed -n 2p`, defaultOptions)\n    .replace(/\\n$/, '')\n    .trim();\n\n  const name = getPackageName(procDirectory);\n  return name ? name : results;\n}\n\nfunction getDirectoryOfProcessById(processId: string): string {\n  return execSync(\n    'lsof -p ' + processId + ' | awk \\'$4==\"cwd\" {for (i=9; i<=NF; i++) printf \"%s \", $i}\\'',\n    defaultOptions\n  ).trim();\n}\n\nexport function getRunningProcess(\n  port: number\n): { pid: string; directory: string; command: string } | null {\n  try {\n    // 63828\n    const pid = getPID(port);\n    // /Users/evanbacon/Documents/GitHub/lab/myapp\n    const directory = getDirectoryOfProcessById(pid);\n    // /Users/evanbacon/Documents/GitHub/lab/myapp/package.json\n    const command = getProcessCommand(pid, directory);\n    // TODO: Have a better message for reusing another process.\n    return { pid, directory, command };\n  } catch {\n    return null;\n  }\n}\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAA6B;AAAA;AAE7B,MAAMA,cAAiD,GAAG;EACxDC,QAAQ,EAAE,MAAM;EAChBC,KAAK,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ;AAClC,CAAC;AAED,SAASC,MAAM,CAACC,IAAY,EAAE;EAC5B,OAAO,IAAAC,6BAAY,EAAC,MAAM,EAAE,CAAE,MAAKD,IAAK,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,cAAc,CAAC,EAAEJ,cAAc,CAAC,CACpFM,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CACdC,IAAI,EAAE;AACX;AAEA,SAASC,cAAc,CAACC,WAAmB,EAAiB;EAC1D,MAAMC,WAAW,GAAGC,IAAI,GAACC,IAAI,CAACH,WAAW,CAACF,IAAI,EAAE,EAAE,cAAc,CAAC;EACjE,IAAI;IACF,OAAOM,OAAO,CAACH,WAAW,CAAC,CAACI,IAAI,IAAI,IAAI;EAC1C,CAAC,CAAC,MAAM;IACN,OAAO,IAAI;EACb;AACF;AAEA,SAASC,iBAAiB,CAACC,GAAW,EAAEC,aAAqB,EAAU;EACrE,MAAMC,OAAO,GAAG,IAAAC,yBAAQ,EAAE,oBAAmBH,GAAI,cAAa,EAAEhB,cAAc,CAAC,CAC5EoB,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAClBb,IAAI,EAAE;EAET,MAAMO,IAAI,GAAGN,cAAc,CAACS,aAAa,CAAC;EAC1C,OAAOH,IAAI,GAAGA,IAAI,GAAGI,OAAO;AAC9B;AAEA,SAASG,yBAAyB,CAACC,SAAiB,EAAU;EAC5D,OAAO,IAAAH,yBAAQ,EACb,UAAU,GAAGG,SAAS,GAAG,+DAA+D,EACxFtB,cAAc,CACf,CAACO,IAAI,EAAE;AACV;AAEO,SAASgB,iBAAiB,CAC/BnB,IAAY,EACgD;EAC5D,IAAI;IACF;IACA,MAAMY,GAAG,GAAGb,MAAM,CAACC,IAAI,CAAC;IACxB;IACA,MAAMoB,SAAS,GAAGH,yBAAyB,CAACL,GAAG,CAAC;IAChD;IACA,MAAMS,OAAO,GAAGV,iBAAiB,CAACC,GAAG,EAAEQ,SAAS,CAAC;IACjD;IACA,OAAO;MAAER,GAAG;MAAEQ,SAAS;MAAEC;IAAQ,CAAC;EACpC,CAAC,CAAC,MAAM;IACN,OAAO,IAAI;EACb;AACF"}