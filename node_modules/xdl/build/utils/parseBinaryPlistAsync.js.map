{"version":3,"file":"parseBinaryPlistAsync.js","names":["CHAR_CHEVRON_OPEN","CHAR_B_LOWER","parseBinaryPlistAsync","plistPath","parsePlistBuffer","fs","promises","readFile","contents","info","plist","parse","toString","Array","isArray","binaryPlist","parseBuffer","Error"],"sources":["../../src/utils/parseBinaryPlistAsync.ts"],"sourcesContent":["import plist from '@expo/plist';\n// @ts-ignore\nimport binaryPlist from 'bplist-parser';\nimport fs from 'fs';\n\nconst CHAR_CHEVRON_OPEN = 60;\nconst CHAR_B_LOWER = 98;\n// .mobileprovision\n// const CHAR_ZERO = 30;\n\nexport async function parseBinaryPlistAsync(plistPath: string) {\n  return parsePlistBuffer(await fs.promises.readFile(plistPath));\n}\n\nexport function parsePlistBuffer(contents: Buffer) {\n  if (contents[0] === CHAR_CHEVRON_OPEN) {\n    const info = plist.parse(contents.toString());\n    if (Array.isArray(info)) return info[0];\n    return info;\n  } else if (contents[0] === CHAR_B_LOWER) {\n    const info = binaryPlist.parseBuffer(contents);\n    if (Array.isArray(info)) return info[0];\n    return info;\n  } else {\n    throw new Error(`Cannot parse plist of type byte (0x${contents[0].toString(16)})`);\n  }\n}\n"],"mappings":";;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAoB;AAFpB;;AAIA,MAAMA,iBAAiB,GAAG,EAAE;AAC5B,MAAMC,YAAY,GAAG,EAAE;AACvB;AACA;;AAEO,eAAeC,qBAAqB,CAACC,SAAiB,EAAE;EAC7D,OAAOC,gBAAgB,CAAC,MAAMC,aAAE,CAACC,QAAQ,CAACC,QAAQ,CAACJ,SAAS,CAAC,CAAC;AAChE;AAEO,SAASC,gBAAgB,CAACI,QAAgB,EAAE;EACjD,IAAIA,QAAQ,CAAC,CAAC,CAAC,KAAKR,iBAAiB,EAAE;IACrC,MAAMS,IAAI,GAAGC,gBAAK,CAACC,KAAK,CAACH,QAAQ,CAACI,QAAQ,EAAE,CAAC;IAC7C,IAAIC,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,EAAE,OAAOA,IAAI,CAAC,CAAC,CAAC;IACvC,OAAOA,IAAI;EACb,CAAC,MAAM,IAAID,QAAQ,CAAC,CAAC,CAAC,KAAKP,YAAY,EAAE;IACvC,MAAMQ,IAAI,GAAGM,uBAAW,CAACC,WAAW,CAACR,QAAQ,CAAC;IAC9C,IAAIK,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,EAAE,OAAOA,IAAI,CAAC,CAAC,CAAC;IACvC,OAAOA,IAAI;EACb,CAAC,MAAM;IACL,MAAM,IAAIQ,KAAK,CAAE,sCAAqCT,QAAQ,CAAC,CAAC,CAAC,CAACI,QAAQ,CAAC,EAAE,CAAE,GAAE,CAAC;EACpF;AACF"}